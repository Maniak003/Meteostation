
Meteostation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a74  0800af60  0800af60  0001af60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9d4  0800b9d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9d4  0800b9d4  0001b9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9dc  0800b9dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9dc  0800b9dc  0001b9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9e0  0800b9e0  0001b9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  200001e4  0800bbc8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  0800bbc8  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bd1  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035aa  00000000  00000000  00039dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0003d388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a8  00000000  00000000  0003ea58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b924  00000000  00000000  00040000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019890  00000000  00000000  0005b924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf46  00000000  00000000  000751b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001110fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000751c  00000000  00000000  00111150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0011866c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00118738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af44 	.word	0x0800af44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800af44 	.word	0x0800af44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_ldivmod>:
 80010d0:	b97b      	cbnz	r3, 80010f2 <__aeabi_ldivmod+0x22>
 80010d2:	b972      	cbnz	r2, 80010f2 <__aeabi_ldivmod+0x22>
 80010d4:	2900      	cmp	r1, #0
 80010d6:	bfbe      	ittt	lt
 80010d8:	2000      	movlt	r0, #0
 80010da:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80010de:	e006      	blt.n	80010ee <__aeabi_ldivmod+0x1e>
 80010e0:	bf08      	it	eq
 80010e2:	2800      	cmpeq	r0, #0
 80010e4:	bf1c      	itt	ne
 80010e6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80010ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80010ee:	f000 b9a1 	b.w	8001434 <__aeabi_idiv0>
 80010f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80010f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010fa:	2900      	cmp	r1, #0
 80010fc:	db09      	blt.n	8001112 <__aeabi_ldivmod+0x42>
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db1a      	blt.n	8001138 <__aeabi_ldivmod+0x68>
 8001102:	f000 f835 	bl	8001170 <__udivmoddi4>
 8001106:	f8dd e004 	ldr.w	lr, [sp, #4]
 800110a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800110e:	b004      	add	sp, #16
 8001110:	4770      	bx	lr
 8001112:	4240      	negs	r0, r0
 8001114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	db1b      	blt.n	8001154 <__aeabi_ldivmod+0x84>
 800111c:	f000 f828 	bl	8001170 <__udivmoddi4>
 8001120:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001128:	b004      	add	sp, #16
 800112a:	4240      	negs	r0, r0
 800112c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001130:	4252      	negs	r2, r2
 8001132:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001136:	4770      	bx	lr
 8001138:	4252      	negs	r2, r2
 800113a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800113e:	f000 f817 	bl	8001170 <__udivmoddi4>
 8001142:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800114a:	b004      	add	sp, #16
 800114c:	4240      	negs	r0, r0
 800114e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001152:	4770      	bx	lr
 8001154:	4252      	negs	r2, r2
 8001156:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800115a:	f000 f809 	bl	8001170 <__udivmoddi4>
 800115e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001166:	b004      	add	sp, #16
 8001168:	4252      	negs	r2, r2
 800116a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800116e:	4770      	bx	lr

08001170 <__udivmoddi4>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	9e08      	ldr	r6, [sp, #32]
 8001176:	460d      	mov	r5, r1
 8001178:	4604      	mov	r4, r0
 800117a:	468e      	mov	lr, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	f040 8083 	bne.w	8001288 <__udivmoddi4+0x118>
 8001182:	428a      	cmp	r2, r1
 8001184:	4617      	mov	r7, r2
 8001186:	d947      	bls.n	8001218 <__udivmoddi4+0xa8>
 8001188:	fab2 f382 	clz	r3, r2
 800118c:	b14b      	cbz	r3, 80011a2 <__udivmoddi4+0x32>
 800118e:	f1c3 0120 	rsb	r1, r3, #32
 8001192:	fa05 fe03 	lsl.w	lr, r5, r3
 8001196:	fa20 f101 	lsr.w	r1, r0, r1
 800119a:	409f      	lsls	r7, r3
 800119c:	ea41 0e0e 	orr.w	lr, r1, lr
 80011a0:	409c      	lsls	r4, r3
 80011a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011a6:	fbbe fcf8 	udiv	ip, lr, r8
 80011aa:	fa1f f987 	uxth.w	r9, r7
 80011ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80011b2:	fb0c f009 	mul.w	r0, ip, r9
 80011b6:	0c21      	lsrs	r1, r4, #16
 80011b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011bc:	4290      	cmp	r0, r2
 80011be:	d90a      	bls.n	80011d6 <__udivmoddi4+0x66>
 80011c0:	18ba      	adds	r2, r7, r2
 80011c2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80011c6:	f080 8118 	bcs.w	80013fa <__udivmoddi4+0x28a>
 80011ca:	4290      	cmp	r0, r2
 80011cc:	f240 8115 	bls.w	80013fa <__udivmoddi4+0x28a>
 80011d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011d4:	443a      	add	r2, r7
 80011d6:	1a12      	subs	r2, r2, r0
 80011d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80011dc:	fb08 2210 	mls	r2, r8, r0, r2
 80011e0:	fb00 f109 	mul.w	r1, r0, r9
 80011e4:	b2a4      	uxth	r4, r4
 80011e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011ea:	42a1      	cmp	r1, r4
 80011ec:	d909      	bls.n	8001202 <__udivmoddi4+0x92>
 80011ee:	193c      	adds	r4, r7, r4
 80011f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011f4:	f080 8103 	bcs.w	80013fe <__udivmoddi4+0x28e>
 80011f8:	42a1      	cmp	r1, r4
 80011fa:	f240 8100 	bls.w	80013fe <__udivmoddi4+0x28e>
 80011fe:	3802      	subs	r0, #2
 8001200:	443c      	add	r4, r7
 8001202:	1a64      	subs	r4, r4, r1
 8001204:	2100      	movs	r1, #0
 8001206:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800120a:	b11e      	cbz	r6, 8001214 <__udivmoddi4+0xa4>
 800120c:	2200      	movs	r2, #0
 800120e:	40dc      	lsrs	r4, r3
 8001210:	e9c6 4200 	strd	r4, r2, [r6]
 8001214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001218:	b902      	cbnz	r2, 800121c <__udivmoddi4+0xac>
 800121a:	deff      	udf	#255	; 0xff
 800121c:	fab2 f382 	clz	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d14f      	bne.n	80012c4 <__udivmoddi4+0x154>
 8001224:	1a8d      	subs	r5, r1, r2
 8001226:	2101      	movs	r1, #1
 8001228:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800122c:	fa1f f882 	uxth.w	r8, r2
 8001230:	fbb5 fcfe 	udiv	ip, r5, lr
 8001234:	fb0e 551c 	mls	r5, lr, ip, r5
 8001238:	fb08 f00c 	mul.w	r0, r8, ip
 800123c:	0c22      	lsrs	r2, r4, #16
 800123e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001242:	42a8      	cmp	r0, r5
 8001244:	d907      	bls.n	8001256 <__udivmoddi4+0xe6>
 8001246:	197d      	adds	r5, r7, r5
 8001248:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800124c:	d202      	bcs.n	8001254 <__udivmoddi4+0xe4>
 800124e:	42a8      	cmp	r0, r5
 8001250:	f200 80e9 	bhi.w	8001426 <__udivmoddi4+0x2b6>
 8001254:	4694      	mov	ip, r2
 8001256:	1a2d      	subs	r5, r5, r0
 8001258:	fbb5 f0fe 	udiv	r0, r5, lr
 800125c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001260:	fb08 f800 	mul.w	r8, r8, r0
 8001264:	b2a4      	uxth	r4, r4
 8001266:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800126a:	45a0      	cmp	r8, r4
 800126c:	d907      	bls.n	800127e <__udivmoddi4+0x10e>
 800126e:	193c      	adds	r4, r7, r4
 8001270:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001274:	d202      	bcs.n	800127c <__udivmoddi4+0x10c>
 8001276:	45a0      	cmp	r8, r4
 8001278:	f200 80d9 	bhi.w	800142e <__udivmoddi4+0x2be>
 800127c:	4610      	mov	r0, r2
 800127e:	eba4 0408 	sub.w	r4, r4, r8
 8001282:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001286:	e7c0      	b.n	800120a <__udivmoddi4+0x9a>
 8001288:	428b      	cmp	r3, r1
 800128a:	d908      	bls.n	800129e <__udivmoddi4+0x12e>
 800128c:	2e00      	cmp	r6, #0
 800128e:	f000 80b1 	beq.w	80013f4 <__udivmoddi4+0x284>
 8001292:	2100      	movs	r1, #0
 8001294:	e9c6 0500 	strd	r0, r5, [r6]
 8001298:	4608      	mov	r0, r1
 800129a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129e:	fab3 f183 	clz	r1, r3
 80012a2:	2900      	cmp	r1, #0
 80012a4:	d14b      	bne.n	800133e <__udivmoddi4+0x1ce>
 80012a6:	42ab      	cmp	r3, r5
 80012a8:	d302      	bcc.n	80012b0 <__udivmoddi4+0x140>
 80012aa:	4282      	cmp	r2, r0
 80012ac:	f200 80b9 	bhi.w	8001422 <__udivmoddi4+0x2b2>
 80012b0:	1a84      	subs	r4, r0, r2
 80012b2:	eb65 0303 	sbc.w	r3, r5, r3
 80012b6:	2001      	movs	r0, #1
 80012b8:	469e      	mov	lr, r3
 80012ba:	2e00      	cmp	r6, #0
 80012bc:	d0aa      	beq.n	8001214 <__udivmoddi4+0xa4>
 80012be:	e9c6 4e00 	strd	r4, lr, [r6]
 80012c2:	e7a7      	b.n	8001214 <__udivmoddi4+0xa4>
 80012c4:	409f      	lsls	r7, r3
 80012c6:	f1c3 0220 	rsb	r2, r3, #32
 80012ca:	40d1      	lsrs	r1, r2
 80012cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80012d4:	fa1f f887 	uxth.w	r8, r7
 80012d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012dc:	fa24 f202 	lsr.w	r2, r4, r2
 80012e0:	409d      	lsls	r5, r3
 80012e2:	fb00 fc08 	mul.w	ip, r0, r8
 80012e6:	432a      	orrs	r2, r5
 80012e8:	0c15      	lsrs	r5, r2, #16
 80012ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012ee:	45ac      	cmp	ip, r5
 80012f0:	fa04 f403 	lsl.w	r4, r4, r3
 80012f4:	d909      	bls.n	800130a <__udivmoddi4+0x19a>
 80012f6:	197d      	adds	r5, r7, r5
 80012f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80012fc:	f080 808f 	bcs.w	800141e <__udivmoddi4+0x2ae>
 8001300:	45ac      	cmp	ip, r5
 8001302:	f240 808c 	bls.w	800141e <__udivmoddi4+0x2ae>
 8001306:	3802      	subs	r0, #2
 8001308:	443d      	add	r5, r7
 800130a:	eba5 050c 	sub.w	r5, r5, ip
 800130e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001312:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001316:	fb01 f908 	mul.w	r9, r1, r8
 800131a:	b295      	uxth	r5, r2
 800131c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001320:	45a9      	cmp	r9, r5
 8001322:	d907      	bls.n	8001334 <__udivmoddi4+0x1c4>
 8001324:	197d      	adds	r5, r7, r5
 8001326:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800132a:	d274      	bcs.n	8001416 <__udivmoddi4+0x2a6>
 800132c:	45a9      	cmp	r9, r5
 800132e:	d972      	bls.n	8001416 <__udivmoddi4+0x2a6>
 8001330:	3902      	subs	r1, #2
 8001332:	443d      	add	r5, r7
 8001334:	eba5 0509 	sub.w	r5, r5, r9
 8001338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800133c:	e778      	b.n	8001230 <__udivmoddi4+0xc0>
 800133e:	f1c1 0720 	rsb	r7, r1, #32
 8001342:	408b      	lsls	r3, r1
 8001344:	fa22 fc07 	lsr.w	ip, r2, r7
 8001348:	ea4c 0c03 	orr.w	ip, ip, r3
 800134c:	fa25 f407 	lsr.w	r4, r5, r7
 8001350:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001354:	fbb4 f9fe 	udiv	r9, r4, lr
 8001358:	fa1f f88c 	uxth.w	r8, ip
 800135c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001360:	fa20 f307 	lsr.w	r3, r0, r7
 8001364:	fb09 fa08 	mul.w	sl, r9, r8
 8001368:	408d      	lsls	r5, r1
 800136a:	431d      	orrs	r5, r3
 800136c:	0c2b      	lsrs	r3, r5, #16
 800136e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001372:	45a2      	cmp	sl, r4
 8001374:	fa02 f201 	lsl.w	r2, r2, r1
 8001378:	fa00 f301 	lsl.w	r3, r0, r1
 800137c:	d909      	bls.n	8001392 <__udivmoddi4+0x222>
 800137e:	eb1c 0404 	adds.w	r4, ip, r4
 8001382:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001386:	d248      	bcs.n	800141a <__udivmoddi4+0x2aa>
 8001388:	45a2      	cmp	sl, r4
 800138a:	d946      	bls.n	800141a <__udivmoddi4+0x2aa>
 800138c:	f1a9 0902 	sub.w	r9, r9, #2
 8001390:	4464      	add	r4, ip
 8001392:	eba4 040a 	sub.w	r4, r4, sl
 8001396:	fbb4 f0fe 	udiv	r0, r4, lr
 800139a:	fb0e 4410 	mls	r4, lr, r0, r4
 800139e:	fb00 fa08 	mul.w	sl, r0, r8
 80013a2:	b2ad      	uxth	r5, r5
 80013a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013a8:	45a2      	cmp	sl, r4
 80013aa:	d908      	bls.n	80013be <__udivmoddi4+0x24e>
 80013ac:	eb1c 0404 	adds.w	r4, ip, r4
 80013b0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80013b4:	d22d      	bcs.n	8001412 <__udivmoddi4+0x2a2>
 80013b6:	45a2      	cmp	sl, r4
 80013b8:	d92b      	bls.n	8001412 <__udivmoddi4+0x2a2>
 80013ba:	3802      	subs	r0, #2
 80013bc:	4464      	add	r4, ip
 80013be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013c2:	fba0 8902 	umull	r8, r9, r0, r2
 80013c6:	eba4 040a 	sub.w	r4, r4, sl
 80013ca:	454c      	cmp	r4, r9
 80013cc:	46c6      	mov	lr, r8
 80013ce:	464d      	mov	r5, r9
 80013d0:	d319      	bcc.n	8001406 <__udivmoddi4+0x296>
 80013d2:	d016      	beq.n	8001402 <__udivmoddi4+0x292>
 80013d4:	b15e      	cbz	r6, 80013ee <__udivmoddi4+0x27e>
 80013d6:	ebb3 020e 	subs.w	r2, r3, lr
 80013da:	eb64 0405 	sbc.w	r4, r4, r5
 80013de:	fa04 f707 	lsl.w	r7, r4, r7
 80013e2:	fa22 f301 	lsr.w	r3, r2, r1
 80013e6:	431f      	orrs	r7, r3
 80013e8:	40cc      	lsrs	r4, r1
 80013ea:	e9c6 7400 	strd	r7, r4, [r6]
 80013ee:	2100      	movs	r1, #0
 80013f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013f4:	4631      	mov	r1, r6
 80013f6:	4630      	mov	r0, r6
 80013f8:	e70c      	b.n	8001214 <__udivmoddi4+0xa4>
 80013fa:	468c      	mov	ip, r1
 80013fc:	e6eb      	b.n	80011d6 <__udivmoddi4+0x66>
 80013fe:	4610      	mov	r0, r2
 8001400:	e6ff      	b.n	8001202 <__udivmoddi4+0x92>
 8001402:	4543      	cmp	r3, r8
 8001404:	d2e6      	bcs.n	80013d4 <__udivmoddi4+0x264>
 8001406:	ebb8 0e02 	subs.w	lr, r8, r2
 800140a:	eb69 050c 	sbc.w	r5, r9, ip
 800140e:	3801      	subs	r0, #1
 8001410:	e7e0      	b.n	80013d4 <__udivmoddi4+0x264>
 8001412:	4628      	mov	r0, r5
 8001414:	e7d3      	b.n	80013be <__udivmoddi4+0x24e>
 8001416:	4611      	mov	r1, r2
 8001418:	e78c      	b.n	8001334 <__udivmoddi4+0x1c4>
 800141a:	4681      	mov	r9, r0
 800141c:	e7b9      	b.n	8001392 <__udivmoddi4+0x222>
 800141e:	4608      	mov	r0, r1
 8001420:	e773      	b.n	800130a <__udivmoddi4+0x19a>
 8001422:	4608      	mov	r0, r1
 8001424:	e749      	b.n	80012ba <__udivmoddi4+0x14a>
 8001426:	f1ac 0c02 	sub.w	ip, ip, #2
 800142a:	443d      	add	r5, r7
 800142c:	e713      	b.n	8001256 <__udivmoddi4+0xe6>
 800142e:	3802      	subs	r0, #2
 8001430:	443c      	add	r4, r7
 8001432:	e724      	b.n	800127e <__udivmoddi4+0x10e>

08001434 <__aeabi_idiv0>:
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop

08001438 <Error>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t t_fine;
//------------------------------------------------
void Error(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af04      	add	r7, sp, #16
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
 800144e:	460b      	mov	r3, r1
 8001450:	717b      	strb	r3, [r7, #5]
 8001452:	4613      	mov	r3, r2
 8001454:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	b29a      	uxth	r2, r3
 800145e:	88f9      	ldrh	r1, [r7, #6]
 8001460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	2301      	movs	r3, #1
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <I2Cx_WriteData+0x48>)
 8001472:	f003 fecd 	bl	8005210 <HAL_I2C_Mem_Write>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <I2Cx_WriteData+0x40>
 8001480:	f7ff ffda 	bl	8001438 <Error>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000640 	.word	0x20000640

08001490 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af04      	add	r7, sp, #16
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	80fb      	strh	r3, [r7, #6]
 800149c:	4613      	mov	r3, r2
 800149e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80014a8:	797b      	ldrb	r3, [r7, #5]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	88f9      	ldrh	r1, [r7, #6]
 80014ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	2301      	movs	r3, #1
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	f107 030e 	add.w	r3, r7, #14
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <I2Cx_ReadData+0x50>)
 80014c2:	f003 ff9f 	bl	8005404 <HAL_I2C_Mem_Read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <I2Cx_ReadData+0x44>
 80014d0:	f7ff ffb2 	bl	8001438 <Error>
  return value;
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000640 	.word	0x20000640

080014e4 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af04      	add	r7, sp, #16
 80014ea:	4603      	mov	r3, r0
 80014ec:	603a      	str	r2, [r7, #0]
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	460b      	mov	r3, r1
 80014f2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 80014f8:	797b      	ldrb	r3, [r7, #5]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	88f9      	ldrh	r1, [r7, #6]
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	2302      	movs	r3, #2
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <I2Cx_ReadData16+0x48>)
 8001510:	f003 ff78 	bl	8005404 <HAL_I2C_Mem_Read>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <I2Cx_ReadData16+0x3e>
 800151e:	f7ff ff8b 	bl	8001438 <Error>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000640 	.word	0x20000640

08001530 <BME280_WriteReg>:
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
  if(status != HAL_OK) Error();
}
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8001540:	79ba      	ldrb	r2, [r7, #6]
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4619      	mov	r1, r3
 8001546:	20ec      	movs	r0, #236	; 0xec
 8001548:	f7ff ff7c 	bl	8001444 <I2Cx_WriteData>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4619      	mov	r1, r3
 8001562:	20ec      	movs	r0, #236	; 0xec
 8001564:	f7ff ff94 	bl	8001490 <I2Cx_ReadData>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
  return res;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	6039      	str	r1, [r7, #0]
 8001580:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	20ec      	movs	r0, #236	; 0xec
 800158a:	f7ff ffab 	bl	80014e4 <I2Cx_ReadData16>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	6039      	str	r1, [r7, #0]
 80015a0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4619      	mov	r1, r3
 80015a8:	20ec      	movs	r0, #236	; 0xec
 80015aa:	f7ff ff9b 	bl	80014e4 <I2Cx_ReadData16>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
uint16_t BME280_ReadReg_BE_S16(uint8_t Reg)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer_8[2];
	HAL_StatusTypeDef status = HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, buffer_8, 2, 0x10000);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	2302      	movs	r3, #2
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2301      	movs	r3, #1
 80015dc:	21ec      	movs	r1, #236	; 0xec
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <BME280_ReadReg_BE_S16+0x54>)
 80015e0:	f003 ff10 	bl	8005404 <HAL_I2C_Mem_Read>
 80015e4:	4603      	mov	r3, r0
 80015e6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <BME280_ReadReg_BE_S16+0x3a>
		Error();
 80015ee:	f7ff ff23 	bl	8001438 <Error>
	}
	return (uint16_t)(buffer_8[0]) << 8 | (uint16_t)(buffer_8[1]);
 80015f2:	7b3b      	ldrb	r3, [r7, #12]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21b      	sxth	r3, r3
 8001600:	b29b      	uxth	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000640 	.word	0x20000640

08001610 <BME280_ReadReg_BE_U24>:
{
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
uint32_t BME280_ReadReg_BE_U24(uint8_t Reg) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af04      	add	r7, sp, #16
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer_8[3];
	HAL_StatusTypeDef status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, buffer_8, 3, 0x10000);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	b29a      	uxth	r2, r3
 8001622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	2303      	movs	r3, #3
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2301      	movs	r3, #1
 8001634:	21ec      	movs	r1, #236	; 0xec
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <BME280_ReadReg_BE_U24+0x50>)
 8001638:	f003 fee4 	bl	8005404 <HAL_I2C_Mem_Read>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <BME280_ReadReg_BE_U24+0x3a>
		Error();
 8001646:	f7ff fef7 	bl	8001438 <Error>
	}
	return (uint32_t) (buffer_8[0]) << 16 | (uint32_t) (buffer_8[1]) << 8 | (uint32_t) (buffer_8[2]);
 800164a:	7b3b      	ldrb	r3, [r7, #12]
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	7b7b      	ldrb	r3, [r7, #13]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	4313      	orrs	r3, r2
 8001654:	7bba      	ldrb	r2, [r7, #14]
 8001656:	4313      	orrs	r3, r2
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000640 	.word	0x20000640

08001664 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
	int32_t var1, var2;
	int32_t adc_T = BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA);
 800166a:	20fa      	movs	r0, #250	; 0xfa
 800166c:	f7ff ffd0 	bl	8001610 <BME280_ReadReg_BE_U24>
 8001670:	4603      	mov	r3, r0
 8001672:	60fb      	str	r3, [r7, #12]

	if ( adc_T == 0x800000) {
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800167a:	d101      	bne.n	8001680 <BME280_ReadTemperature+0x1c>
		return NAN;
 800167c:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <BME280_ReadTemperature+0xcc>)
 800167e:	e052      	b.n	8001726 <BME280_ReadTemperature+0xc2>
	}
	adc_T >>= 4;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	111b      	asrs	r3, r3, #4
 8001684:	60fb      	str	r3, [r7, #12]
	var1 = (int32_t)((adc_T / 8) - ((int32_t)CalibData.dig_T1 * 2));
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da00      	bge.n	800168e <BME280_ReadTemperature+0x2a>
 800168c:	3307      	adds	r3, #7
 800168e:	10db      	asrs	r3, r3, #3
 8001690:	461a      	mov	r2, r3
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <BME280_ReadTemperature+0xd0>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	60bb      	str	r3, [r7, #8]
  	var1 = (var1 * ((int32_t)CalibData.dig_T2)) / 2048;
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <BME280_ReadTemperature+0xd0>)
 800169e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	fb03 f302 	mul.w	r3, r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	da01      	bge.n	80016b2 <BME280_ReadTemperature+0x4e>
 80016ae:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80016b2:	12db      	asrs	r3, r3, #11
 80016b4:	60bb      	str	r3, [r7, #8]
  	var2 = (int32_t)((adc_T / 16) - ((int32_t)CalibData.dig_T1));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da00      	bge.n	80016be <BME280_ReadTemperature+0x5a>
 80016bc:	330f      	adds	r3, #15
 80016be:	111b      	asrs	r3, r3, #4
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <BME280_ReadTemperature+0xd0>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	607b      	str	r3, [r7, #4]
  	var2 = (((var2 * var2) / 4096) * ((int32_t)CalibData.dig_T3)) / 16384;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	fb03 f303 	mul.w	r3, r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da01      	bge.n	80016d8 <BME280_ReadTemperature+0x74>
 80016d4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80016d8:	131b      	asrs	r3, r3, #12
 80016da:	461a      	mov	r2, r3
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <BME280_ReadTemperature+0xd0>)
 80016de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016e2:	fb03 f302 	mul.w	r3, r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da02      	bge.n	80016f0 <BME280_ReadTemperature+0x8c>
 80016ea:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80016ee:	333f      	adds	r3, #63	; 0x3f
 80016f0:	139b      	asrs	r3, r3, #14
 80016f2:	607b      	str	r3, [r7, #4]
    t_fine = var1 + var2;
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <BME280_ReadTemperature+0xd4>)
 80016fc:	6013      	str	r3, [r2, #0]
	int32_t T = (t_fine * 5 + 128) / 256;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <BME280_ReadTemperature+0xd4>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	3380      	adds	r3, #128	; 0x80
 800170a:	2b00      	cmp	r3, #0
 800170c:	da00      	bge.n	8001710 <BME280_ReadTemperature+0xac>
 800170e:	33ff      	adds	r3, #255	; 0xff
 8001710:	121b      	asrs	r3, r3, #8
 8001712:	603b      	str	r3, [r7, #0]

	return (float) T / 100;
 8001714:	6838      	ldr	r0, [r7, #0]
 8001716:	f7ff fac1 	bl	8000c9c <__aeabi_i2f>
 800171a:	4603      	mov	r3, r0
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <BME280_ReadTemperature+0xd8>)
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fbc4 	bl	8000eac <__aeabi_fdiv>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	7fc00000 	.word	0x7fc00000
 8001734:	2000043c 	.word	0x2000043c
 8001738:	2000059c 	.word	0x2000059c
 800173c:	42c80000 	.word	0x42c80000

08001740 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8001740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001744:	b09d      	sub	sp, #116	; 0x74
 8001746:	af00      	add	r7, sp, #0
	int64_t var1, var2, var3, var4;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001748:	f7ff ff8c 	bl	8001664 <BME280_ReadTemperature>
	int32_t adc_P = BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA);
 800174c:	20f7      	movs	r0, #247	; 0xf7
 800174e:	f7ff ff5f 	bl	8001610 <BME280_ReadReg_BE_U24>
 8001752:	4603      	mov	r3, r0
 8001754:	66fb      	str	r3, [r7, #108]	; 0x6c
	adc_P >>= 4;
 8001756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001758:	111b      	asrs	r3, r3, #4
 800175a:	66fb      	str	r3, [r7, #108]	; 0x6c
	var1 = ((int64_t)t_fine) - 128000;
 800175c:	4b77      	ldr	r3, [pc, #476]	; (800193c <BME280_ReadPressure+0x1fc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001766:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 800176a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 800176e:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	var2 = var1 * var1 * (int64_t)CalibData.dig_P6;
 8001772:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001776:	fb03 f102 	mul.w	r1, r3, r2
 800177a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800177c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800177e:	fb03 f302 	mul.w	r3, r3, r2
 8001782:	18ca      	adds	r2, r1, r3
 8001784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001786:	fba3 4503 	umull	r4, r5, r3, r3
 800178a:	1953      	adds	r3, r2, r5
 800178c:	461d      	mov	r5, r3
 800178e:	4b6c      	ldr	r3, [pc, #432]	; (8001940 <BME280_ReadPressure+0x200>)
 8001790:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001794:	b21a      	sxth	r2, r3
 8001796:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800179a:	fb02 f005 	mul.w	r0, r2, r5
 800179e:	fb04 f103 	mul.w	r1, r4, r3
 80017a2:	4401      	add	r1, r0
 80017a4:	fba4 2302 	umull	r2, r3, r4, r2
 80017a8:	4419      	add	r1, r3
 80017aa:	460b      	mov	r3, r1
 80017ac:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80017b0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var2 = var2 + ((var1 * (int64_t)CalibData.dig_P5) * 131072);
 80017b4:	4b62      	ldr	r3, [pc, #392]	; (8001940 <BME280_ReadPressure+0x200>)
 80017b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80017ba:	b21a      	sxth	r2, r3
 80017bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80017c2:	fb03 f001 	mul.w	r0, r3, r1
 80017c6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80017c8:	fb02 f101 	mul.w	r1, r2, r1
 80017cc:	4408      	add	r0, r1
 80017ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80017d0:	fba1 2302 	umull	r2, r3, r1, r2
 80017d4:	18c1      	adds	r1, r0, r3
 80017d6:	460b      	mov	r3, r1
 80017d8:	f04f 0000 	mov.w	r0, #0
 80017dc:	f04f 0100 	mov.w	r1, #0
 80017e0:	0459      	lsls	r1, r3, #17
 80017e2:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80017e6:	0450      	lsls	r0, r2, #17
 80017e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017ec:	eb12 0800 	adds.w	r8, r2, r0
 80017f0:	eb43 0901 	adc.w	r9, r3, r1
 80017f4:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	var2 = var2 + (((int64_t)CalibData.dig_P4) * 34359738368);
 80017f8:	4b51      	ldr	r3, [pc, #324]	; (8001940 <BME280_ReadPressure+0x200>)
 80017fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017fe:	b21a      	sxth	r2, r3
 8001800:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	00d1      	lsls	r1, r2, #3
 800180e:	2000      	movs	r0, #0
 8001810:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001814:	1814      	adds	r4, r2, r0
 8001816:	61bc      	str	r4, [r7, #24]
 8001818:	414b      	adcs	r3, r1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001820:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	var1 = ((var1 * var1 * (int64_t)CalibData.dig_P3) / 256) + ((var1 * ((int64_t)CalibData.dig_P2) * 4096));
 8001824:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001828:	fb03 f102 	mul.w	r1, r3, r2
 800182c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800182e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001830:	fb03 f302 	mul.w	r3, r3, r2
 8001834:	18ca      	adds	r2, r1, r3
 8001836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001838:	fba3 4503 	umull	r4, r5, r3, r3
 800183c:	1953      	adds	r3, r2, r5
 800183e:	461d      	mov	r5, r3
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <BME280_ReadPressure+0x200>)
 8001842:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001846:	b21a      	sxth	r2, r3
 8001848:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800184c:	fb02 f005 	mul.w	r0, r2, r5
 8001850:	fb04 f103 	mul.w	r1, r4, r3
 8001854:	4401      	add	r1, r0
 8001856:	fba4 2302 	umull	r2, r3, r4, r2
 800185a:	4419      	add	r1, r3
 800185c:	460b      	mov	r3, r1
 800185e:	2a00      	cmp	r2, #0
 8001860:	f173 0100 	sbcs.w	r1, r3, #0
 8001864:	da02      	bge.n	800186c <BME280_ReadPressure+0x12c>
 8001866:	32ff      	adds	r2, #255	; 0xff
 8001868:	f143 0300 	adc.w	r3, r3, #0
 800186c:	f04f 0000 	mov.w	r0, #0
 8001870:	f04f 0100 	mov.w	r1, #0
 8001874:	0a10      	lsrs	r0, r2, #8
 8001876:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800187a:	1219      	asrs	r1, r3, #8
 800187c:	4680      	mov	r8, r0
 800187e:	4689      	mov	r9, r1
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <BME280_ReadPressure+0x200>)
 8001882:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001886:	b21a      	sxth	r2, r3
 8001888:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800188c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800188e:	fb03 f001 	mul.w	r0, r3, r1
 8001892:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001894:	fb02 f101 	mul.w	r1, r2, r1
 8001898:	1844      	adds	r4, r0, r1
 800189a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800189c:	fba1 0102 	umull	r0, r1, r1, r2
 80018a0:	1863      	adds	r3, r4, r1
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	030b      	lsls	r3, r1, #12
 80018ae:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80018b2:	0302      	lsls	r2, r0, #12
 80018b4:	eb18 0102 	adds.w	r1, r8, r2
 80018b8:	6139      	str	r1, [r7, #16]
 80018ba:	eb49 0303 	adc.w	r3, r9, r3
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018c4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var3 = ((int64_t)1) * 140737488355328;
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	var1 = (var3 + var1) * ((int64_t)CalibData.dig_P1) / 8589934592;
 80018d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018dc:	1884      	adds	r4, r0, r2
 80018de:	63bc      	str	r4, [r7, #56]	; 0x38
 80018e0:	eb41 0303 	adc.w	r3, r1, r3
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <BME280_ReadPressure+0x200>)
 80018e8:	88db      	ldrh	r3, [r3, #6]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80018f4:	4629      	mov	r1, r5
 80018f6:	fb02 f001 	mul.w	r0, r2, r1
 80018fa:	4621      	mov	r1, r4
 80018fc:	fb01 f103 	mul.w	r1, r1, r3
 8001900:	4401      	add	r1, r0
 8001902:	4620      	mov	r0, r4
 8001904:	fba0 2302 	umull	r2, r3, r0, r2
 8001908:	4419      	add	r1, r3
 800190a:	460b      	mov	r3, r1
 800190c:	2a00      	cmp	r2, #0
 800190e:	f173 0100 	sbcs.w	r1, r3, #0
 8001912:	da03      	bge.n	800191c <BME280_ReadPressure+0x1dc>
 8001914:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8001918:	f143 0301 	adc.w	r3, r3, #1
 800191c:	f04f 0000 	mov.w	r0, #0
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	1058      	asrs	r0, r3, #1
 8001926:	17d9      	asrs	r1, r3, #31
 8001928:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	if (var1 == 0) {
 800192c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001930:	4313      	orrs	r3, r2
 8001932:	d107      	bne.n	8001944 <BME280_ReadPressure+0x204>
		return 0; // avoid exception caused by division by zero
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e12c      	b.n	8001b94 <BME280_ReadPressure+0x454>
 800193a:	bf00      	nop
 800193c:	2000059c 	.word	0x2000059c
 8001940:	2000043c 	.word	0x2000043c
	}
	var4 = 1048576 - adc_P;
 8001944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001946:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800194a:	461a      	mov	r2, r3
 800194c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001950:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001958:	f04f 0000 	mov.w	r0, #0
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	07d9      	lsls	r1, r3, #31
 8001962:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001966:	07d0      	lsls	r0, r2, #31
 8001968:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800196c:	ebb0 0a02 	subs.w	sl, r0, r2
 8001970:	eb61 0b03 	sbc.w	fp, r1, r3
 8001974:	4652      	mov	r2, sl
 8001976:	465b      	mov	r3, fp
 8001978:	1891      	adds	r1, r2, r2
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	415b      	adcs	r3, r3
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001984:	eb12 020a 	adds.w	r2, r2, sl
 8001988:	eb43 030b 	adc.w	r3, r3, fp
 800198c:	f04f 0000 	mov.w	r0, #0
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	0199      	lsls	r1, r3, #6
 8001996:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800199a:	0190      	lsls	r0, r2, #6
 800199c:	1812      	adds	r2, r2, r0
 800199e:	eb41 0303 	adc.w	r3, r1, r3
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019b0:	0090      	lsls	r0, r2, #2
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	eb12 020a 	adds.w	r2, r2, sl
 80019ba:	eb43 030b 	adc.w	r3, r3, fp
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0099      	lsls	r1, r3, #2
 80019c8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019cc:	0090      	lsls	r0, r2, #2
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	eb12 010a 	adds.w	r1, r2, sl
 80019d6:	6339      	str	r1, [r7, #48]	; 0x30
 80019d8:	eb43 030b 	adc.w	r3, r3, fp
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
 80019de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80019e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019e6:	f7ff fb73 	bl	80010d0 <__aeabi_ldivmod>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	var1 = (((int64_t)CalibData.dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 80019f2:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <BME280_ReadPressure+0x460>)
 80019f4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80019f8:	b21c      	sxth	r4, r3
 80019fa:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80019fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a02:	2a00      	cmp	r2, #0
 8001a04:	f173 0100 	sbcs.w	r1, r3, #0
 8001a08:	da06      	bge.n	8001a18 <BME280_ReadPressure+0x2d8>
 8001a0a:	f641 70ff 	movw	r0, #8191	; 0x1fff
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	1812      	adds	r2, r2, r0
 8001a14:	eb41 0303 	adc.w	r3, r1, r3
 8001a18:	f04f 0000 	mov.w	r0, #0
 8001a1c:	f04f 0100 	mov.w	r1, #0
 8001a20:	0b50      	lsrs	r0, r2, #13
 8001a22:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a26:	1359      	asrs	r1, r3, #13
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	fb02 f005 	mul.w	r0, r2, r5
 8001a30:	fb04 f103 	mul.w	r1, r4, r3
 8001a34:	1846      	adds	r6, r0, r1
 8001a36:	fba4 0102 	umull	r0, r1, r4, r2
 8001a3a:	1873      	adds	r3, r6, r1
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	f173 0400 	sbcs.w	r4, r3, #0
 8001a48:	da06      	bge.n	8001a58 <BME280_ReadPressure+0x318>
 8001a4a:	f641 74ff 	movw	r4, #8191	; 0x1fff
 8001a4e:	f04f 0500 	mov.w	r5, #0
 8001a52:	1912      	adds	r2, r2, r4
 8001a54:	eb45 0303 	adc.w	r3, r5, r3
 8001a58:	f04f 0400 	mov.w	r4, #0
 8001a5c:	f04f 0500 	mov.w	r5, #0
 8001a60:	0b54      	lsrs	r4, r2, #13
 8001a62:	ea44 44c3 	orr.w	r4, r4, r3, lsl #19
 8001a66:	135d      	asrs	r5, r3, #13
 8001a68:	4622      	mov	r2, r4
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	fb02 f501 	mul.w	r5, r2, r1
 8001a70:	fb00 f403 	mul.w	r4, r0, r3
 8001a74:	442c      	add	r4, r5
 8001a76:	fba0 2302 	umull	r2, r3, r0, r2
 8001a7a:	18e1      	adds	r1, r4, r3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	2a00      	cmp	r2, #0
 8001a80:	f173 0100 	sbcs.w	r1, r3, #0
 8001a84:	da06      	bge.n	8001a94 <BME280_ReadPressure+0x354>
 8001a86:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	1812      	adds	r2, r2, r0
 8001a90:	eb41 0303 	adc.w	r3, r1, r3
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	0e50      	lsrs	r0, r2, #25
 8001a9e:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001aa2:	1659      	asrs	r1, r3, #25
 8001aa4:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
	var2 = (((int64_t)CalibData.dig_P8) * var4) / 524288;
 8001aa8:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <BME280_ReadPressure+0x460>)
 8001aaa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ab4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ab6:	fb03 f001 	mul.w	r0, r3, r1
 8001aba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001abc:	fb02 f101 	mul.w	r1, r2, r1
 8001ac0:	4401      	add	r1, r0
 8001ac2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ac4:	fba0 2302 	umull	r2, r3, r0, r2
 8001ac8:	4419      	add	r1, r3
 8001aca:	460b      	mov	r3, r1
 8001acc:	2a00      	cmp	r2, #0
 8001ace:	f173 0100 	sbcs.w	r1, r3, #0
 8001ad2:	da05      	bge.n	8001ae0 <BME280_ReadPressure+0x3a0>
 8001ad4:	4833      	ldr	r0, [pc, #204]	; (8001ba4 <BME280_ReadPressure+0x464>)
 8001ad6:	f04f 0100 	mov.w	r1, #0
 8001ada:	1812      	adds	r2, r2, r0
 8001adc:	eb41 0303 	adc.w	r3, r1, r3
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	0cd0      	lsrs	r0, r2, #19
 8001aea:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001aee:	14d9      	asrs	r1, r3, #19
 8001af0:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
	var4 = ((var4 + var1 + var2) / 256) + (((int64_t)CalibData.dig_P7) * 16);
 8001af4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001af8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001afc:	1884      	adds	r4, r0, r2
 8001afe:	62bc      	str	r4, [r7, #40]	; 0x28
 8001b00:	eb41 0303 	adc.w	r3, r1, r3
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b0a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001b0e:	4621      	mov	r1, r4
 8001b10:	1889      	adds	r1, r1, r2
 8001b12:	6239      	str	r1, [r7, #32]
 8001b14:	4629      	mov	r1, r5
 8001b16:	eb43 0101 	adc.w	r1, r3, r1
 8001b1a:	6279      	str	r1, [r7, #36]	; 0x24
 8001b1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b20:	2a00      	cmp	r2, #0
 8001b22:	f173 0100 	sbcs.w	r1, r3, #0
 8001b26:	da02      	bge.n	8001b2e <BME280_ReadPressure+0x3ee>
 8001b28:	32ff      	adds	r2, #255	; 0xff
 8001b2a:	f143 0300 	adc.w	r3, r3, #0
 8001b2e:	f04f 0000 	mov.w	r0, #0
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	0a10      	lsrs	r0, r2, #8
 8001b38:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b3c:	1219      	asrs	r1, r3, #8
 8001b3e:	4604      	mov	r4, r0
 8001b40:	460d      	mov	r5, r1
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <BME280_ReadPressure+0x460>)
 8001b44:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b48:	b218      	sxth	r0, r3
 8001b4a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	010b      	lsls	r3, r1, #4
 8001b58:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001b5c:	0102      	lsls	r2, r0, #4
 8001b5e:	18a1      	adds	r1, r4, r2
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	eb45 0303 	adc.w	r3, r5, r3
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b6c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	float P = var4 / 256.0;
 8001b70:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b74:	f7fe fc82 	bl	800047c <__aeabi_l2d>
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <BME280_ReadPressure+0x468>)
 8001b7e:	f7fe fdd5 	bl	800072c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7fe ff7d 	bl	8000a88 <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44
  return P;
 8001b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3774      	adds	r7, #116	; 0x74
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000043c 	.word	0x2000043c
 8001ba4:	0007ffff 	.word	0x0007ffff
 8001ba8:	40700000 	.word	0x40700000

08001bac <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
  int32_t var1, var2, var3, var4, var5;
	BME280_ReadTemperature(); 	// must be done first to get t_fine
 8001bb2:	f7ff fd57 	bl	8001664 <BME280_ReadTemperature>
	int32_t adc_H = BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA);
 8001bb6:	20fd      	movs	r0, #253	; 0xfd
 8001bb8:	f7ff fcfe 	bl	80015b8 <BME280_ReadReg_BE_S16>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	61fb      	str	r3, [r7, #28]
	if (adc_H == 0x8000) {  	// value in case humidity measurement was disabled
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc6:	d101      	bne.n	8001bcc <BME280_ReadHumidity+0x20>
		return NAN;
 8001bc8:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <BME280_ReadHumidity+0x168>)
 8001bca:	e09f      	b.n	8001d0c <BME280_ReadHumidity+0x160>
	}
	var1 = t_fine - ((int32_t)76800);
 8001bcc:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <BME280_ReadHumidity+0x16c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001bd4:	61bb      	str	r3, [r7, #24]
	var2 = (int32_t)(adc_H * 16384);
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	039b      	lsls	r3, r3, #14
 8001bda:	617b      	str	r3, [r7, #20]
	var3 = (int32_t)(((int32_t)CalibData.dig_H4) * 1048576);
 8001bdc:	4b4f      	ldr	r3, [pc, #316]	; (8001d1c <BME280_ReadHumidity+0x170>)
 8001bde:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001be2:	051b      	lsls	r3, r3, #20
 8001be4:	613b      	str	r3, [r7, #16]
	var4 = ((int32_t)CalibData.dig_H5) * var1;
 8001be6:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <BME280_ReadHumidity+0x170>)
 8001be8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001bec:	461a      	mov	r2, r3
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	60fb      	str	r3, [r7, #12]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad2      	subs	r2, r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da02      	bge.n	8001c0e <BME280_ReadHumidity+0x62>
 8001c08:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001c0c:	337f      	adds	r3, #127	; 0x7f
 8001c0e:	13db      	asrs	r3, r3, #15
 8001c10:	60bb      	str	r3, [r7, #8]
	var2 = (var1 * ((int32_t)CalibData.dig_H6)) / 1024;
 8001c12:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <BME280_ReadHumidity+0x170>)
 8001c14:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001c18:	461a      	mov	r2, r3
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	fb03 f302 	mul.w	r3, r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da01      	bge.n	8001c28 <BME280_ReadHumidity+0x7c>
 8001c24:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001c28:	129b      	asrs	r3, r3, #10
 8001c2a:	617b      	str	r3, [r7, #20]
	var3 = (var1 * ((int32_t)CalibData.dig_H3)) / 2048;
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <BME280_ReadHumidity+0x170>)
 8001c2e:	7f1b      	ldrb	r3, [r3, #28]
 8001c30:	461a      	mov	r2, r3
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	fb03 f302 	mul.w	r3, r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da01      	bge.n	8001c40 <BME280_ReadHumidity+0x94>
 8001c3c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001c40:	12db      	asrs	r3, r3, #11
 8001c42:	613b      	str	r3, [r7, #16]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	da01      	bge.n	8001c58 <BME280_ReadHumidity+0xac>
 8001c54:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001c58:	129b      	asrs	r3, r3, #10
 8001c5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001c5e:	60fb      	str	r3, [r7, #12]
	var2 = ((var4 * ((int32_t)CalibData.dig_H2)) + 8192) / 16384;
 8001c60:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <BME280_ReadHumidity+0x170>)
 8001c62:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	fb03 f302 	mul.w	r3, r3, r2
 8001c6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da02      	bge.n	8001c7c <BME280_ReadHumidity+0xd0>
 8001c76:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001c7a:	333f      	adds	r3, #63	; 0x3f
 8001c7c:	139b      	asrs	r3, r3, #14
 8001c7e:	617b      	str	r3, [r7, #20]
	var3 = var5 * var2;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	613b      	str	r3, [r7, #16]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da02      	bge.n	8001c96 <BME280_ReadHumidity+0xea>
 8001c90:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001c94:	337f      	adds	r3, #127	; 0x7f
 8001c96:	13db      	asrs	r3, r3, #15
 8001c98:	461a      	mov	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da02      	bge.n	8001ca6 <BME280_ReadHumidity+0xfa>
 8001ca0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001ca4:	337f      	adds	r3, #127	; 0x7f
 8001ca6:	13db      	asrs	r3, r3, #15
 8001ca8:	fb03 f302 	mul.w	r3, r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	da00      	bge.n	8001cb2 <BME280_ReadHumidity+0x106>
 8001cb0:	337f      	adds	r3, #127	; 0x7f
 8001cb2:	11db      	asrs	r3, r3, #7
 8001cb4:	60fb      	str	r3, [r7, #12]
	var5 = var3 - ((var4 * ((int32_t)CalibData.dig_H1)) / 16);
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <BME280_ReadHumidity+0x170>)
 8001cb8:	7e1b      	ldrb	r3, [r3, #24]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	fb03 f302 	mul.w	r3, r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da00      	bge.n	8001cc8 <BME280_ReadHumidity+0x11c>
 8001cc6:	330f      	adds	r3, #15
 8001cc8:	111b      	asrs	r3, r3, #4
 8001cca:	425b      	negs	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
	var5 = (var5 < 0 ? 0 : var5);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cda:	60bb      	str	r3, [r7, #8]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ce2:	bfa8      	it	ge
 8001ce4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001ce8:	60bb      	str	r3, [r7, #8]
	uint32_t H = (uint32_t)(var5 / 4096);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da01      	bge.n	8001cf4 <BME280_ReadHumidity+0x148>
 8001cf0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001cf4:	131b      	asrs	r3, r3, #12
 8001cf6:	607b      	str	r3, [r7, #4]
  return (float)H / 1024.0;
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7fe ffcb 	bl	8000c94 <__aeabi_ui2f>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff f8d1 	bl	8000eac <__aeabi_fdiv>
 8001d0a:	4603      	mov	r3, r0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	7fc00000 	.word	0x7fc00000
 8001d18:	2000059c 	.word	0x2000059c
 8001d1c:	2000043c 	.word	0x2000043c

08001d20 <BME280_Init>:

//------------------------------------------------
void BME280_Init(void)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
  uint8_t value=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	71fb      	strb	r3, [r7, #7]
	value = BME280_ReadReg(BME280_REG_ID);
 8001d2a:	20d0      	movs	r0, #208	; 0xd0
 8001d2c:	f7ff fc12 	bl	8001554 <BME280_ReadReg>
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
	if(value != BME280_ID)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	2b60      	cmp	r3, #96	; 0x60
 8001d38:	d002      	beq.n	8001d40 <BME280_Init+0x20>
	{
		Error();
 8001d3a:	f7ff fb7d 	bl	8001438 <Error>
		return;
 8001d3e:	e0e3      	b.n	8001f08 <BME280_Init+0x1e8>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8001d40:	21b6      	movs	r1, #182	; 0xb6
 8001d42:	20e0      	movs	r0, #224	; 0xe0
 8001d44:	f7ff fbf4 	bl	8001530 <BME280_WriteReg>
	while ((BME280_ReadReg(BME280_REGISTER_STATUS) & 0x09) & BME280_STATUS_IM_UPDATE) {} ;
 8001d48:	bf00      	nop
 8001d4a:	20f3      	movs	r0, #243	; 0xf3
 8001d4c:	f7ff fc02 	bl	8001554 <BME280_ReadReg>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f7      	bne.n	8001d4a <BME280_Init+0x2a>
	BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001d5a:	496d      	ldr	r1, [pc, #436]	; (8001f10 <BME280_Init+0x1f0>)
 8001d5c:	2088      	movs	r0, #136	; 0x88
 8001d5e:	f7ff fc0a 	bl	8001576 <BME280_ReadReg_U16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8001d62:	496c      	ldr	r1, [pc, #432]	; (8001f14 <BME280_Init+0x1f4>)
 8001d64:	208a      	movs	r0, #138	; 0x8a
 8001d66:	f7ff fc16 	bl	8001596 <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8001d6a:	496b      	ldr	r1, [pc, #428]	; (8001f18 <BME280_Init+0x1f8>)
 8001d6c:	208c      	movs	r0, #140	; 0x8c
 8001d6e:	f7ff fc12 	bl	8001596 <BME280_ReadReg_S16>
	BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8001d72:	496a      	ldr	r1, [pc, #424]	; (8001f1c <BME280_Init+0x1fc>)
 8001d74:	208e      	movs	r0, #142	; 0x8e
 8001d76:	f7ff fbfe 	bl	8001576 <BME280_ReadReg_U16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8001d7a:	4969      	ldr	r1, [pc, #420]	; (8001f20 <BME280_Init+0x200>)
 8001d7c:	2090      	movs	r0, #144	; 0x90
 8001d7e:	f7ff fc0a 	bl	8001596 <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8001d82:	4968      	ldr	r1, [pc, #416]	; (8001f24 <BME280_Init+0x204>)
 8001d84:	2092      	movs	r0, #146	; 0x92
 8001d86:	f7ff fc06 	bl	8001596 <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8001d8a:	4967      	ldr	r1, [pc, #412]	; (8001f28 <BME280_Init+0x208>)
 8001d8c:	2094      	movs	r0, #148	; 0x94
 8001d8e:	f7ff fc02 	bl	8001596 <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8001d92:	4966      	ldr	r1, [pc, #408]	; (8001f2c <BME280_Init+0x20c>)
 8001d94:	2096      	movs	r0, #150	; 0x96
 8001d96:	f7ff fbfe 	bl	8001596 <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8001d9a:	4965      	ldr	r1, [pc, #404]	; (8001f30 <BME280_Init+0x210>)
 8001d9c:	2098      	movs	r0, #152	; 0x98
 8001d9e:	f7ff fbfa 	bl	8001596 <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8001da2:	4964      	ldr	r1, [pc, #400]	; (8001f34 <BME280_Init+0x214>)
 8001da4:	209a      	movs	r0, #154	; 0x9a
 8001da6:	f7ff fbf6 	bl	8001596 <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8001daa:	4963      	ldr	r1, [pc, #396]	; (8001f38 <BME280_Init+0x218>)
 8001dac:	209c      	movs	r0, #156	; 0x9c
 8001dae:	f7ff fbf2 	bl	8001596 <BME280_ReadReg_S16>
	BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8001db2:	4962      	ldr	r1, [pc, #392]	; (8001f3c <BME280_Init+0x21c>)
 8001db4:	209e      	movs	r0, #158	; 0x9e
 8001db6:	f7ff fbee 	bl	8001596 <BME280_ReadReg_S16>
	CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8001dba:	20a1      	movs	r0, #161	; 0xa1
 8001dbc:	f7ff fbca 	bl	8001554 <BME280_ReadReg>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b52      	ldr	r3, [pc, #328]	; (8001f10 <BME280_Init+0x1f0>)
 8001dc6:	761a      	strb	r2, [r3, #24]
	BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001dc8:	495d      	ldr	r1, [pc, #372]	; (8001f40 <BME280_Init+0x220>)
 8001dca:	20e1      	movs	r0, #225	; 0xe1
 8001dcc:	f7ff fbe3 	bl	8001596 <BME280_ReadReg_S16>
	CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8001dd0:	20e3      	movs	r0, #227	; 0xe3
 8001dd2:	f7ff fbbf 	bl	8001554 <BME280_ReadReg>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <BME280_Init+0x1f0>)
 8001ddc:	771a      	strb	r2, [r3, #28]
	CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 8001dde:	20e4      	movs	r0, #228	; 0xe4
 8001de0:	f7ff fbb8 	bl	8001554 <BME280_ReadReg>
 8001de4:	4603      	mov	r3, r0
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	b21c      	sxth	r4, r3
 8001dea:	20e5      	movs	r0, #229	; 0xe5
 8001dec:	f7ff fbb2 	bl	8001554 <BME280_ReadReg>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	b21a      	sxth	r2, r3
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <BME280_Init+0x1f0>)
 8001e00:	83da      	strh	r2, [r3, #30]
	CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5 + 1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8001e02:	20e6      	movs	r0, #230	; 0xe6
 8001e04:	f7ff fba6 	bl	8001554 <BME280_ReadReg>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	b21c      	sxth	r4, r3
 8001e0e:	20e5      	movs	r0, #229	; 0xe5
 8001e10:	f7ff fba0 	bl	8001554 <BME280_ReadReg>
 8001e14:	4603      	mov	r3, r0
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	4323      	orrs	r3, r4
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <BME280_Init+0x1f0>)
 8001e22:	841a      	strh	r2, [r3, #32]
	CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001e24:	20e7      	movs	r0, #231	; 0xe7
 8001e26:	f7ff fb95 	bl	8001554 <BME280_ReadReg>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b25a      	sxtb	r2, r3
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <BME280_Init+0x1f0>)
 8001e30:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	uint8_t reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001e34:	20f5      	movs	r0, #245	; 0xf5
 8001e36:	f7ff fb8d 	bl	8001554 <BME280_ReadReg>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_STBY_1000 & BME280_STBY_MSK;
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001e48:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CONFIG, reg);
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	20f5      	movs	r0, #245	; 0xf5
 8001e50:	f7ff fb6e 	bl	8001530 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001e54:	20f5      	movs	r0, #245	; 0xf5
 8001e56:	f7ff fb7d 	bl	8001554 <BME280_ReadReg>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f023 031c 	bic.w	r3, r3, #28
 8001e60:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_FILTER_4 & BME280_FILTER_MSK;
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CONFIG, reg);
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	20f5      	movs	r0, #245	; 0xf5
 8001e70:	f7ff fb5e 	bl	8001530 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001e74:	20f4      	movs	r0, #244	; 0xf4
 8001e76:	f7ff fb6d 	bl	8001554 <BME280_ReadReg>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_OSRS_T_x4 & BME280_OSRS_T_MSK;
 8001e82:	79bb      	ldrb	r3, [r7, #6]
 8001e84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e88:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	20f4      	movs	r0, #244	; 0xf4
 8001e90:	f7ff fb4e 	bl	8001530 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8001e94:	20f4      	movs	r0, #244	; 0xf4
 8001e96:	f7ff fb5d 	bl	8001554 <BME280_ReadReg>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f023 031c 	bic.w	r3, r3, #28
 8001ea0:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_OSRS_P_x4 & BME280_OSRS_P_MSK;
 8001ea2:	79bb      	ldrb	r3, [r7, #6]
 8001ea4:	f043 030c 	orr.w	r3, r3, #12
 8001ea8:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS, reg);
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	4619      	mov	r1, r3
 8001eae:	20f4      	movs	r0, #244	; 0xf4
 8001eb0:	f7ff fb3e 	bl	8001530 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8001eb4:	20f2      	movs	r0, #242	; 0xf2
 8001eb6:	f7ff fb4d 	bl	8001554 <BME280_ReadReg>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f023 0307 	bic.w	r3, r3, #7
 8001ec0:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_OSRS_H_x4 & BME280_OSRS_H_MSK;
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	f043 0303 	orr.w	r3, r3, #3
 8001ec8:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	20f2      	movs	r0, #242	; 0xf2
 8001ed0:	f7ff fb2e 	bl	8001530 <BME280_WriteReg>
	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001ed4:	20f4      	movs	r0, #244	; 0xf4
 8001ed6:	f7ff fb3d 	bl	8001554 <BME280_ReadReg>
 8001eda:	4603      	mov	r3, r0
 8001edc:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	20f4      	movs	r0, #244	; 0xf4
 8001ee4:	f7ff fb24 	bl	8001530 <BME280_WriteReg>

	reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8001ee8:	20f4      	movs	r0, #244	; 0xf4
 8001eea:	f7ff fb33 	bl	8001554 <BME280_ReadReg>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f023 0303 	bic.w	r3, r3, #3
 8001ef4:	71bb      	strb	r3, [r7, #6]
	reg |= BME280_MODE_NORMAL & BME280_MODE_MSK;
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	f043 0303 	orr.w	r3, r3, #3
 8001efc:	71bb      	strb	r3, [r7, #6]
	BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	4619      	mov	r1, r3
 8001f02:	20f4      	movs	r0, #244	; 0xf4
 8001f04:	f7ff fb14 	bl	8001530 <BME280_WriteReg>
}
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000043c 	.word	0x2000043c
 8001f14:	2000043e 	.word	0x2000043e
 8001f18:	20000440 	.word	0x20000440
 8001f1c:	20000442 	.word	0x20000442
 8001f20:	20000444 	.word	0x20000444
 8001f24:	20000446 	.word	0x20000446
 8001f28:	20000448 	.word	0x20000448
 8001f2c:	2000044a 	.word	0x2000044a
 8001f30:	2000044c 	.word	0x2000044c
 8001f34:	2000044e 	.word	0x2000044e
 8001f38:	20000450 	.word	0x20000450
 8001f3c:	20000452 	.word	0x20000452
 8001f40:	20000456 	.word	0x20000456

08001f44 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <DHCP_time_handler+0x18>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <DHCP_time_handler+0x18>)
 8001f50:	6013      	str	r3, [r2, #0]
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000200 	.word	0x20000200

08001f60 <enablePeriodMeasure>:
	  HAL_Delay(50);
  }
}

void enablePeriodMeasure(uint16_t mode)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  SCDwriteData(mode, NULL, 0);
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 f84d 	bl	8002010 <SCDwriteData>

  if(SCD4X_STOP_PERIODIC_MEASURE == mode)
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f643 7286 	movw	r2, #16262	; 0x3f86
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d103      	bne.n	8001f88 <enablePeriodMeasure+0x28>
	  HAL_Delay(500);   // Give it some time to switch mode
 8001f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f84:	f001 fb7e 	bl	8003684 <HAL_Delay>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <getSerialNumber>:
}

/*************************** get serial number *****************************/

bool getSerialNumber(uint16_t * wordBuf)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  bool ret = true;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	75fb      	strb	r3, [r7, #23]
  uint8_t buf[9] = {0};
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	711a      	strb	r2, [r3, #4]
  if(sizeof(buf) != SCDreadData(SCD4X_GET_SERIAL_NUMBER, buf, sizeof(buf))) {
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	2209      	movs	r2, #9
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f243 6082 	movw	r0, #13954	; 0x3682
 8001fb6:	f000 f853 	bl	8002060 <SCDreadData>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d001      	beq.n	8001fc4 <getSerialNumber+0x34>
    ret = false;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75fb      	strb	r3, [r7, #23]
  }
  wordBuf[0] = SCD4X_CONCAT_BYTES(buf[0], buf[1]);
 8001fc4:	7b3b      	ldrb	r3, [r7, #12]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	7b7b      	ldrb	r3, [r7, #13]
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	801a      	strh	r2, [r3, #0]
  wordBuf[1] = SCD4X_CONCAT_BYTES(buf[3], buf[4]);
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	7c3b      	ldrb	r3, [r7, #16]
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3302      	adds	r3, #2
 8001fea:	b292      	uxth	r2, r2
 8001fec:	801a      	strh	r2, [r3, #0]
  wordBuf[2] = SCD4X_CONCAT_BYTES(buf[6], buf[7]);
 8001fee:	7cbb      	ldrb	r3, [r7, #18]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3304      	adds	r3, #4
 8002000:	b292      	uxth	r2, r2
 8002002:	801a      	strh	r2, [r3, #0]
  //DBG(wordBuf[0], HEX);
  //DBG(wordBuf[1], HEX);
  //DBG(wordBuf[2], HEX);
  return ret;
 8002004:	7dfb      	ldrb	r3, [r7, #23]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <SCDwriteData>:
}

/****************************** Read/Write Command Function ********************************/

void SCDwriteData(uint16_t cmd, uint8_t *pBuf, size_t size)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af02      	add	r7, sp, #8
 8002016:	4603      	mov	r3, r0
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	81fb      	strh	r3, [r7, #14]
  uint8_t cmdBuf[2];
  cmdBuf[0] = (cmd >> 8) & 0xFF;
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b29b      	uxth	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	753b      	strb	r3, [r7, #20]
  cmdBuf[1] = cmd & 0xFF;
 8002028:	89fb      	ldrh	r3, [r7, #14]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	757b      	strb	r3, [r7, #21]

  //HAL_I2C_Mem_Write(&SCD41_I2C_PORT, SCD4X_I2C_ADDR, MemAddress, MemAddSize, pData, Size, 100)
  HAL_I2C_Master_Transmit(&SCD4X_I2C_PORT, SCD4X_I2C_ADDR, cmdBuf, 2, 100);
 800202e:	f107 0214 	add.w	r2, r7, #20
 8002032:	2364      	movs	r3, #100	; 0x64
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2302      	movs	r3, #2
 8002038:	2162      	movs	r1, #98	; 0x62
 800203a:	4808      	ldr	r0, [pc, #32]	; (800205c <SCDwriteData+0x4c>)
 800203c:	f002 fd8a 	bl	8004b54 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&SCD4X_I2C_PORT, SCD4X_I2C_ADDR, pBuf, size, 100);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	b29b      	uxth	r3, r3
 8002044:	2264      	movs	r2, #100	; 0x64
 8002046:	9200      	str	r2, [sp, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	2162      	movs	r1, #98	; 0x62
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <SCDwriteData+0x4c>)
 800204e:	f002 fd81 	bl	8004b54 <HAL_I2C_Master_Transmit>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000640 	.word	0x20000640

08002060 <SCDreadData>:

size_t SCDreadData(uint16_t cmd, uint8_t *pBuf, size_t size)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	4603      	mov	r3, r0
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	81fb      	strh	r3, [r7, #14]
  size_t count = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  if(NULL == pBuf) {
    //DBG("pBuf ERROR!! : null pointer");
  }
  //uint8_t * _pBuf = (uint8_t*)pBuf;
  uint8_t cmdBuf[2];
  cmdBuf[0] = (cmd >> 8) & 0xFF;
 8002072:	89fb      	ldrh	r3, [r7, #14]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	b29b      	uxth	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	743b      	strb	r3, [r7, #16]
  cmdBuf[1] = cmd & 0xFF;
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	747b      	strb	r3, [r7, #17]
  HAL_I2C_Master_Transmit(&SCD4X_I2C_PORT, SCD4X_I2C_ADDR, cmdBuf, 2, 100);
 8002082:	f107 0210 	add.w	r2, r7, #16
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2302      	movs	r3, #2
 800208c:	2162      	movs	r1, #98	; 0x62
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <SCDreadData+0x50>)
 8002090:	f002 fd60 	bl	8004b54 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&SCD4X_I2C_PORT, SCD4X_I2C_ADDR, pBuf, size, 100);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	b29b      	uxth	r3, r3
 8002098:	2264      	movs	r2, #100	; 0x64
 800209a:	9200      	str	r2, [sp, #0]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	2162      	movs	r1, #98	; 0x62
 80020a0:	4803      	ldr	r0, [pc, #12]	; (80020b0 <SCDreadData+0x50>)
 80020a2:	f002 fe55 	bl	8004d50 <HAL_I2C_Master_Receive>

  return count;
 80020a6:	697b      	ldr	r3, [r7, #20]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000640 	.word	0x20000640
 80020b4:	00000000 	.word	0x00000000

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020be:	f001 fa7f 	bl	80035c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c2:	f000 f97f 	bl	80023c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c6:	f000 fc45 	bl	8002954 <MX_GPIO_Init>
  MX_DMA_Init();
 80020ca:	f000 fc25 	bl	8002918 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80020ce:	f000 fbcf 	bl	8002870 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80020d2:	f000 fa11 	bl	80024f8 <MX_I2C1_Init>
  MX_SPI2_Init();
 80020d6:	f000 faa1 	bl	800261c <MX_SPI2_Init>
  MX_IWDG_Init();
 80020da:	f000 fa69 	bl	80025b0 <MX_IWDG_Init>
  MX_I2C2_Init();
 80020de:	f000 fa39 	bl	8002554 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80020e2:	f000 fbef 	bl	80028c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80020e6:	f000 f9c9 	bl	800247c <MX_ADC1_Init>
  MX_TIM1_Init();
 80020ea:	f000 facd 	bl	8002688 <MX_TIM1_Init>
  MX_RTC_Init();
 80020ee:	f000 fa79 	bl	80025e4 <MX_RTC_Init>
  MX_TIM4_Init();
 80020f2:	f000 fb67 	bl	80027c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  uint16_t serialBufer[3];
  serialBufer[0] = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	803b      	strh	r3, [r7, #0]
  serialBufer[1] = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	807b      	strh	r3, [r7, #2]
  serialBufer[2] = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	80bb      	strh	r3, [r7, #4]
  HAL_Delay(5000);
 8002102:	f241 3088 	movw	r0, #5000	; 0x1388
 8002106:	f001 fabd 	bl	8003684 <HAL_Delay>
  enablePeriodMeasure(SCD4X_STOP_PERIODIC_MEASURE);
 800210a:	f643 7086 	movw	r0, #16262	; 0x3f86
 800210e:	f7ff ff27 	bl	8001f60 <enablePeriodMeasure>
  HAL_Delay(5000);
 8002112:	f241 3088 	movw	r0, #5000	; 0x1388
 8002116:	f001 fab5 	bl	8003684 <HAL_Delay>
  if (getSerialNumber(serialBufer)) {
 800211a:	463b      	mov	r3, r7
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff37 	bl	8001f90 <getSerialNumber>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002128:	488b      	ldr	r0, [pc, #556]	; (8002358 <main+0x2a0>)
 800212a:	f002 fb9f 	bl	800486c <HAL_GPIO_WritePin>

#ifdef DISPLAY_1306
  ssd1306_Init();
 800212e:	f000 fd2f 	bl	8002b90 <ssd1306_Init>
  ssd1306_SetCursor(0, 0);
 8002132:	2100      	movs	r1, #0
 8002134:	2000      	movs	r0, #0
 8002136:	f000 fee5 	bl	8002f04 <ssd1306_SetCursor>
  //sprintf(text1306, "%d      ", 1);
  ssd1306_WriteString("Eth init.", Font_6x8, 0x01);
 800213a:	4a88      	ldr	r2, [pc, #544]	; (800235c <main+0x2a4>)
 800213c:	2301      	movs	r3, #1
 800213e:	ca06      	ldmia	r2, {r1, r2}
 8002140:	4887      	ldr	r0, [pc, #540]	; (8002360 <main+0x2a8>)
 8002142:	f000 feb9 	bl	8002eb8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002146:	f000 fdb5 	bl	8002cb4 <ssd1306_UpdateScreen>
	  SNTP_init(0, ntp_server, 28, gDATABUF);
  } else {
	  SNTP_init(0, net_info.tmsrv, 28, gDATABUF);
  }
#else
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// Reset W5500
 800214a:	2200      	movs	r2, #0
 800214c:	2110      	movs	r1, #16
 800214e:	4885      	ldr	r0, [pc, #532]	; (8002364 <main+0x2ac>)
 8002150:	f002 fb8c 	bl	800486c <HAL_GPIO_WritePin>
#endif

#ifdef DISPLAY_1306
  ssd1306_SetCursor(0, 9);
 8002154:	2109      	movs	r1, #9
 8002156:	2000      	movs	r0, #0
 8002158:	f000 fed4 	bl	8002f04 <ssd1306_SetCursor>
  ssd1306_WriteString("BME280 init.", Font_6x8, 0x01);
 800215c:	4a7f      	ldr	r2, [pc, #508]	; (800235c <main+0x2a4>)
 800215e:	2301      	movs	r3, #1
 8002160:	ca06      	ldmia	r2, {r1, r2}
 8002162:	4881      	ldr	r0, [pc, #516]	; (8002368 <main+0x2b0>)
 8002164:	f000 fea8 	bl	8002eb8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002168:	f000 fda4 	bl	8002cb4 <ssd1306_UpdateScreen>
#endif

#ifdef BME280_ENABLE
  BME280_Init();
 800216c:	f7ff fdd8 	bl	8001d20 <BME280_Init>
#endif

#ifdef DISPLAY_1306
  ssd1306_SetCursor(0, 18);
 8002170:	2112      	movs	r1, #18
 8002172:	2000      	movs	r0, #0
 8002174:	f000 fec6 	bl	8002f04 <ssd1306_SetCursor>
  ssd1306_WriteString("Finish.", Font_6x8, 0x01);
 8002178:	4a78      	ldr	r2, [pc, #480]	; (800235c <main+0x2a4>)
 800217a:	2301      	movs	r3, #1
 800217c:	ca06      	ldmia	r2, {r1, r2}
 800217e:	487b      	ldr	r0, [pc, #492]	; (800236c <main+0x2b4>)
 8002180:	f000 fe9a 	bl	8002eb8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002184:	f000 fd96 	bl	8002cb4 <ssd1306_UpdateScreen>
#endif

/* HV setting */
  HAL_TIM_Base_Start_IT(&htim1);
 8002188:	4879      	ldr	r0, [pc, #484]	; (8002370 <main+0x2b8>)
 800218a:	f005 f825 	bl	80071d8 <HAL_TIM_Base_Start_IT>
  gm_interval = HAL_GetTick();
 800218e:	f001 fa6f 	bl	8003670 <HAL_GetTick>
 8002192:	4603      	mov	r3, r0
 8002194:	4a77      	ldr	r2, [pc, #476]	; (8002374 <main+0x2bc>)
 8002196:	6013      	str	r3, [r2, #0]

  while (1)
  {
	  	  	if (HAL_GetTick() - fastCounter > MEAS_INTERVAL) {
 8002198:	f001 fa6a 	bl	8003670 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	4b76      	ldr	r3, [pc, #472]	; (8002378 <main+0x2c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a8:	d9f6      	bls.n	8002198 <main+0xe0>
	  	  		fastCounter = HAL_GetTick();
 80021aa:	f001 fa61 	bl	8003670 <HAL_GetTick>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a71      	ldr	r2, [pc, #452]	; (8002378 <main+0x2c0>)
 80021b2:	6013      	str	r3, [r2, #0]
	  	  		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

				#ifdef BME280_ENABLE
	  	  		temperature = BME280_ReadTemperature();
 80021b4:	f7ff fa56 	bl	8001664 <BME280_ReadTemperature>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a70      	ldr	r2, [pc, #448]	; (800237c <main+0x2c4>)
 80021bc:	6013      	str	r3, [r2, #0]
	  	  		pressure = BME280_ReadPressure() * 0.00750063755419211f; //0.00750063755419211
 80021be:	f7ff fabf 	bl	8001740 <BME280_ReadPressure>
 80021c2:	4603      	mov	r3, r0
 80021c4:	496e      	ldr	r1, [pc, #440]	; (8002380 <main+0x2c8>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fdbc 	bl	8000d44 <__aeabi_fmul>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b6c      	ldr	r3, [pc, #432]	; (8002384 <main+0x2cc>)
 80021d2:	601a      	str	r2, [r3, #0]
	  	  		humidity = BME280_ReadHumidity();
 80021d4:	f7ff fcea 	bl	8001bac <BME280_ReadHumidity>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a6b      	ldr	r2, [pc, #428]	; (8002388 <main+0x2d0>)
 80021dc:	6013      	str	r3, [r2, #0]
				#endif

				#ifdef DISPLAY_1306
				ssd1306_Fill(0);
 80021de:	2000      	movs	r0, #0
 80021e0:	f000 fd46 	bl	8002c70 <ssd1306_Fill>
				/* Температура */
				sprintf(text1306, "T:%.1f", temperature);
 80021e4:	4b65      	ldr	r3, [pc, #404]	; (800237c <main+0x2c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f91d 	bl	8000428 <__aeabi_f2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4966      	ldr	r1, [pc, #408]	; (800238c <main+0x2d4>)
 80021f4:	4866      	ldr	r0, [pc, #408]	; (8002390 <main+0x2d8>)
 80021f6:	f006 fce7 	bl	8008bc8 <siprintf>
				ssd1306_SetCursor(COLUMN0, 0);
 80021fa:	2100      	movs	r1, #0
 80021fc:	2000      	movs	r0, #0
 80021fe:	f000 fe81 	bl	8002f04 <ssd1306_SetCursor>
				ssd1306_WriteString(text1306, Font_6x8, 0x01);
 8002202:	4a56      	ldr	r2, [pc, #344]	; (800235c <main+0x2a4>)
 8002204:	2301      	movs	r3, #1
 8002206:	ca06      	ldmia	r2, {r1, r2}
 8002208:	4861      	ldr	r0, [pc, #388]	; (8002390 <main+0x2d8>)
 800220a:	f000 fe55 	bl	8002eb8 <ssd1306_WriteString>

				/* Давление */
				sprintf(text1306, "P:%.0f", pressure);
 800220e:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <main+0x2cc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f908 	bl	8000428 <__aeabi_f2d>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	495d      	ldr	r1, [pc, #372]	; (8002394 <main+0x2dc>)
 800221e:	485c      	ldr	r0, [pc, #368]	; (8002390 <main+0x2d8>)
 8002220:	f006 fcd2 	bl	8008bc8 <siprintf>
				ssd1306_SetCursor(COLUMN0, 8);
 8002224:	2108      	movs	r1, #8
 8002226:	2000      	movs	r0, #0
 8002228:	f000 fe6c 	bl	8002f04 <ssd1306_SetCursor>
				ssd1306_WriteString(text1306, Font_6x8, 0x01);
 800222c:	4a4b      	ldr	r2, [pc, #300]	; (800235c <main+0x2a4>)
 800222e:	2301      	movs	r3, #1
 8002230:	ca06      	ldmia	r2, {r1, r2}
 8002232:	4857      	ldr	r0, [pc, #348]	; (8002390 <main+0x2d8>)
 8002234:	f000 fe40 	bl	8002eb8 <ssd1306_WriteString>

				/* Влажность */
				sprintf(text1306, "H:%.1f", humidity);
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <main+0x2d0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f8f3 	bl	8000428 <__aeabi_f2d>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4954      	ldr	r1, [pc, #336]	; (8002398 <main+0x2e0>)
 8002248:	4851      	ldr	r0, [pc, #324]	; (8002390 <main+0x2d8>)
 800224a:	f006 fcbd 	bl	8008bc8 <siprintf>
				ssd1306_SetCursor(COLUMN0, 16);
 800224e:	2110      	movs	r1, #16
 8002250:	2000      	movs	r0, #0
 8002252:	f000 fe57 	bl	8002f04 <ssd1306_SetCursor>
				ssd1306_WriteString(text1306, Font_6x8, 0x01);
 8002256:	4a41      	ldr	r2, [pc, #260]	; (800235c <main+0x2a4>)
 8002258:	2301      	movs	r3, #1
 800225a:	ca06      	ldmia	r2, {r1, r2}
 800225c:	484c      	ldr	r0, [pc, #304]	; (8002390 <main+0x2d8>)
 800225e:	f000 fe2b 	bl	8002eb8 <ssd1306_WriteString>

				/* CO2 */
				sprintf(text1306, "CO2:%.0f", 2000.0);
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b4d      	ldr	r3, [pc, #308]	; (800239c <main+0x2e4>)
 8002268:	494d      	ldr	r1, [pc, #308]	; (80023a0 <main+0x2e8>)
 800226a:	4849      	ldr	r0, [pc, #292]	; (8002390 <main+0x2d8>)
 800226c:	f006 fcac 	bl	8008bc8 <siprintf>
				ssd1306_SetCursor(COLUMN0, 24);
 8002270:	2118      	movs	r1, #24
 8002272:	2000      	movs	r0, #0
 8002274:	f000 fe46 	bl	8002f04 <ssd1306_SetCursor>
				ssd1306_WriteString(text1306, Font_6x8, 0x01);
 8002278:	4a38      	ldr	r2, [pc, #224]	; (800235c <main+0x2a4>)
 800227a:	2301      	movs	r3, #1
 800227c:	ca06      	ldmia	r2, {r1, r2}
 800227e:	4844      	ldr	r0, [pc, #272]	; (8002390 <main+0x2d8>)
 8002280:	f000 fe1a 	bl	8002eb8 <ssd1306_WriteString>

				/* Дозиметр */
				sprintf(text1306, "C:%d", gm_counter);
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <main+0x2ec>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	4947      	ldr	r1, [pc, #284]	; (80023a8 <main+0x2f0>)
 800228c:	4840      	ldr	r0, [pc, #256]	; (8002390 <main+0x2d8>)
 800228e:	f006 fc9b 	bl	8008bc8 <siprintf>
				ssd1306_SetCursor(COLUMN1, 0);
 8002292:	2100      	movs	r1, #0
 8002294:	2036      	movs	r0, #54	; 0x36
 8002296:	f000 fe35 	bl	8002f04 <ssd1306_SetCursor>
				ssd1306_WriteString(text1306, Font_6x8, 0x01);
 800229a:	4a30      	ldr	r2, [pc, #192]	; (800235c <main+0x2a4>)
 800229c:	2301      	movs	r3, #1
 800229e:	ca06      	ldmia	r2, {r1, r2}
 80022a0:	483b      	ldr	r0, [pc, #236]	; (8002390 <main+0x2d8>)
 80022a2:	f000 fe09 	bl	8002eb8 <ssd1306_WriteString>

				sprintf(text1306, "%.2fcps", gm_cps);
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <main+0x2f4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f8bc 	bl	8000428 <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	493e      	ldr	r1, [pc, #248]	; (80023b0 <main+0x2f8>)
 80022b6:	4836      	ldr	r0, [pc, #216]	; (8002390 <main+0x2d8>)
 80022b8:	f006 fc86 	bl	8008bc8 <siprintf>
				ssd1306_SetCursor(COLUMN1, 8);
 80022bc:	2108      	movs	r1, #8
 80022be:	2036      	movs	r0, #54	; 0x36
 80022c0:	f000 fe20 	bl	8002f04 <ssd1306_SetCursor>
				ssd1306_WriteString(text1306, Font_6x8, 0x01);
 80022c4:	4a25      	ldr	r2, [pc, #148]	; (800235c <main+0x2a4>)
 80022c6:	2301      	movs	r3, #1
 80022c8:	ca06      	ldmia	r2, {r1, r2}
 80022ca:	4831      	ldr	r0, [pc, #196]	; (8002390 <main+0x2d8>)
 80022cc:	f000 fdf4 	bl	8002eb8 <ssd1306_WriteString>

				sprintf(text1306, "%.1fuRh", gm_cps * GM_CPS2URh);
 80022d0:	4b36      	ldr	r3, [pc, #216]	; (80023ac <main+0x2f4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f8a7 	bl	8000428 <__aeabi_f2d>
 80022da:	a31b      	add	r3, pc, #108	; (adr r3, 8002348 <main+0x290>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fe f8fa 	bl	80004d8 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4932      	ldr	r1, [pc, #200]	; (80023b4 <main+0x2fc>)
 80022ea:	4829      	ldr	r0, [pc, #164]	; (8002390 <main+0x2d8>)
 80022ec:	f006 fc6c 	bl	8008bc8 <siprintf>
				ssd1306_SetCursor(COLUMN1, 16);
 80022f0:	2110      	movs	r1, #16
 80022f2:	2036      	movs	r0, #54	; 0x36
 80022f4:	f000 fe06 	bl	8002f04 <ssd1306_SetCursor>
				ssd1306_WriteString(text1306, Font_6x8, 0x01);
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <main+0x2a4>)
 80022fa:	2301      	movs	r3, #1
 80022fc:	ca06      	ldmia	r2, {r1, r2}
 80022fe:	4824      	ldr	r0, [pc, #144]	; (8002390 <main+0x2d8>)
 8002300:	f000 fdda 	bl	8002eb8 <ssd1306_WriteString>

				/* Высокое напряжение */
				sprintf(text1306, "%.0fv", hvLevel * 0.398);
 8002304:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <main+0x300>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f87b 	bl	8000404 <__aeabi_i2d>
 800230e:	a310      	add	r3, pc, #64	; (adr r3, 8002350 <main+0x298>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe f8e0 	bl	80004d8 <__aeabi_dmul>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4927      	ldr	r1, [pc, #156]	; (80023bc <main+0x304>)
 800231e:	481c      	ldr	r0, [pc, #112]	; (8002390 <main+0x2d8>)
 8002320:	f006 fc52 	bl	8008bc8 <siprintf>
				ssd1306_SetCursor(COLUMN1, 24);
 8002324:	2118      	movs	r1, #24
 8002326:	2036      	movs	r0, #54	; 0x36
 8002328:	f000 fdec 	bl	8002f04 <ssd1306_SetCursor>
				ssd1306_WriteString(text1306, Font_6x8, 0x01);
 800232c:	4a0b      	ldr	r2, [pc, #44]	; (800235c <main+0x2a4>)
 800232e:	2301      	movs	r3, #1
 8002330:	ca06      	ldmia	r2, {r1, r2}
 8002332:	4817      	ldr	r0, [pc, #92]	; (8002390 <main+0x2d8>)
 8002334:	f000 fdc0 	bl	8002eb8 <ssd1306_WriteString>
				sprintf(text1306, "%2.0d:%.2i", sTime.Hours, sTime.Minutes);
				ssd1306_SetCursor(COLUMN2, 0);
				ssd1306_WriteString(text1306, Font_6x8, 0x01);
				#endif

				ssd1306_UpdateScreen();
 8002338:	f000 fcbc 	bl	8002cb4 <ssd1306_UpdateScreen>
				#endif
				HAL_IWDG_Refresh(&hiwdg);
 800233c:	4820      	ldr	r0, [pc, #128]	; (80023c0 <main+0x308>)
 800233e:	f003 ffb5 	bl	80062ac <HAL_IWDG_Refresh>
	  	  	if (HAL_GetTick() - fastCounter > MEAS_INTERVAL) {
 8002342:	e729      	b.n	8002198 <main+0xe0>
 8002344:	f3af 8000 	nop.w
 8002348:	33333333 	.word	0x33333333
 800234c:	40233333 	.word	0x40233333
 8002350:	fdf3b646 	.word	0xfdf3b646
 8002354:	3fd978d4 	.word	0x3fd978d4
 8002358:	40010800 	.word	0x40010800
 800235c:	20000000 	.word	0x20000000
 8002360:	0800af64 	.word	0x0800af64
 8002364:	40010c00 	.word	0x40010c00
 8002368:	0800af70 	.word	0x0800af70
 800236c:	0800af80 	.word	0x0800af80
 8002370:	200007a0 	.word	0x200007a0
 8002374:	20000208 	.word	0x20000208
 8002378:	20000460 	.word	0x20000460
 800237c:	20000430 	.word	0x20000430
 8002380:	3bf5c7e8 	.word	0x3bf5c7e8
 8002384:	20000438 	.word	0x20000438
 8002388:	20000494 	.word	0x20000494
 800238c:	0800af88 	.word	0x0800af88
 8002390:	200006f4 	.word	0x200006f4
 8002394:	0800af90 	.word	0x0800af90
 8002398:	0800af98 	.word	0x0800af98
 800239c:	409f4000 	.word	0x409f4000
 80023a0:	0800afa0 	.word	0x0800afa0
 80023a4:	20000204 	.word	0x20000204
 80023a8:	0800afac 	.word	0x0800afac
 80023ac:	2000020c 	.word	0x2000020c
 80023b0:	0800afb4 	.word	0x0800afb4
 80023b4:	0800afbc 	.word	0x0800afbc
 80023b8:	20000434 	.word	0x20000434
 80023bc:	0800afc4 	.word	0x0800afc4
 80023c0:	20000694 	.word	0x20000694

080023c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b094      	sub	sp, #80	; 0x50
 80023c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ce:	2228      	movs	r2, #40	; 0x28
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 feda 	bl	800818c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80023f4:	230a      	movs	r3, #10
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023f8:	2301      	movs	r3, #1
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023fc:	2310      	movs	r3, #16
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002400:	2301      	movs	r3, #1
 8002402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002404:	2302      	movs	r3, #2
 8002406:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002408:	2300      	movs	r3, #0
 800240a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800240c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002410:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002416:	4618      	mov	r0, r3
 8002418:	f003 ff64 	bl	80062e4 <HAL_RCC_OscConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002422:	f000 fb77 	bl	8002b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002426:	230f      	movs	r3, #15
 8002428:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002436:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2102      	movs	r1, #2
 8002442:	4618      	mov	r0, r3
 8002444:	f004 f9ce 	bl	80067e4 <HAL_RCC_ClockConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800244e:	f000 fb61 	bl	8002b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002452:	2303      	movs	r3, #3
 8002454:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800245a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800245c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002460:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4618      	mov	r0, r3
 8002466:	f004 fb57 	bl	8006b18 <HAL_RCCEx_PeriphCLKConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002470:	f000 fb50 	bl	8002b14 <Error_Handler>
  }
}
 8002474:	bf00      	nop
 8002476:	3750      	adds	r7, #80	; 0x50
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800248c:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <MX_ADC1_Init+0x74>)
 800248e:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <MX_ADC1_Init+0x78>)
 8002490:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <MX_ADC1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <MX_ADC1_Init+0x74>)
 800249a:	2200      	movs	r2, #0
 800249c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_ADC1_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_ADC1_Init+0x74>)
 80024a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <MX_ADC1_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_ADC1_Init+0x74>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <MX_ADC1_Init+0x74>)
 80024ba:	f001 f907 	bl	80036cc <HAL_ADC_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80024c4:	f000 fb26 	bl	8002b14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80024c8:	2305      	movs	r3, #5
 80024ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024cc:	2301      	movs	r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80024d0:	2301      	movs	r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4805      	ldr	r0, [pc, #20]	; (80024f0 <MX_ADC1_Init+0x74>)
 80024da:	f001 fb13 	bl	8003b04 <HAL_ADC_ConfigChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80024e4:	f000 fb16 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000464 	.word	0x20000464
 80024f4:	40012400 	.word	0x40012400

080024f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <MX_I2C1_Init+0x54>)
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <MX_I2C1_Init+0x58>)
 8002500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 40000;
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <MX_I2C1_Init+0x54>)
 8002504:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002508:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <MX_I2C1_Init+0x54>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_I2C1_Init+0x54>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <MX_I2C1_Init+0x54>)
 8002518:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800251c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <MX_I2C1_Init+0x54>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_I2C1_Init+0x54>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <MX_I2C1_Init+0x54>)
 800252c:	2200      	movs	r2, #0
 800252e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_I2C1_Init+0x54>)
 8002532:	2200      	movs	r2, #0
 8002534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_I2C1_Init+0x54>)
 8002538:	f002 f9c8 	bl	80048cc <HAL_I2C_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8002542:	f000 fae7 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000640 	.word	0x20000640
 8002550:	40005400 	.word	0x40005400

08002554 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <MX_I2C2_Init+0x54>)
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <MX_I2C2_Init+0x58>)
 800255c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 40000;
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <MX_I2C2_Init+0x54>)
 8002560:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002564:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_I2C2_Init+0x54>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_I2C2_Init+0x54>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <MX_I2C2_Init+0x54>)
 8002574:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002578:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_I2C2_Init+0x54>)
 800257c:	2200      	movs	r2, #0
 800257e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_I2C2_Init+0x54>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_I2C2_Init+0x54>)
 8002588:	2200      	movs	r2, #0
 800258a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_I2C2_Init+0x54>)
 800258e:	2200      	movs	r2, #0
 8002590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_I2C2_Init+0x54>)
 8002594:	f002 f99a 	bl	80048cc <HAL_I2C_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800259e:	f000 fab9 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200006a0 	.word	0x200006a0
 80025ac:	40005800 	.word	0x40005800

080025b0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_IWDG_Init+0x2c>)
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <MX_IWDG_Init+0x30>)
 80025b8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_IWDG_Init+0x2c>)
 80025bc:	2205      	movs	r2, #5
 80025be:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_IWDG_Init+0x2c>)
 80025c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80025c6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80025c8:	4804      	ldr	r0, [pc, #16]	; (80025dc <MX_IWDG_Init+0x2c>)
 80025ca:	f003 fe2d 	bl	8006228 <HAL_IWDG_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80025d4:	f000 fa9e 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000694 	.word	0x20000694
 80025e0:	40003000 	.word	0x40003000

080025e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <MX_RTC_Init+0x30>)
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <MX_RTC_Init+0x34>)
 80025ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_RTC_Init+0x30>)
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025f4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MX_RTC_Init+0x30>)
 80025f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025fc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_RTC_Init+0x30>)
 8002600:	f004 fc04 	bl	8006e0c <HAL_RTC_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800260a:	f000 fa83 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000078c 	.word	0x2000078c
 8002618:	40002800 	.word	0x40002800

0800261c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002620:	4b17      	ldr	r3, [pc, #92]	; (8002680 <MX_SPI2_Init+0x64>)
 8002622:	4a18      	ldr	r2, [pc, #96]	; (8002684 <MX_SPI2_Init+0x68>)
 8002624:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <MX_SPI2_Init+0x64>)
 8002628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800262c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <MX_SPI2_Init+0x64>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <MX_SPI2_Init+0x64>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <MX_SPI2_Init+0x64>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <MX_SPI2_Init+0x64>)
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <MX_SPI2_Init+0x64>)
 8002648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <MX_SPI2_Init+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <MX_SPI2_Init+0x64>)
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <MX_SPI2_Init+0x64>)
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <MX_SPI2_Init+0x64>)
 8002662:	2200      	movs	r2, #0
 8002664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <MX_SPI2_Init+0x64>)
 8002668:	220a      	movs	r2, #10
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <MX_SPI2_Init+0x64>)
 800266e:	f004 fce0 	bl	8007032 <HAL_SPI_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002678:	f000 fa4c 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200005a0 	.word	0x200005a0
 8002684:	40003800 	.word	0x40003800

08002688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b096      	sub	sp, #88	; 0x58
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	615a      	str	r2, [r3, #20]
 80026b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2220      	movs	r2, #32
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f005 fd63 	bl	800818c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c6:	4b3d      	ldr	r3, [pc, #244]	; (80027bc <MX_TIM1_Init+0x134>)
 80026c8:	4a3d      	ldr	r2, [pc, #244]	; (80027c0 <MX_TIM1_Init+0x138>)
 80026ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 80026cc:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <MX_TIM1_Init+0x134>)
 80026ce:	2205      	movs	r2, #5
 80026d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <MX_TIM1_Init+0x134>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026d8:	4b38      	ldr	r3, [pc, #224]	; (80027bc <MX_TIM1_Init+0x134>)
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b36      	ldr	r3, [pc, #216]	; (80027bc <MX_TIM1_Init+0x134>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e6:	4b35      	ldr	r3, [pc, #212]	; (80027bc <MX_TIM1_Init+0x134>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <MX_TIM1_Init+0x134>)
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026f2:	4832      	ldr	r0, [pc, #200]	; (80027bc <MX_TIM1_Init+0x134>)
 80026f4:	f004 fd21 	bl	800713a <HAL_TIM_Base_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80026fe:	f000 fa09 	bl	8002b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002708:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800270c:	4619      	mov	r1, r3
 800270e:	482b      	ldr	r0, [pc, #172]	; (80027bc <MX_TIM1_Init+0x134>)
 8002710:	f004 fff4 	bl	80076fc <HAL_TIM_ConfigClockSource>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800271a:	f000 f9fb 	bl	8002b14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800271e:	4827      	ldr	r0, [pc, #156]	; (80027bc <MX_TIM1_Init+0x134>)
 8002720:	f004 fdda 	bl	80072d8 <HAL_TIM_OC_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800272a:	f000 f9f3 	bl	8002b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800272e:	2340      	movs	r3, #64	; 0x40
 8002730:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800273a:	4619      	mov	r1, r3
 800273c:	481f      	ldr	r0, [pc, #124]	; (80027bc <MX_TIM1_Init+0x134>)
 800273e:	f005 fb4f 	bl	8007de0 <HAL_TIMEx_MasterConfigSynchronization>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002748:	f000 f9e4 	bl	8002b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800274c:	2330      	movs	r3, #48	; 0x30
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002758:	2300      	movs	r3, #0
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002760:	2300      	movs	r3, #0
 8002762:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002764:	2300      	movs	r3, #0
 8002766:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276c:	2200      	movs	r2, #0
 800276e:	4619      	mov	r1, r3
 8002770:	4812      	ldr	r0, [pc, #72]	; (80027bc <MX_TIM1_Init+0x134>)
 8002772:	f004 ff6b 	bl	800764c <HAL_TIM_OC_ConfigChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800277c:	f000 f9ca 	bl	8002b14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002798:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <MX_TIM1_Init+0x134>)
 80027a4:	f005 fb7a 	bl	8007e9c <HAL_TIMEx_ConfigBreakDeadTime>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80027ae:	f000 f9b1 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	3758      	adds	r7, #88	; 0x58
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200007a0 	.word	0x200007a0
 80027c0:	40012c00 	.word	0x40012c00

080027c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d8:	463b      	mov	r3, r7
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <MX_TIM4_Init+0xa4>)
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <MX_TIM4_Init+0xa8>)
 80027e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20;
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <MX_TIM4_Init+0xa4>)
 80027e8:	2214      	movs	r2, #20
 80027ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <MX_TIM4_Init+0xa4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <MX_TIM4_Init+0xa4>)
 80027f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <MX_TIM4_Init+0xa4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <MX_TIM4_Init+0xa4>)
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002806:	4818      	ldr	r0, [pc, #96]	; (8002868 <MX_TIM4_Init+0xa4>)
 8002808:	f004 fc97 	bl	800713a <HAL_TIM_Base_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002812:	f000 f97f 	bl	8002b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800281c:	f107 0308 	add.w	r3, r7, #8
 8002820:	4619      	mov	r1, r3
 8002822:	4811      	ldr	r0, [pc, #68]	; (8002868 <MX_TIM4_Init+0xa4>)
 8002824:	f004 ff6a 	bl	80076fc <HAL_TIM_ConfigClockSource>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800282e:	f000 f971 	bl	8002b14 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002832:	2108      	movs	r1, #8
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <MX_TIM4_Init+0xa4>)
 8002836:	f004 fda7 	bl	8007388 <HAL_TIM_OnePulse_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002840:	f000 f968 	bl	8002b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002844:	2330      	movs	r3, #48	; 0x30
 8002846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800284c:	463b      	mov	r3, r7
 800284e:	4619      	mov	r1, r3
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <MX_TIM4_Init+0xa4>)
 8002852:	f005 fac5 	bl	8007de0 <HAL_TIMEx_MasterConfigSynchronization>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800285c:	f000 f95a 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002860:	bf00      	nop
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200005f8 	.word	0x200005f8
 800286c:	40000800 	.word	0x40000800

08002870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <MX_USART1_UART_Init+0x50>)
 8002878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 800287c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002896:	220c      	movs	r2, #12
 8002898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028a6:	4805      	ldr	r0, [pc, #20]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 80028a8:	f005 fb5b 	bl	8007f62 <HAL_UART_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028b2:	f000 f92f 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000704 	.word	0x20000704
 80028c0:	40013800 	.word	0x40013800

080028c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <MX_USART2_UART_Init+0x50>)
 80028cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028ea:	220c      	movs	r2, #12
 80028ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_USART2_UART_Init+0x4c>)
 80028fc:	f005 fb31 	bl	8007f62 <HAL_UART_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002906:	f000 f905 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200007e8 	.word	0x200007e8
 8002914:	40004400 	.word	0x40004400

08002918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <MX_DMA_Init+0x38>)
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <MX_DMA_Init+0x38>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6153      	str	r3, [r2, #20]
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <MX_DMA_Init+0x38>)
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	200b      	movs	r0, #11
 800293c:	f001 fbb3 	bl	80040a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002940:	200b      	movs	r0, #11
 8002942:	f001 fbcc 	bl	80040de <HAL_NVIC_EnableIRQ>

}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000

08002954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295a:	f107 0308 	add.w	r3, r7, #8
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002968:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <MX_GPIO_Init+0xe8>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <MX_GPIO_Init+0xe8>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6193      	str	r3, [r2, #24]
 8002974:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <MX_GPIO_Init+0xe8>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002980:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <MX_GPIO_Init+0xe8>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4a2d      	ldr	r2, [pc, #180]	; (8002a3c <MX_GPIO_Init+0xe8>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6193      	str	r3, [r2, #24]
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <MX_GPIO_Init+0xe8>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Eth_CS_GPIO_Port, Eth_CS_Pin, GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800299e:	4828      	ldr	r0, [pc, #160]	; (8002a40 <MX_GPIO_Init+0xec>)
 80029a0:	f001 ff64 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Eth_rst_Pin|LED_Pin|POWER_PULSE_Pin, GPIO_PIN_RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	f44f 4111 	mov.w	r1, #37120	; 0x9100
 80029aa:	4826      	ldr	r0, [pc, #152]	; (8002a44 <MX_GPIO_Init+0xf0>)
 80029ac:	f001 ff5e 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PULSE_GM_Pin */
  GPIO_InitStruct.Pin = PULSE_GM_Pin;
 80029b0:	2340      	movs	r3, #64	; 0x40
 80029b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <MX_GPIO_Init+0xf4>)
 80029b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b8:	2301      	movs	r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PULSE_GM_GPIO_Port, &GPIO_InitStruct);
 80029bc:	f107 0308 	add.w	r3, r7, #8
 80029c0:	4619      	mov	r1, r3
 80029c2:	4820      	ldr	r0, [pc, #128]	; (8002a44 <MX_GPIO_Init+0xf0>)
 80029c4:	f001 fdce 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : Eth_CS_Pin */
  GPIO_InitStruct.Pin = Eth_CS_Pin;
 80029c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Eth_CS_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	4619      	mov	r1, r3
 80029e0:	4817      	ldr	r0, [pc, #92]	; (8002a40 <MX_GPIO_Init+0xec>)
 80029e2:	f001 fdbf 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pins : Eth_rst_Pin POWER_PULSE_Pin */
  GPIO_InitStruct.Pin = Eth_rst_Pin|POWER_PULSE_Pin;
 80029e6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80029ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2302      	movs	r3, #2
 80029f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	4619      	mov	r1, r3
 80029fe:	4811      	ldr	r0, [pc, #68]	; (8002a44 <MX_GPIO_Init+0xf0>)
 8002a00:	f001 fdb0 	bl	8004564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f107 0308 	add.w	r3, r7, #8
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4809      	ldr	r0, [pc, #36]	; (8002a44 <MX_GPIO_Init+0xf0>)
 8002a1e:	f001 fda1 	bl	8004564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	2017      	movs	r0, #23
 8002a28:	f001 fb3d 	bl	80040a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a2c:	2017      	movs	r0, #23
 8002a2e:	f001 fb56 	bl	80040de <HAL_NVIC_EnableIRQ>

}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010c00 	.word	0x40010c00
 8002a44:	40010800 	.word	0x40010800
 8002a48:	10110000 	.word	0x10110000

08002a4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == PULSE_GM_Pin) // interrupt from PULSE_GM
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d14b      	bne.n	8002af4 <HAL_GPIO_EXTI_Callback+0xa8>
   {
	   gm_counter++;
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002a66:	801a      	strh	r2, [r3, #0]
	   if (gm_counter >= TRUST_INTERVAL) {
 8002a68:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002a70:	d337      	bcc.n	8002ae2 <HAL_GPIO_EXTI_Callback+0x96>
		   gm_cps = (float) (gm_counter / (float) ((HAL_GetTick() - gm_interval) / 1000)) - GM_SELF_FONE;
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f910 	bl	8000c9c <__aeabi_i2f>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	f000 fdf7 	bl	8003670 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f8fe 	bl	8000c94 <__aeabi_ui2f>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe fa05 	bl	8000eac <__aeabi_fdiv>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe f841 	bl	8000b30 <__aeabi_fsub>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002ab4:	601a      	str	r2, [r3, #0]
		   if (gm_cps < 0) {
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fade 	bl	8001080 <__aeabi_fcmplt>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_EXTI_Callback+0x86>
			   gm_cps = 0;
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <HAL_GPIO_EXTI_Callback+0xbc>)
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
		   }
		   gm_counter = 0;
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	801a      	strh	r2, [r3, #0]
		   gm_interval = HAL_GetTick();
 8002ad8:	f000 fdca 	bl	8003670 <HAL_GetTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002ae0:	6013      	str	r3, [r2, #0]
	   }
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ae8:	4808      	ldr	r0, [pc, #32]	; (8002b0c <HAL_GPIO_EXTI_Callback+0xc0>)
 8002aea:	f001 febf 	bl	800486c <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim4);
 8002aee:	4808      	ldr	r0, [pc, #32]	; (8002b10 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002af0:	f004 fb72 	bl	80071d8 <HAL_TIM_Base_Start_IT>
   }
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd90      	pop	{r4, r7, pc}
 8002afc:	20000204 	.word	0x20000204
 8002b00:	20000208 	.word	0x20000208
 8002b04:	10624dd3 	.word	0x10624dd3
 8002b08:	2000020c 	.word	0x2000020c
 8002b0c:	40010800 	.word	0x40010800
 8002b10:	200005f8 	.word	0x200005f8

08002b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b18:	b672      	cpsid	i
}
 8002b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <Error_Handler+0x8>

08002b1e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
	...

08002b2c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af04      	add	r7, sp, #16
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b3a:	9302      	str	r3, [sp, #8]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	1dfb      	adds	r3, r7, #7
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2301      	movs	r3, #1
 8002b46:	2200      	movs	r2, #0
 8002b48:	2178      	movs	r1, #120	; 0x78
 8002b4a:	4803      	ldr	r0, [pc, #12]	; (8002b58 <ssd1306_WriteCommand+0x2c>)
 8002b4c:	f002 fb60 	bl	8005210 <HAL_I2C_Mem_Write>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000640 	.word	0x20000640

08002b5c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af04      	add	r7, sp, #16
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b6e:	9202      	str	r2, [sp, #8]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2301      	movs	r3, #1
 8002b78:	2240      	movs	r2, #64	; 0x40
 8002b7a:	2178      	movs	r1, #120	; 0x78
 8002b7c:	4803      	ldr	r0, [pc, #12]	; (8002b8c <ssd1306_WriteData+0x30>)
 8002b7e:	f002 fb47 	bl	8005210 <HAL_I2C_Mem_Write>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000640 	.word	0x20000640

08002b90 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002b94:	f7ff ffc3 	bl	8002b1e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002b98:	2064      	movs	r0, #100	; 0x64
 8002b9a:	f000 fd73 	bl	8003684 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f000 f9dc 	bl	8002f5c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002ba4:	2020      	movs	r0, #32
 8002ba6:	f7ff ffc1 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7ff ffbe 	bl	8002b2c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002bb0:	20b0      	movs	r0, #176	; 0xb0
 8002bb2:	f7ff ffbb 	bl	8002b2c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002bb6:	20c8      	movs	r0, #200	; 0xc8
 8002bb8:	f7ff ffb8 	bl	8002b2c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7ff ffb5 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002bc2:	2010      	movs	r0, #16
 8002bc4:	f7ff ffb2 	bl	8002b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002bc8:	2040      	movs	r0, #64	; 0x40
 8002bca:	f7ff ffaf 	bl	8002b2c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002bce:	20ff      	movs	r0, #255	; 0xff
 8002bd0:	f000 f9b0 	bl	8002f34 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002bd4:	20a1      	movs	r0, #161	; 0xa1
 8002bd6:	f7ff ffa9 	bl	8002b2c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002bda:	20a6      	movs	r0, #166	; 0xa6
 8002bdc:	f7ff ffa6 	bl	8002b2c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002be0:	20a8      	movs	r0, #168	; 0xa8
 8002be2:	f7ff ffa3 	bl	8002b2c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002be6:	201f      	movs	r0, #31
 8002be8:	f7ff ffa0 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002bec:	20a4      	movs	r0, #164	; 0xa4
 8002bee:	f7ff ff9d 	bl	8002b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002bf2:	20d3      	movs	r0, #211	; 0xd3
 8002bf4:	f7ff ff9a 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7ff ff97 	bl	8002b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002bfe:	20d5      	movs	r0, #213	; 0xd5
 8002c00:	f7ff ff94 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002c04:	20f0      	movs	r0, #240	; 0xf0
 8002c06:	f7ff ff91 	bl	8002b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002c0a:	20d9      	movs	r0, #217	; 0xd9
 8002c0c:	f7ff ff8e 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002c10:	2022      	movs	r0, #34	; 0x22
 8002c12:	f7ff ff8b 	bl	8002b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002c16:	20da      	movs	r0, #218	; 0xda
 8002c18:	f7ff ff88 	bl	8002b2c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f7ff ff85 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002c22:	20db      	movs	r0, #219	; 0xdb
 8002c24:	f7ff ff82 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002c28:	2020      	movs	r0, #32
 8002c2a:	f7ff ff7f 	bl	8002b2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002c2e:	208d      	movs	r0, #141	; 0x8d
 8002c30:	f7ff ff7c 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002c34:	2014      	movs	r0, #20
 8002c36:	f7ff ff79 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set Contrast
 8002c3a:	2081      	movs	r0, #129	; 0x81
 8002c3c:	f7ff ff76 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x04); //
 8002c40:	2004      	movs	r0, #4
 8002c42:	f7ff ff73 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002c46:	2001      	movs	r0, #1
 8002c48:	f000 f988 	bl	8002f5c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f000 f80f 	bl	8002c70 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002c52:	f000 f82f 	bl	8002cb4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <ssd1306_Init+0xdc>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <ssd1306_Init+0xdc>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002c62:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <ssd1306_Init+0xdc>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	711a      	strb	r2, [r3, #4]
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000410 	.word	0x20000410

08002c70 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e00d      	b.n	8002c9c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <ssd1306_Fill+0x1a>
 8002c86:	2100      	movs	r1, #0
 8002c88:	e000      	b.n	8002c8c <ssd1306_Fill+0x1c>
 8002c8a:	21ff      	movs	r1, #255	; 0xff
 8002c8c:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <ssd1306_Fill+0x40>)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	460a      	mov	r2, r1
 8002c94:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca2:	d3ed      	bcc.n	8002c80 <ssd1306_Fill+0x10>
    }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	20000210 	.word	0x20000210

08002cb4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002cba:	2300      	movs	r3, #0
 8002cbc:	71fb      	strb	r3, [r7, #7]
 8002cbe:	e016      	b.n	8002cee <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	3b50      	subs	r3, #80	; 0x50
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff30 	bl	8002b2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7ff ff2d 	bl	8002b2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002cd2:	2010      	movs	r0, #16
 8002cd4:	f7ff ff2a 	bl	8002b2c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	01db      	lsls	r3, r3, #7
 8002cdc:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <ssd1306_UpdateScreen+0x4c>)
 8002cde:	4413      	add	r3, r2
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff3a 	bl	8002b5c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	3301      	adds	r3, #1
 8002cec:	71fb      	strb	r3, [r7, #7]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d9e5      	bls.n	8002cc0 <ssd1306_UpdateScreen+0xc>
    }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000210 	.word	0x20000210

08002d04 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	71bb      	strb	r3, [r7, #6]
 8002d12:	4613      	mov	r3, r2
 8002d14:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db3d      	blt.n	8002d9a <ssd1306_DrawPixel+0x96>
 8002d1e:	79bb      	ldrb	r3, [r7, #6]
 8002d20:	2b1f      	cmp	r3, #31
 8002d22:	d83a      	bhi.n	8002d9a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002d24:	797b      	ldrb	r3, [r7, #5]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d11a      	bne.n	8002d60 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d2a:	79fa      	ldrb	r2, [r7, #7]
 8002d2c:	79bb      	ldrb	r3, [r7, #6]
 8002d2e:	08db      	lsrs	r3, r3, #3
 8002d30:	b2d8      	uxtb	r0, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	01db      	lsls	r3, r3, #7
 8002d36:	4413      	add	r3, r2
 8002d38:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <ssd1306_DrawPixel+0xa0>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	b25a      	sxtb	r2, r3
 8002d3e:	79bb      	ldrb	r3, [r7, #6]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	b259      	sxtb	r1, r3
 8002d50:	79fa      	ldrb	r2, [r7, #7]
 8002d52:	4603      	mov	r3, r0
 8002d54:	01db      	lsls	r3, r3, #7
 8002d56:	4413      	add	r3, r2
 8002d58:	b2c9      	uxtb	r1, r1
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <ssd1306_DrawPixel+0xa0>)
 8002d5c:	54d1      	strb	r1, [r2, r3]
 8002d5e:	e01d      	b.n	8002d9c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d60:	79fa      	ldrb	r2, [r7, #7]
 8002d62:	79bb      	ldrb	r3, [r7, #6]
 8002d64:	08db      	lsrs	r3, r3, #3
 8002d66:	b2d8      	uxtb	r0, r3
 8002d68:	4603      	mov	r3, r0
 8002d6a:	01db      	lsls	r3, r3, #7
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a0d      	ldr	r2, [pc, #52]	; (8002da4 <ssd1306_DrawPixel+0xa0>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	b25a      	sxtb	r2, r3
 8002d74:	79bb      	ldrb	r3, [r7, #6]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	b25b      	sxtb	r3, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	4013      	ands	r3, r2
 8002d88:	b259      	sxtb	r1, r3
 8002d8a:	79fa      	ldrb	r2, [r7, #7]
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	01db      	lsls	r3, r3, #7
 8002d90:	4413      	add	r3, r2
 8002d92:	b2c9      	uxtb	r1, r1
 8002d94:	4a03      	ldr	r2, [pc, #12]	; (8002da4 <ssd1306_DrawPixel+0xa0>)
 8002d96:	54d1      	strb	r1, [r2, r3]
 8002d98:	e000      	b.n	8002d9c <ssd1306_DrawPixel+0x98>
        return;
 8002d9a:	bf00      	nop
    }
}
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	20000210 	.word	0x20000210

08002da8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4604      	mov	r4, r0
 8002db0:	1d38      	adds	r0, r7, #4
 8002db2:	e880 0006 	stmia.w	r0, {r1, r2}
 8002db6:	461a      	mov	r2, r3
 8002db8:	4623      	mov	r3, r4
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b1f      	cmp	r3, #31
 8002dc4:	d902      	bls.n	8002dcc <ssd1306_WriteChar+0x24>
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b7e      	cmp	r3, #126	; 0x7e
 8002dca:	d901      	bls.n	8002dd0 <ssd1306_WriteChar+0x28>
        return 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e06d      	b.n	8002eac <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002dd0:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <ssd1306_WriteChar+0x10c>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	793b      	ldrb	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	dc06      	bgt.n	8002dec <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002dde:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <ssd1306_WriteChar+0x10c>)
 8002de0:	885b      	ldrh	r3, [r3, #2]
 8002de2:	461a      	mov	r2, r3
 8002de4:	797b      	ldrb	r3, [r7, #5]
 8002de6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	dd01      	ble.n	8002df0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e05d      	b.n	8002eac <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	e04c      	b.n	8002e90 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	3b20      	subs	r3, #32
 8002dfc:	7979      	ldrb	r1, [r7, #5]
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4619      	mov	r1, r3
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	440b      	add	r3, r1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	e034      	b.n	8002e80 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <ssd1306_WriteChar+0x10c>)
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	b2d8      	uxtb	r0, r3
 8002e34:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <ssd1306_WriteChar+0x10c>)
 8002e36:	885b      	ldrh	r3, [r3, #2]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	7bba      	ldrb	r2, [r7, #14]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f7ff ff5d 	bl	8002d04 <ssd1306_DrawPixel>
 8002e4a:	e016      	b.n	8002e7a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <ssd1306_WriteChar+0x10c>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	b2d8      	uxtb	r0, r3
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <ssd1306_WriteChar+0x10c>)
 8002e5c:	885b      	ldrh	r3, [r3, #2]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	b2d9      	uxtb	r1, r3
 8002e68:	7bbb      	ldrb	r3, [r7, #14]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	f7ff ff45 	bl	8002d04 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	793b      	ldrb	r3, [r7, #4]
 8002e82:	461a      	mov	r2, r3
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d3c5      	bcc.n	8002e16 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	797b      	ldrb	r3, [r7, #5]
 8002e92:	461a      	mov	r2, r3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d3ad      	bcc.n	8002df6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <ssd1306_WriteChar+0x10c>)
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	793b      	ldrb	r3, [r7, #4]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <ssd1306_WriteChar+0x10c>)
 8002ea8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3724      	adds	r7, #36	; 0x24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	20000410 	.word	0x20000410

08002eb8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	1d38      	adds	r0, r7, #4
 8002ec2:	e880 0006 	stmia.w	r0, {r1, r2}
 8002ec6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002ec8:	e012      	b.n	8002ef0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	7818      	ldrb	r0, [r3, #0]
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	1d3a      	adds	r2, r7, #4
 8002ed2:	ca06      	ldmia	r2, {r1, r2}
 8002ed4:	f7ff ff68 	bl	8002da8 <ssd1306_WriteChar>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d002      	beq.n	8002eea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	e008      	b.n	8002efc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3301      	adds	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e8      	bne.n	8002eca <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	781b      	ldrb	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	460a      	mov	r2, r1
 8002f0e:	71fb      	strb	r3, [r7, #7]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <ssd1306_SetCursor+0x2c>)
 8002f1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002f1c:	79bb      	ldrb	r3, [r7, #6]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <ssd1306_SetCursor+0x2c>)
 8002f22:	805a      	strh	r2, [r3, #2]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000410 	.word	0x20000410

08002f34 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002f3e:	2381      	movs	r3, #129	; 0x81
 8002f40:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fdf1 	bl	8002b2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fded 	bl	8002b2c <ssd1306_WriteCommand>
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002f6c:	23af      	movs	r3, #175	; 0xaf
 8002f6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <ssd1306_SetDisplayOn+0x38>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	715a      	strb	r2, [r3, #5]
 8002f76:	e004      	b.n	8002f82 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f78:	23ae      	movs	r3, #174	; 0xae
 8002f7a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <ssd1306_SetDisplayOn+0x38>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fdd1 	bl	8002b2c <ssd1306_WriteCommand>
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000410 	.word	0x20000410

08002f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6193      	str	r3, [r2, #24]
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_MspInit+0x60>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_MspInit+0x60>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40010000 	.word	0x40010000

08002ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_ADC_MspInit+0xbc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d149      	bne.n	80030b0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_ADC_MspInit+0xc0>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4a26      	ldr	r2, [pc, #152]	; (80030bc <HAL_ADC_MspInit+0xc0>)
 8003022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003026:	6193      	str	r3, [r2, #24]
 8003028:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_ADC_MspInit+0xc0>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <HAL_ADC_MspInit+0xc0>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a20      	ldr	r2, [pc, #128]	; (80030bc <HAL_ADC_MspInit+0xc0>)
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	6193      	str	r3, [r2, #24]
 8003040:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <HAL_ADC_MspInit+0xc0>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = FB_Pin;
 800304c:	2320      	movs	r3, #32
 800304e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003050:	2303      	movs	r3, #3
 8003052:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(FB_GPIO_Port, &GPIO_InitStruct);
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	4619      	mov	r1, r3
 800305a:	4819      	ldr	r0, [pc, #100]	; (80030c0 <HAL_ADC_MspInit+0xc4>)
 800305c:	f001 fa82 	bl	8004564 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003060:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_ADC_MspInit+0xcc>)
 8003064:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 8003068:	2200      	movs	r2, #0
 800306a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 8003074:	2200      	movs	r2, #0
 8003076:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003078:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 800307a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800307e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 8003082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003086:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 8003090:	2200      	movs	r2, #0
 8003092:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003094:	480b      	ldr	r0, [pc, #44]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 8003096:	f001 f83d 	bl	8004114 <HAL_DMA_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80030a0:	f7ff fd38 	bl	8002b14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 80030a8:	621a      	str	r2, [r3, #32]
 80030aa:	4a06      	ldr	r2, [pc, #24]	; (80030c4 <HAL_ADC_MspInit+0xc8>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030b0:	bf00      	nop
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40012400 	.word	0x40012400
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40010800 	.word	0x40010800
 80030c4:	20000748 	.word	0x20000748
 80030c8:	40020008 	.word	0x40020008

080030cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08c      	sub	sp, #48	; 0x30
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a32      	ldr	r2, [pc, #200]	; (80031b0 <HAL_I2C_MspInit+0xe4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d133      	bne.n	8003154 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ec:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4a30      	ldr	r2, [pc, #192]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 80030f2:	f043 0308 	orr.w	r3, r3, #8
 80030f6:	6193      	str	r3, [r2, #24]
 80030f8:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BME280_SCL_Pin|BME280_SDA_Pin;
 8003104:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800310a:	2312      	movs	r3, #18
 800310c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800310e:	2303      	movs	r3, #3
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4619      	mov	r1, r3
 8003118:	4827      	ldr	r0, [pc, #156]	; (80031b8 <HAL_I2C_MspInit+0xec>)
 800311a:	f001 fa23 	bl	8004564 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800311e:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_I2C_MspInit+0xf0>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003134:	4a21      	ldr	r2, [pc, #132]	; (80031bc <HAL_I2C_MspInit+0xf0>)
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 8003140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003144:	61d3      	str	r3, [r2, #28]
 8003146:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003152:	e029      	b.n	80031a8 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_I2C_MspInit+0xf4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d124      	bne.n	80031a8 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 8003164:	f043 0308 	orr.w	r3, r3, #8
 8003168:	6193      	str	r3, [r2, #24]
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003176:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800317a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800317c:	2312      	movs	r3, #18
 800317e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003184:	f107 031c 	add.w	r3, r7, #28
 8003188:	4619      	mov	r1, r3
 800318a:	480b      	ldr	r0, [pc, #44]	; (80031b8 <HAL_I2C_MspInit+0xec>)
 800318c:	f001 f9ea 	bl	8004564 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003190:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 8003196:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800319a:	61d3      	str	r3, [r2, #28]
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_I2C_MspInit+0xe8>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3730      	adds	r7, #48	; 0x30
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40005400 	.word	0x40005400
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40010c00 	.word	0x40010c00
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40005800 	.word	0x40005800

080031c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <HAL_RTC_MspInit+0x3c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d110      	bne.n	80031f8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80031d6:	f003 f879 	bl	80062cc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RTC_MspInit+0x40>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RTC_MspInit+0x40>)
 80031e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031e4:	61d3      	str	r3, [r2, #28]
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_RTC_MspInit+0x40>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RTC_MspInit+0x44>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40002800 	.word	0x40002800
 8003204:	40021000 	.word	0x40021000
 8003208:	4242043c 	.word	0x4242043c

0800320c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0310 	add.w	r3, r7, #16
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_SPI_MspInit+0x8c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d131      	bne.n	8003290 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_SPI_MspInit+0x90>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4a1a      	ldr	r2, [pc, #104]	; (800329c <HAL_SPI_MspInit+0x90>)
 8003232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003236:	61d3      	str	r3, [r2, #28]
 8003238:	4b18      	ldr	r3, [pc, #96]	; (800329c <HAL_SPI_MspInit+0x90>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003244:	4b15      	ldr	r3, [pc, #84]	; (800329c <HAL_SPI_MspInit+0x90>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <HAL_SPI_MspInit+0x90>)
 800324a:	f043 0308 	orr.w	r3, r3, #8
 800324e:	6193      	str	r3, [r2, #24]
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_SPI_MspInit+0x90>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800325c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003260:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003266:	2303      	movs	r3, #3
 8003268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326a:	f107 0310 	add.w	r3, r7, #16
 800326e:	4619      	mov	r1, r3
 8003270:	480b      	ldr	r0, [pc, #44]	; (80032a0 <HAL_SPI_MspInit+0x94>)
 8003272:	f001 f977 	bl	8004564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003276:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800327a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 0310 	add.w	r3, r7, #16
 8003288:	4619      	mov	r1, r3
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <HAL_SPI_MspInit+0x94>)
 800328c:	f001 f96a 	bl	8004564 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003290:	bf00      	nop
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40003800 	.word	0x40003800
 800329c:	40021000 	.word	0x40021000
 80032a0:	40010c00 	.word	0x40010c00

080032a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1a      	ldr	r2, [pc, #104]	; (800331c <HAL_TIM_Base_MspInit+0x78>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d114      	bne.n	80032e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_TIM_Base_MspInit+0x7c>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <HAL_TIM_Base_MspInit+0x7c>)
 80032bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c0:	6193      	str	r3, [r2, #24]
 80032c2:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_TIM_Base_MspInit+0x7c>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	2019      	movs	r0, #25
 80032d4:	f000 fee7 	bl	80040a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80032d8:	2019      	movs	r0, #25
 80032da:	f000 ff00 	bl	80040de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032de:	e018      	b.n	8003312 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0f      	ldr	r2, [pc, #60]	; (8003324 <HAL_TIM_Base_MspInit+0x80>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d113      	bne.n	8003312 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_TIM_Base_MspInit+0x7c>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <HAL_TIM_Base_MspInit+0x7c>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	61d3      	str	r3, [r2, #28]
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_TIM_Base_MspInit+0x7c>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2100      	movs	r1, #0
 8003306:	201e      	movs	r0, #30
 8003308:	f000 fecd 	bl	80040a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800330c:	201e      	movs	r0, #30
 800330e:	f000 fee6 	bl	80040de <HAL_NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40021000 	.word	0x40021000
 8003324:	40000800 	.word	0x40000800

08003328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 031c 	add.w	r3, r7, #28
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a3d      	ldr	r2, [pc, #244]	; (8003438 <HAL_UART_MspInit+0x110>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d13e      	bne.n	80033c6 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003348:	4b3c      	ldr	r3, [pc, #240]	; (800343c <HAL_UART_MspInit+0x114>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4a3b      	ldr	r2, [pc, #236]	; (800343c <HAL_UART_MspInit+0x114>)
 800334e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003352:	6193      	str	r3, [r2, #24]
 8003354:	4b39      	ldr	r3, [pc, #228]	; (800343c <HAL_UART_MspInit+0x114>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_UART_MspInit+0x114>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	4a35      	ldr	r2, [pc, #212]	; (800343c <HAL_UART_MspInit+0x114>)
 8003366:	f043 0308 	orr.w	r3, r3, #8
 800336a:	6193      	str	r3, [r2, #24]
 800336c:	4b33      	ldr	r3, [pc, #204]	; (800343c <HAL_UART_MspInit+0x114>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003378:	2340      	movs	r3, #64	; 0x40
 800337a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003380:	2303      	movs	r3, #3
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	f107 031c 	add.w	r3, r7, #28
 8003388:	4619      	mov	r1, r3
 800338a:	482d      	ldr	r0, [pc, #180]	; (8003440 <HAL_UART_MspInit+0x118>)
 800338c:	f001 f8ea 	bl	8004564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003394:	2300      	movs	r3, #0
 8003396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	4619      	mov	r1, r3
 80033a2:	4827      	ldr	r0, [pc, #156]	; (8003440 <HAL_UART_MspInit+0x118>)
 80033a4:	f001 f8de 	bl	8004564 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80033a8:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_UART_MspInit+0x11c>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	f043 0304 	orr.w	r3, r3, #4
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033be:	4a21      	ldr	r2, [pc, #132]	; (8003444 <HAL_UART_MspInit+0x11c>)
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033c4:	e034      	b.n	8003430 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <HAL_UART_MspInit+0x120>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d12f      	bne.n	8003430 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_UART_MspInit+0x114>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <HAL_UART_MspInit+0x114>)
 80033d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033da:	61d3      	str	r3, [r2, #28]
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_UART_MspInit+0x114>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_UART_MspInit+0x114>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4a13      	ldr	r2, [pc, #76]	; (800343c <HAL_UART_MspInit+0x114>)
 80033ee:	f043 0304 	orr.w	r3, r3, #4
 80033f2:	6193      	str	r3, [r2, #24]
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_UART_MspInit+0x114>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003400:	2304      	movs	r3, #4
 8003402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003408:	2303      	movs	r3, #3
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4619      	mov	r1, r3
 8003412:	480e      	ldr	r0, [pc, #56]	; (800344c <HAL_UART_MspInit+0x124>)
 8003414:	f001 f8a6 	bl	8004564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003418:	2308      	movs	r3, #8
 800341a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800341c:	2300      	movs	r3, #0
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003424:	f107 031c 	add.w	r3, r7, #28
 8003428:	4619      	mov	r1, r3
 800342a:	4808      	ldr	r0, [pc, #32]	; (800344c <HAL_UART_MspInit+0x124>)
 800342c:	f001 f89a 	bl	8004564 <HAL_GPIO_Init>
}
 8003430:	bf00      	nop
 8003432:	3730      	adds	r7, #48	; 0x30
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40013800 	.word	0x40013800
 800343c:	40021000 	.word	0x40021000
 8003440:	40010c00 	.word	0x40010c00
 8003444:	40010000 	.word	0x40010000
 8003448:	40004400 	.word	0x40004400
 800344c:	40010800 	.word	0x40010800

08003450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003454:	e7fe      	b.n	8003454 <NMI_Handler+0x4>

08003456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800345a:	e7fe      	b.n	800345a <HardFault_Handler+0x4>

0800345c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003460:	e7fe      	b.n	8003460 <MemManage_Handler+0x4>

08003462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003466:	e7fe      	b.n	8003466 <BusFault_Handler+0x4>

08003468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800346c:	e7fe      	b.n	800346c <UsageFault_Handler+0x4>

0800346e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
	...

08003494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <SysTick_Handler+0x2c>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <SysTick_Handler+0x2c>)
 80034a2:	801a      	strh	r2, [r3, #0]
	if(ticks >= 1000) {
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <SysTick_Handler+0x2c>)
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ac:	d304      	bcc.n	80034b8 <SysTick_Handler+0x24>
		DHCP_time_handler();
 80034ae:	f7fe fd49 	bl	8001f44 <DHCP_time_handler>
		ticks = 0;
 80034b2:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <SysTick_Handler+0x2c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b8:	f000 f8c8 	bl	800364c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000416 	.word	0x20000416

080034c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	HAL_ADC_Stop_DMA(&hadc1);
 80034c8:	480c      	ldr	r0, [pc, #48]	; (80034fc <DMA1_Channel1_IRQHandler+0x38>)
 80034ca:	f000 fab5 	bl	8003a38 <HAL_ADC_Stop_DMA>
	//POWER_PULSE
	//HAL_GPIO_WritePin(POWER_PULSE_GPIO_Port, POWER_PULSE_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(POWER_PULSE_GPIO_Port, POWER_PULSE_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_TogglePin(POWER_PULSE_GPIO_Port, POWER_PULSE_Pin);
	if (hvLevel < POWER_VOLTAGE) {
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <DMA1_Channel1_IRQHandler+0x3c>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 80034d6:	d20b      	bcs.n	80034f0 <DMA1_Channel1_IRQHandler+0x2c>
		HAL_GPIO_WritePin(POWER_PULSE_GPIO_Port, POWER_PULSE_Pin, GPIO_PIN_SET);
 80034d8:	2201      	movs	r2, #1
 80034da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034de:	4809      	ldr	r0, [pc, #36]	; (8003504 <DMA1_Channel1_IRQHandler+0x40>)
 80034e0:	f001 f9c4 	bl	800486c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(POWER_PULSE_GPIO_Port, POWER_PULSE_Pin, GPIO_PIN_RESET);
 80034e4:	2200      	movs	r2, #0
 80034e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034ea:	4806      	ldr	r0, [pc, #24]	; (8003504 <DMA1_Channel1_IRQHandler+0x40>)
 80034ec:	f001 f9be 	bl	800486c <HAL_GPIO_WritePin>
		//POWER_PULSE
	}
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034f0:	4805      	ldr	r0, [pc, #20]	; (8003508 <DMA1_Channel1_IRQHandler+0x44>)
 80034f2:	f000 ff03 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000464 	.word	0x20000464
 8003500:	20000434 	.word	0x20000434
 8003504:	40010800 	.word	0x40010800
 8003508:	20000748 	.word	0x20000748

0800350c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003510:	2040      	movs	r0, #64	; 0x40
 8003512:	f001 f9c3 	bl	800489c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &hvLevel, 1);
 8003520:	2201      	movs	r2, #1
 8003522:	4904      	ldr	r1, [pc, #16]	; (8003534 <TIM1_UP_IRQHandler+0x18>)
 8003524:	4804      	ldr	r0, [pc, #16]	; (8003538 <TIM1_UP_IRQHandler+0x1c>)
 8003526:	f000 f9a9 	bl	800387c <HAL_ADC_Start_DMA>
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800352a:	4804      	ldr	r0, [pc, #16]	; (800353c <TIM1_UP_IRQHandler+0x20>)
 800352c:	f003 ff85 	bl	800743a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000434 	.word	0x20000434
 8003538:	20000464 	.word	0x20000464
 800353c:	200007a0 	.word	0x200007a0

08003540 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003544:	2200      	movs	r2, #0
 8003546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800354a:	4805      	ldr	r0, [pc, #20]	; (8003560 <TIM4_IRQHandler+0x20>)
 800354c:	f001 f98e 	bl	800486c <HAL_GPIO_WritePin>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003550:	4804      	ldr	r0, [pc, #16]	; (8003564 <TIM4_IRQHandler+0x24>)
 8003552:	f003 ff72 	bl	800743a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
	HAL_TIM_Base_Stop_IT(&htim4);
 8003556:	4803      	ldr	r0, [pc, #12]	; (8003564 <TIM4_IRQHandler+0x24>)
 8003558:	f003 fe90 	bl	800727c <HAL_TIM_Base_Stop_IT>

  /* USER CODE END TIM4_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40010800 	.word	0x40010800
 8003564:	200005f8 	.word	0x200005f8

08003568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003574:	480c      	ldr	r0, [pc, #48]	; (80035a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003576:	490d      	ldr	r1, [pc, #52]	; (80035ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003578:	4a0d      	ldr	r2, [pc, #52]	; (80035b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800357a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800357c:	e002      	b.n	8003584 <LoopCopyDataInit>

0800357e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003582:	3304      	adds	r3, #4

08003584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003588:	d3f9      	bcc.n	800357e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800358c:	4c0a      	ldr	r4, [pc, #40]	; (80035b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800358e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003590:	e001      	b.n	8003596 <LoopFillZerobss>

08003592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003594:	3204      	adds	r2, #4

08003596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003598:	d3fb      	bcc.n	8003592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800359a:	f7ff ffe5 	bl	8003568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800359e:	f004 fdbb 	bl	8008118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035a2:	f7fe fd89 	bl	80020b8 <main>
  bx lr
 80035a6:	4770      	bx	lr
  ldr r0, =_sdata
 80035a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035ac:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80035b0:	0800b9e4 	.word	0x0800b9e4
  ldr r2, =_sbss
 80035b4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80035b8:	20000844 	.word	0x20000844

080035bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035bc:	e7fe      	b.n	80035bc <ADC1_2_IRQHandler>
	...

080035c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_Init+0x28>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <HAL_Init+0x28>)
 80035ca:	f043 0310 	orr.w	r3, r3, #16
 80035ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d0:	2003      	movs	r0, #3
 80035d2:	f000 fd5d 	bl	8004090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f000 f808 	bl	80035ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035dc:	f7ff fcdc 	bl	8002f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_InitTick+0x54>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_InitTick+0x58>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003602:	fbb3 f3f1 	udiv	r3, r3, r1
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fd75 	bl	80040fa <HAL_SYSTICK_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e00e      	b.n	8003638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d80a      	bhi.n	8003636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003620:	2200      	movs	r2, #0
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003628:	f000 fd3d 	bl	80040a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800362c:	4a06      	ldr	r2, [pc, #24]	; (8003648 <HAL_InitTick+0x5c>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000008 	.word	0x20000008
 8003644:	20000010 	.word	0x20000010
 8003648:	2000000c 	.word	0x2000000c

0800364c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_IncTick+0x1c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_IncTick+0x20>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4413      	add	r3, r2
 800365c:	4a03      	ldr	r2, [pc, #12]	; (800366c <HAL_IncTick+0x20>)
 800365e:	6013      	str	r3, [r2, #0]
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	20000010 	.word	0x20000010
 800366c:	20000830 	.word	0x20000830

08003670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b02      	ldr	r3, [pc, #8]	; (8003680 <HAL_GetTick+0x10>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	20000830 	.word	0x20000830

08003684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800368c:	f7ff fff0 	bl	8003670 <HAL_GetTick>
 8003690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800369c:	d005      	beq.n	80036aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_Delay+0x44>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036aa:	bf00      	nop
 80036ac:	f7ff ffe0 	bl	8003670 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d8f7      	bhi.n	80036ac <HAL_Delay+0x28>
  {
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000010 	.word	0x20000010

080036cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0be      	b.n	800386c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fc76 	bl	8002ffc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb49 	bl	8003da8 <ADC_ConversionStop_Disable>
 8003716:	4603      	mov	r3, r0
 8003718:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 8099 	bne.w	800385a <HAL_ADC_Init+0x18e>
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 8095 	bne.w	800385a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003738:	f023 0302 	bic.w	r3, r3, #2
 800373c:	f043 0202 	orr.w	r2, r3, #2
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800374c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7b1b      	ldrb	r3, [r3, #12]
 8003752:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003754:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	4313      	orrs	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003764:	d003      	beq.n	800376e <HAL_ADC_Init+0xa2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d102      	bne.n	8003774 <HAL_ADC_Init+0xa8>
 800376e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003772:	e000      	b.n	8003776 <HAL_ADC_Init+0xaa>
 8003774:	2300      	movs	r3, #0
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7d1b      	ldrb	r3, [r3, #20]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d119      	bne.n	80037b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7b1b      	ldrb	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	3b01      	subs	r3, #1
 8003792:	035a      	lsls	r2, r3, #13
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e00b      	b.n	80037b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	f043 0201 	orr.w	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	4b28      	ldr	r3, [pc, #160]	; (8003874 <HAL_ADC_Init+0x1a8>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e8:	d003      	beq.n	80037f2 <HAL_ADC_Init+0x126>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d104      	bne.n	80037fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	051b      	lsls	r3, r3, #20
 80037fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	430a      	orrs	r2, r1
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_ADC_Init+0x1ac>)
 8003818:	4013      	ands	r3, r2
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	429a      	cmp	r2, r3
 800381e:	d10b      	bne.n	8003838 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003836:	e018      	b.n	800386a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	f023 0312 	bic.w	r3, r3, #18
 8003840:	f043 0210 	orr.w	r2, r3, #16
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003858:	e007      	b.n	800386a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	f043 0210 	orr.w	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	ffe1f7fd 	.word	0xffe1f7fd
 8003878:	ff1f0efe 	.word	0xff1f0efe

0800387c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a64      	ldr	r2, [pc, #400]	; (8003a24 <HAL_ADC_Start_DMA+0x1a8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_ADC_Start_DMA+0x24>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a63      	ldr	r2, [pc, #396]	; (8003a28 <HAL_ADC_Start_DMA+0x1ac>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d106      	bne.n	80038ae <HAL_ADC_Start_DMA+0x32>
 80038a0:	4b60      	ldr	r3, [pc, #384]	; (8003a24 <HAL_ADC_Start_DMA+0x1a8>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 80b3 	bne.w	8003a14 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_Start_DMA+0x40>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e0ae      	b.n	8003a1a <HAL_ADC_Start_DMA+0x19e>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fa15 	bl	8003cf4 <ADC_Enable>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 809a 	bne.w	8003a0a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4e      	ldr	r2, [pc, #312]	; (8003a28 <HAL_ADC_Start_DMA+0x1ac>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d105      	bne.n	8003900 <HAL_ADC_Start_DMA+0x84>
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_ADC_Start_DMA+0x1a8>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d115      	bne.n	800392c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003916:	2b00      	cmp	r3, #0
 8003918:	d026      	beq.n	8003968 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003922:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800392a:	e01d      	b.n	8003968 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a39      	ldr	r2, [pc, #228]	; (8003a24 <HAL_ADC_Start_DMA+0x1a8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_ADC_Start_DMA+0xd0>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <HAL_ADC_Start_DMA+0x1ac>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10d      	bne.n	8003968 <HAL_ADC_Start_DMA+0xec>
 800394c:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <HAL_ADC_Start_DMA+0x1a8>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003960:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d006      	beq.n	8003982 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f023 0206 	bic.w	r2, r3, #6
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003980:	e002      	b.n	8003988 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <HAL_ADC_Start_DMA+0x1b0>)
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <HAL_ADC_Start_DMA+0x1b4>)
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <HAL_ADC_Start_DMA+0x1b8>)
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0202 	mvn.w	r2, #2
 80039b0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a18      	ldr	r0, [r3, #32]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	334c      	adds	r3, #76	; 0x4c
 80039cc:	4619      	mov	r1, r3
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f000 fbf9 	bl	80041c8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80039e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80039e4:	d108      	bne.n	80039f8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80039f4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80039f6:	e00f      	b.n	8003a18 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003a06:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003a08:	e006      	b.n	8003a18 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003a12:	e001      	b.n	8003a18 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40012400 	.word	0x40012400
 8003a28:	40012800 	.word	0x40012800
 8003a2c:	08003e2b 	.word	0x08003e2b
 8003a30:	08003ea7 	.word	0x08003ea7
 8003a34:	08003ec3 	.word	0x08003ec3

08003a38 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_Stop_DMA+0x1a>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e039      	b.n	8003ac6 <HAL_ADC_Stop_DMA+0x8e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9a4 	bl	8003da8 <ADC_ConversionStop_Disable>
 8003a60:	4603      	mov	r3, r0
 8003a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d128      	bne.n	8003abc <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a78:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d11a      	bne.n	8003abc <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fbfb 	bl	8004286 <HAL_DMA_Abort>
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
 8003aae:	e005      	b.n	8003abc <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x20>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0dc      	b.n	8003cde <HAL_ADC_ConfigChannel+0x1da>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d81c      	bhi.n	8003b6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	3b05      	subs	r3, #5
 8003b46:	221f      	movs	r2, #31
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	4019      	ands	r1, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3b05      	subs	r3, #5
 8003b60:	fa00 f203 	lsl.w	r2, r0, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	635a      	str	r2, [r3, #52]	; 0x34
 8003b6c:	e03c      	b.n	8003be8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	d81c      	bhi.n	8003bb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	3b23      	subs	r3, #35	; 0x23
 8003b88:	221f      	movs	r2, #31
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	4019      	ands	r1, r3
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3b23      	subs	r3, #35	; 0x23
 8003ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
 8003bae:	e01b      	b.n	8003be8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3b41      	subs	r3, #65	; 0x41
 8003bc2:	221f      	movs	r2, #31
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	4019      	ands	r1, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	3b41      	subs	r3, #65	; 0x41
 8003bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b09      	cmp	r3, #9
 8003bee:	d91c      	bls.n	8003c2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68d9      	ldr	r1, [r3, #12]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	3b1e      	subs	r3, #30
 8003c02:	2207      	movs	r2, #7
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	4019      	ands	r1, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6898      	ldr	r0, [r3, #8]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	3b1e      	subs	r3, #30
 8003c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	60da      	str	r2, [r3, #12]
 8003c28:	e019      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6919      	ldr	r1, [r3, #16]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	2207      	movs	r2, #7
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	4019      	ands	r1, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6898      	ldr	r0, [r3, #8]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	fa00 f203 	lsl.w	r2, r0, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d003      	beq.n	8003c6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c6a:	2b11      	cmp	r3, #17
 8003c6c:	d132      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d125      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d126      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d11a      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c9e:	4b13      	ldr	r3, [pc, #76]	; (8003cec <HAL_ADC_ConfigChannel+0x1e8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	0c9a      	lsrs	r2, r3, #18
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003cb4:	e002      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f9      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x1b2>
 8003cc2:	e007      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	40012400 	.word	0x40012400
 8003cec:	20000008 	.word	0x20000008
 8003cf0:	431bde83 	.word	0x431bde83

08003cf4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d040      	beq.n	8003d94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d22:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <ADC_Enable+0xac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <ADC_Enable+0xb0>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	0c9b      	lsrs	r3, r3, #18
 8003d2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d30:	e002      	b.n	8003d38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f9      	bne.n	8003d32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d3e:	f7ff fc97 	bl	8003670 <HAL_GetTick>
 8003d42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d44:	e01f      	b.n	8003d86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d46:	f7ff fc93 	bl	8003670 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d918      	bls.n	8003d86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d011      	beq.n	8003d86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	f043 0210 	orr.w	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f043 0201 	orr.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e007      	b.n	8003d96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d1d8      	bne.n	8003d46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000008 	.word	0x20000008
 8003da4:	431bde83 	.word	0x431bde83

08003da8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d12e      	bne.n	8003e20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dd2:	f7ff fc4d 	bl	8003670 <HAL_GetTick>
 8003dd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003dd8:	e01b      	b.n	8003e12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dda:	f7ff fc49 	bl	8003670 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d914      	bls.n	8003e12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d10d      	bne.n	8003e12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f043 0210 	orr.w	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e007      	b.n	8003e22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d0dc      	beq.n	8003dda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d127      	bne.n	8003e94 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003e5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e5e:	d115      	bne.n	8003e8c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d111      	bne.n	8003e8c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	f043 0201 	orr.w	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7ff fe1e 	bl	8003ace <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003e92:	e004      	b.n	8003e9e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff fe13 	bl	8003ae0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff fe02 	bl	8003af2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f08:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <__NVIC_SetPriorityGrouping+0x44>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f14:	4013      	ands	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f2a:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <__NVIC_SetPriorityGrouping+0x44>)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	60d3      	str	r3, [r2, #12]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <__NVIC_GetPriorityGrouping+0x18>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	f003 0307 	and.w	r3, r3, #7
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	db0b      	blt.n	8003f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	4906      	ldr	r1, [pc, #24]	; (8003f90 <__NVIC_EnableIRQ+0x34>)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	e000e100 	.word	0xe000e100

08003f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	db0a      	blt.n	8003fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	490c      	ldr	r1, [pc, #48]	; (8003fe0 <__NVIC_SetPriority+0x4c>)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	0112      	lsls	r2, r2, #4
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fbc:	e00a      	b.n	8003fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4908      	ldr	r1, [pc, #32]	; (8003fe4 <__NVIC_SetPriority+0x50>)
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	3b04      	subs	r3, #4
 8003fcc:	0112      	lsls	r2, r2, #4
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	761a      	strb	r2, [r3, #24]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000e100 	.word	0xe000e100
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	; 0x24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f1c3 0307 	rsb	r3, r3, #7
 8004002:	2b04      	cmp	r3, #4
 8004004:	bf28      	it	cs
 8004006:	2304      	movcs	r3, #4
 8004008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3304      	adds	r3, #4
 800400e:	2b06      	cmp	r3, #6
 8004010:	d902      	bls.n	8004018 <NVIC_EncodePriority+0x30>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3b03      	subs	r3, #3
 8004016:	e000      	b.n	800401a <NVIC_EncodePriority+0x32>
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800401c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	401a      	ands	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	43d9      	mvns	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004040:	4313      	orrs	r3, r2
         );
}
 8004042:	4618      	mov	r0, r3
 8004044:	3724      	adds	r7, #36	; 0x24
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800405c:	d301      	bcc.n	8004062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800405e:	2301      	movs	r3, #1
 8004060:	e00f      	b.n	8004082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004062:	4a0a      	ldr	r2, [pc, #40]	; (800408c <SysTick_Config+0x40>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3b01      	subs	r3, #1
 8004068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800406a:	210f      	movs	r1, #15
 800406c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004070:	f7ff ff90 	bl	8003f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <SysTick_Config+0x40>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800407a:	4b04      	ldr	r3, [pc, #16]	; (800408c <SysTick_Config+0x40>)
 800407c:	2207      	movs	r2, #7
 800407e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	e000e010 	.word	0xe000e010

08004090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff2d 	bl	8003ef8 <__NVIC_SetPriorityGrouping>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	4603      	mov	r3, r0
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040b8:	f7ff ff42 	bl	8003f40 <__NVIC_GetPriorityGrouping>
 80040bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7ff ff90 	bl	8003fe8 <NVIC_EncodePriority>
 80040c8:	4602      	mov	r2, r0
 80040ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ff5f 	bl	8003f94 <__NVIC_SetPriority>
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	4603      	mov	r3, r0
 80040e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff35 	bl	8003f5c <__NVIC_EnableIRQ>
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ffa2 	bl	800404c <SysTick_Config>
 8004108:	4603      	mov	r3, r0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e043      	b.n	80041b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	4b22      	ldr	r3, [pc, #136]	; (80041bc <HAL_DMA_Init+0xa8>)
 8004132:	4413      	add	r3, r2
 8004134:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <HAL_DMA_Init+0xac>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	009a      	lsls	r2, r3, #2
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <HAL_DMA_Init+0xb0>)
 8004146:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800415e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004162:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800416c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	bffdfff8 	.word	0xbffdfff8
 80041c0:	cccccccd 	.word	0xcccccccd
 80041c4:	40020000 	.word	0x40020000

080041c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_DMA_Start_IT+0x20>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e04a      	b.n	800427e <HAL_DMA_Start_IT+0xb6>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d13a      	bne.n	8004270 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2202      	movs	r2, #2
 80041fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f972 	bl	8004508 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 020e 	orr.w	r2, r2, #14
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e00f      	b.n	800425e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0204 	bic.w	r2, r2, #4
 800424c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 020a 	orr.w	r2, r2, #10
 800425c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e005      	b.n	800427c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004278:	2302      	movs	r3, #2
 800427a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800427c:	7dfb      	ldrb	r3, [r7, #23]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004298:	2b02      	cmp	r3, #2
 800429a:	d008      	beq.n	80042ae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2204      	movs	r2, #4
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e020      	b.n	80042f0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 020e 	bic.w	r2, r2, #14
 80042bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f202 	lsl.w	r2, r1, r2
 80042dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	2204      	movs	r2, #4
 800431a:	409a      	lsls	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d04f      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc8>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d04a      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0204 	bic.w	r2, r2, #4
 800434a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a66      	ldr	r2, [pc, #408]	; (80044ec <HAL_DMA_IRQHandler+0x1f0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d029      	beq.n	80043aa <HAL_DMA_IRQHandler+0xae>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a65      	ldr	r2, [pc, #404]	; (80044f0 <HAL_DMA_IRQHandler+0x1f4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xaa>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a63      	ldr	r2, [pc, #396]	; (80044f4 <HAL_DMA_IRQHandler+0x1f8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01a      	beq.n	80043a0 <HAL_DMA_IRQHandler+0xa4>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a62      	ldr	r2, [pc, #392]	; (80044f8 <HAL_DMA_IRQHandler+0x1fc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d012      	beq.n	800439a <HAL_DMA_IRQHandler+0x9e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a60      	ldr	r2, [pc, #384]	; (80044fc <HAL_DMA_IRQHandler+0x200>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00a      	beq.n	8004394 <HAL_DMA_IRQHandler+0x98>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a5f      	ldr	r2, [pc, #380]	; (8004500 <HAL_DMA_IRQHandler+0x204>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d102      	bne.n	800438e <HAL_DMA_IRQHandler+0x92>
 8004388:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800438c:	e00e      	b.n	80043ac <HAL_DMA_IRQHandler+0xb0>
 800438e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004392:	e00b      	b.n	80043ac <HAL_DMA_IRQHandler+0xb0>
 8004394:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004398:	e008      	b.n	80043ac <HAL_DMA_IRQHandler+0xb0>
 800439a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800439e:	e005      	b.n	80043ac <HAL_DMA_IRQHandler+0xb0>
 80043a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043a4:	e002      	b.n	80043ac <HAL_DMA_IRQHandler+0xb0>
 80043a6:	2340      	movs	r3, #64	; 0x40
 80043a8:	e000      	b.n	80043ac <HAL_DMA_IRQHandler+0xb0>
 80043aa:	2304      	movs	r3, #4
 80043ac:	4a55      	ldr	r2, [pc, #340]	; (8004504 <HAL_DMA_IRQHandler+0x208>)
 80043ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8094 	beq.w	80044e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80043c2:	e08e      	b.n	80044e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	2202      	movs	r2, #2
 80043ca:	409a      	lsls	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d056      	beq.n	8004482 <HAL_DMA_IRQHandler+0x186>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d051      	beq.n	8004482 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 020a 	bic.w	r2, r2, #10
 80043fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a38      	ldr	r2, [pc, #224]	; (80044ec <HAL_DMA_IRQHandler+0x1f0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d029      	beq.n	8004462 <HAL_DMA_IRQHandler+0x166>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a37      	ldr	r2, [pc, #220]	; (80044f0 <HAL_DMA_IRQHandler+0x1f4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d022      	beq.n	800445e <HAL_DMA_IRQHandler+0x162>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a35      	ldr	r2, [pc, #212]	; (80044f4 <HAL_DMA_IRQHandler+0x1f8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01a      	beq.n	8004458 <HAL_DMA_IRQHandler+0x15c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a34      	ldr	r2, [pc, #208]	; (80044f8 <HAL_DMA_IRQHandler+0x1fc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d012      	beq.n	8004452 <HAL_DMA_IRQHandler+0x156>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a32      	ldr	r2, [pc, #200]	; (80044fc <HAL_DMA_IRQHandler+0x200>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00a      	beq.n	800444c <HAL_DMA_IRQHandler+0x150>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a31      	ldr	r2, [pc, #196]	; (8004500 <HAL_DMA_IRQHandler+0x204>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d102      	bne.n	8004446 <HAL_DMA_IRQHandler+0x14a>
 8004440:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004444:	e00e      	b.n	8004464 <HAL_DMA_IRQHandler+0x168>
 8004446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800444a:	e00b      	b.n	8004464 <HAL_DMA_IRQHandler+0x168>
 800444c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004450:	e008      	b.n	8004464 <HAL_DMA_IRQHandler+0x168>
 8004452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004456:	e005      	b.n	8004464 <HAL_DMA_IRQHandler+0x168>
 8004458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800445c:	e002      	b.n	8004464 <HAL_DMA_IRQHandler+0x168>
 800445e:	2320      	movs	r3, #32
 8004460:	e000      	b.n	8004464 <HAL_DMA_IRQHandler+0x168>
 8004462:	2302      	movs	r3, #2
 8004464:	4a27      	ldr	r2, [pc, #156]	; (8004504 <HAL_DMA_IRQHandler+0x208>)
 8004466:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d034      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004480:	e02f      	b.n	80044e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2208      	movs	r2, #8
 8004488:	409a      	lsls	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d028      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x1e8>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d023      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 020e 	bic.w	r2, r2, #14
 80044aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f202 	lsl.w	r2, r1, r2
 80044ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d004      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
    }
  }
  return;
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
}
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40020008 	.word	0x40020008
 80044f0:	4002001c 	.word	0x4002001c
 80044f4:	40020030 	.word	0x40020030
 80044f8:	40020044 	.word	0x40020044
 80044fc:	40020058 	.word	0x40020058
 8004500:	4002006c 	.word	0x4002006c
 8004504:	40020000 	.word	0x40020000

08004508 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	2101      	movs	r1, #1
 8004520:	fa01 f202 	lsl.w	r2, r1, r2
 8004524:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b10      	cmp	r3, #16
 8004534:	d108      	bne.n	8004548 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004546:	e007      	b.n	8004558 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr
	...

08004564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004564:	b480      	push	{r7}
 8004566:	b08b      	sub	sp, #44	; 0x2c
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004572:	2300      	movs	r3, #0
 8004574:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004576:	e169      	b.n	800484c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004578:	2201      	movs	r2, #1
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	429a      	cmp	r2, r3
 8004592:	f040 8158 	bne.w	8004846 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4a9a      	ldr	r2, [pc, #616]	; (8004804 <HAL_GPIO_Init+0x2a0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d05e      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045a0:	4a98      	ldr	r2, [pc, #608]	; (8004804 <HAL_GPIO_Init+0x2a0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d875      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045a6:	4a98      	ldr	r2, [pc, #608]	; (8004808 <HAL_GPIO_Init+0x2a4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d058      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045ac:	4a96      	ldr	r2, [pc, #600]	; (8004808 <HAL_GPIO_Init+0x2a4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d86f      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045b2:	4a96      	ldr	r2, [pc, #600]	; (800480c <HAL_GPIO_Init+0x2a8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d052      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045b8:	4a94      	ldr	r2, [pc, #592]	; (800480c <HAL_GPIO_Init+0x2a8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d869      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045be:	4a94      	ldr	r2, [pc, #592]	; (8004810 <HAL_GPIO_Init+0x2ac>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d04c      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045c4:	4a92      	ldr	r2, [pc, #584]	; (8004810 <HAL_GPIO_Init+0x2ac>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d863      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045ca:	4a92      	ldr	r2, [pc, #584]	; (8004814 <HAL_GPIO_Init+0x2b0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d046      	beq.n	800465e <HAL_GPIO_Init+0xfa>
 80045d0:	4a90      	ldr	r2, [pc, #576]	; (8004814 <HAL_GPIO_Init+0x2b0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d85d      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045d6:	2b12      	cmp	r3, #18
 80045d8:	d82a      	bhi.n	8004630 <HAL_GPIO_Init+0xcc>
 80045da:	2b12      	cmp	r3, #18
 80045dc:	d859      	bhi.n	8004692 <HAL_GPIO_Init+0x12e>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_GPIO_Init+0x80>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	0800465f 	.word	0x0800465f
 80045e8:	08004639 	.word	0x08004639
 80045ec:	0800464b 	.word	0x0800464b
 80045f0:	0800468d 	.word	0x0800468d
 80045f4:	08004693 	.word	0x08004693
 80045f8:	08004693 	.word	0x08004693
 80045fc:	08004693 	.word	0x08004693
 8004600:	08004693 	.word	0x08004693
 8004604:	08004693 	.word	0x08004693
 8004608:	08004693 	.word	0x08004693
 800460c:	08004693 	.word	0x08004693
 8004610:	08004693 	.word	0x08004693
 8004614:	08004693 	.word	0x08004693
 8004618:	08004693 	.word	0x08004693
 800461c:	08004693 	.word	0x08004693
 8004620:	08004693 	.word	0x08004693
 8004624:	08004693 	.word	0x08004693
 8004628:	08004641 	.word	0x08004641
 800462c:	08004655 	.word	0x08004655
 8004630:	4a79      	ldr	r2, [pc, #484]	; (8004818 <HAL_GPIO_Init+0x2b4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004636:	e02c      	b.n	8004692 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	623b      	str	r3, [r7, #32]
          break;
 800463e:	e029      	b.n	8004694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	3304      	adds	r3, #4
 8004646:	623b      	str	r3, [r7, #32]
          break;
 8004648:	e024      	b.n	8004694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	3308      	adds	r3, #8
 8004650:	623b      	str	r3, [r7, #32]
          break;
 8004652:	e01f      	b.n	8004694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	330c      	adds	r3, #12
 800465a:	623b      	str	r3, [r7, #32]
          break;
 800465c:	e01a      	b.n	8004694 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004666:	2304      	movs	r3, #4
 8004668:	623b      	str	r3, [r7, #32]
          break;
 800466a:	e013      	b.n	8004694 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004674:	2308      	movs	r3, #8
 8004676:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	611a      	str	r2, [r3, #16]
          break;
 800467e:	e009      	b.n	8004694 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004680:	2308      	movs	r3, #8
 8004682:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	615a      	str	r2, [r3, #20]
          break;
 800468a:	e003      	b.n	8004694 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800468c:	2300      	movs	r3, #0
 800468e:	623b      	str	r3, [r7, #32]
          break;
 8004690:	e000      	b.n	8004694 <HAL_GPIO_Init+0x130>
          break;
 8004692:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2bff      	cmp	r3, #255	; 0xff
 8004698:	d801      	bhi.n	800469e <HAL_GPIO_Init+0x13a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	e001      	b.n	80046a2 <HAL_GPIO_Init+0x13e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2bff      	cmp	r3, #255	; 0xff
 80046a8:	d802      	bhi.n	80046b0 <HAL_GPIO_Init+0x14c>
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	e002      	b.n	80046b6 <HAL_GPIO_Init+0x152>
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	3b08      	subs	r3, #8
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	210f      	movs	r1, #15
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	401a      	ands	r2, r3
 80046c8:	6a39      	ldr	r1, [r7, #32]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	431a      	orrs	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80b1 	beq.w	8004846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046e4:	4b4d      	ldr	r3, [pc, #308]	; (800481c <HAL_GPIO_Init+0x2b8>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	4a4c      	ldr	r2, [pc, #304]	; (800481c <HAL_GPIO_Init+0x2b8>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6193      	str	r3, [r2, #24]
 80046f0:	4b4a      	ldr	r3, [pc, #296]	; (800481c <HAL_GPIO_Init+0x2b8>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046fc:	4a48      	ldr	r2, [pc, #288]	; (8004820 <HAL_GPIO_Init+0x2bc>)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	089b      	lsrs	r3, r3, #2
 8004702:	3302      	adds	r3, #2
 8004704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004708:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	220f      	movs	r2, #15
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a40      	ldr	r2, [pc, #256]	; (8004824 <HAL_GPIO_Init+0x2c0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d013      	beq.n	8004750 <HAL_GPIO_Init+0x1ec>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <HAL_GPIO_Init+0x2c4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00d      	beq.n	800474c <HAL_GPIO_Init+0x1e8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3e      	ldr	r2, [pc, #248]	; (800482c <HAL_GPIO_Init+0x2c8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <HAL_GPIO_Init+0x1e4>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a3d      	ldr	r2, [pc, #244]	; (8004830 <HAL_GPIO_Init+0x2cc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d101      	bne.n	8004744 <HAL_GPIO_Init+0x1e0>
 8004740:	2303      	movs	r3, #3
 8004742:	e006      	b.n	8004752 <HAL_GPIO_Init+0x1ee>
 8004744:	2304      	movs	r3, #4
 8004746:	e004      	b.n	8004752 <HAL_GPIO_Init+0x1ee>
 8004748:	2302      	movs	r3, #2
 800474a:	e002      	b.n	8004752 <HAL_GPIO_Init+0x1ee>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_GPIO_Init+0x1ee>
 8004750:	2300      	movs	r3, #0
 8004752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004754:	f002 0203 	and.w	r2, r2, #3
 8004758:	0092      	lsls	r2, r2, #2
 800475a:	4093      	lsls	r3, r2
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004762:	492f      	ldr	r1, [pc, #188]	; (8004820 <HAL_GPIO_Init+0x2bc>)
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	3302      	adds	r3, #2
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d006      	beq.n	800478a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800477c:	4b2d      	ldr	r3, [pc, #180]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	492c      	ldr	r1, [pc, #176]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	600b      	str	r3, [r1, #0]
 8004788:	e006      	b.n	8004798 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800478a:	4b2a      	ldr	r3, [pc, #168]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	43db      	mvns	r3, r3
 8004792:	4928      	ldr	r1, [pc, #160]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 8004794:	4013      	ands	r3, r2
 8004796:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047a4:	4b23      	ldr	r3, [pc, #140]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4922      	ldr	r1, [pc, #136]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
 80047b0:	e006      	b.n	80047c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047b2:	4b20      	ldr	r3, [pc, #128]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	491e      	ldr	r1, [pc, #120]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047bc:	4013      	ands	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d006      	beq.n	80047da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	4918      	ldr	r1, [pc, #96]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
 80047d8:	e006      	b.n	80047e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047da:	4b16      	ldr	r3, [pc, #88]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	4914      	ldr	r1, [pc, #80]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d021      	beq.n	8004838 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	490e      	ldr	r1, [pc, #56]	; (8004834 <HAL_GPIO_Init+0x2d0>)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60cb      	str	r3, [r1, #12]
 8004800:	e021      	b.n	8004846 <HAL_GPIO_Init+0x2e2>
 8004802:	bf00      	nop
 8004804:	10320000 	.word	0x10320000
 8004808:	10310000 	.word	0x10310000
 800480c:	10220000 	.word	0x10220000
 8004810:	10210000 	.word	0x10210000
 8004814:	10120000 	.word	0x10120000
 8004818:	10110000 	.word	0x10110000
 800481c:	40021000 	.word	0x40021000
 8004820:	40010000 	.word	0x40010000
 8004824:	40010800 	.word	0x40010800
 8004828:	40010c00 	.word	0x40010c00
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_GPIO_Init+0x304>)
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	43db      	mvns	r3, r3
 8004840:	4909      	ldr	r1, [pc, #36]	; (8004868 <HAL_GPIO_Init+0x304>)
 8004842:	4013      	ands	r3, r2
 8004844:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	3301      	adds	r3, #1
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	f47f ae8e 	bne.w	8004578 <HAL_GPIO_Init+0x14>
  }
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	372c      	adds	r7, #44	; 0x2c
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr
 8004868:	40010400 	.word	0x40010400

0800486c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	807b      	strh	r3, [r7, #2]
 8004878:	4613      	mov	r3, r2
 800487a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800487c:	787b      	ldrb	r3, [r7, #1]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004888:	e003      	b.n	8004892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800488a:	887b      	ldrh	r3, [r7, #2]
 800488c:	041a      	lsls	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048a6:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d006      	beq.n	80048c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048b2:	4a05      	ldr	r2, [pc, #20]	; (80048c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe f8c6 	bl	8002a4c <HAL_GPIO_EXTI_Callback>
  }
}
 80048c0:	bf00      	nop
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40010400 	.word	0x40010400

080048cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e12b      	b.n	8004b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fe fbea 	bl	80030cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2224      	movs	r2, #36	; 0x24
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800492e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004930:	f002 f8ac 	bl	8006a8c <HAL_RCC_GetPCLK1Freq>
 8004934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4a81      	ldr	r2, [pc, #516]	; (8004b40 <HAL_I2C_Init+0x274>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d807      	bhi.n	8004950 <HAL_I2C_Init+0x84>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a80      	ldr	r2, [pc, #512]	; (8004b44 <HAL_I2C_Init+0x278>)
 8004944:	4293      	cmp	r3, r2
 8004946:	bf94      	ite	ls
 8004948:	2301      	movls	r3, #1
 800494a:	2300      	movhi	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	e006      	b.n	800495e <HAL_I2C_Init+0x92>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a7d      	ldr	r2, [pc, #500]	; (8004b48 <HAL_I2C_Init+0x27c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	bf94      	ite	ls
 8004958:	2301      	movls	r3, #1
 800495a:	2300      	movhi	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e0e7      	b.n	8004b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a78      	ldr	r2, [pc, #480]	; (8004b4c <HAL_I2C_Init+0x280>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	0c9b      	lsrs	r3, r3, #18
 8004970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a6a      	ldr	r2, [pc, #424]	; (8004b40 <HAL_I2C_Init+0x274>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d802      	bhi.n	80049a0 <HAL_I2C_Init+0xd4>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	3301      	adds	r3, #1
 800499e:	e009      	b.n	80049b4 <HAL_I2C_Init+0xe8>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	4a69      	ldr	r2, [pc, #420]	; (8004b50 <HAL_I2C_Init+0x284>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	3301      	adds	r3, #1
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6812      	ldr	r2, [r2, #0]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	495c      	ldr	r1, [pc, #368]	; (8004b40 <HAL_I2C_Init+0x274>)
 80049d0:	428b      	cmp	r3, r1
 80049d2:	d819      	bhi.n	8004a08 <HAL_I2C_Init+0x13c>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1e59      	subs	r1, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	fbb1 f3f3 	udiv	r3, r1, r3
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049e8:	400b      	ands	r3, r1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_I2C_Init+0x138>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1e59      	subs	r1, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fc:	3301      	adds	r3, #1
 80049fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a02:	e051      	b.n	8004aa8 <HAL_I2C_Init+0x1dc>
 8004a04:	2304      	movs	r3, #4
 8004a06:	e04f      	b.n	8004aa8 <HAL_I2C_Init+0x1dc>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d111      	bne.n	8004a34 <HAL_I2C_Init+0x168>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1e58      	subs	r0, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6859      	ldr	r1, [r3, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	440b      	add	r3, r1
 8004a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a22:	3301      	adds	r3, #1
 8004a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e012      	b.n	8004a5a <HAL_I2C_Init+0x18e>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1e58      	subs	r0, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6859      	ldr	r1, [r3, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	0099      	lsls	r1, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bf0c      	ite	eq
 8004a54:	2301      	moveq	r3, #1
 8004a56:	2300      	movne	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_I2C_Init+0x196>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e022      	b.n	8004aa8 <HAL_I2C_Init+0x1dc>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10e      	bne.n	8004a88 <HAL_I2C_Init+0x1bc>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1e58      	subs	r0, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	440b      	add	r3, r1
 8004a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	e00f      	b.n	8004aa8 <HAL_I2C_Init+0x1dc>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1e58      	subs	r0, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	0099      	lsls	r1, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	6809      	ldr	r1, [r1, #0]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6911      	ldr	r1, [r2, #16]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68d2      	ldr	r2, [r2, #12]
 8004ae2:	4311      	orrs	r1, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	000186a0 	.word	0x000186a0
 8004b44:	001e847f 	.word	0x001e847f
 8004b48:	003d08ff 	.word	0x003d08ff
 8004b4c:	431bde83 	.word	0x431bde83
 8004b50:	10624dd3 	.word	0x10624dd3

08004b54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	460b      	mov	r3, r1
 8004b62:	817b      	strh	r3, [r7, #10]
 8004b64:	4613      	mov	r3, r2
 8004b66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b68:	f7fe fd82 	bl	8003670 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	f040 80e0 	bne.w	8004d3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	2319      	movs	r3, #25
 8004b82:	2201      	movs	r2, #1
 8004b84:	4970      	ldr	r1, [pc, #448]	; (8004d48 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f001 f972 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
 8004b94:	e0d3      	b.n	8004d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_I2C_Master_Transmit+0x50>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e0cc      	b.n	8004d3e <HAL_I2C_Master_Transmit+0x1ea>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d007      	beq.n	8004bca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0201 	orr.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2221      	movs	r2, #33	; 0x21
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2210      	movs	r2, #16
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	893a      	ldrh	r2, [r7, #8]
 8004bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a50      	ldr	r2, [pc, #320]	; (8004d4c <HAL_I2C_Master_Transmit+0x1f8>)
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c0c:	8979      	ldrh	r1, [r7, #10]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fe5e 	bl	80058d4 <I2C_MasterRequestWrite>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e08d      	b.n	8004d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c38:	e066      	b.n	8004d08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	6a39      	ldr	r1, [r7, #32]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f001 f9ec 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00d      	beq.n	8004c66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d107      	bne.n	8004c62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e06b      	b.n	8004d3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d11b      	bne.n	8004cdc <HAL_I2C_Master_Transmit+0x188>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d017      	beq.n	8004cdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	6a39      	ldr	r1, [r7, #32]
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f001 f9dc 	bl	800609e <I2C_WaitOnBTFFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00d      	beq.n	8004d08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d107      	bne.n	8004d04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e01a      	b.n	8004d3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d194      	bne.n	8004c3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e000      	b.n	8004d3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
  }
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	00100002 	.word	0x00100002
 8004d4c:	ffff0000 	.word	0xffff0000

08004d50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08c      	sub	sp, #48	; 0x30
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	817b      	strh	r3, [r7, #10]
 8004d60:	4613      	mov	r3, r2
 8004d62:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d68:	f7fe fc82 	bl	8003670 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	f040 823f 	bne.w	80051fa <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2319      	movs	r3, #25
 8004d82:	2201      	movs	r2, #1
 8004d84:	497f      	ldr	r1, [pc, #508]	; (8004f84 <HAL_I2C_Master_Receive+0x234>)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f001 f872 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
 8004d94:	e232      	b.n	80051fc <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_I2C_Master_Receive+0x54>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e22b      	b.n	80051fc <HAL_I2C_Master_Receive+0x4ac>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d007      	beq.n	8004dca <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2222      	movs	r2, #34	; 0x22
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2210      	movs	r2, #16
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	893a      	ldrh	r2, [r7, #8]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4a5f      	ldr	r2, [pc, #380]	; (8004f88 <HAL_I2C_Master_Receive+0x238>)
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e0c:	8979      	ldrh	r1, [r7, #10]
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fde0 	bl	80059d8 <I2C_MasterRequestRead>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e1ec      	b.n	80051fc <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d113      	bne.n	8004e52 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e1c0      	b.n	80051d4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d11e      	bne.n	8004e98 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e6a:	b672      	cpsid	i
}
 8004e6c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e94:	b662      	cpsie	i
}
 8004e96:	e035      	b.n	8004f04 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d11e      	bne.n	8004ede <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb0:	b672      	cpsid	i
}
 8004eb2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004eda:	b662      	cpsie	i
}
 8004edc:	e012      	b.n	8004f04 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004f04:	e166      	b.n	80051d4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	f200 811f 	bhi.w	800514e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d123      	bne.n	8004f60 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f001 f8ff 	bl	8006120 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e167      	b.n	80051fc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f5e:	e139      	b.n	80051d4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d152      	bne.n	800500e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	2200      	movs	r2, #0
 8004f70:	4906      	ldr	r1, [pc, #24]	; (8004f8c <HAL_I2C_Master_Receive+0x23c>)
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 ff7c 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e13c      	b.n	80051fc <HAL_I2C_Master_Receive+0x4ac>
 8004f82:	bf00      	nop
 8004f84:	00100002 	.word	0x00100002
 8004f88:	ffff0000 	.word	0xffff0000
 8004f8c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004f90:	b672      	cpsid	i
}
 8004f92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004fd6:	b662      	cpsie	i
}
 8004fd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800500c:	e0e2      	b.n	80051d4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	2200      	movs	r2, #0
 8005016:	497b      	ldr	r1, [pc, #492]	; (8005204 <HAL_I2C_Master_Receive+0x4b4>)
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 ff29 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0e9      	b.n	80051fc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005036:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005038:	b672      	cpsid	i
}
 800503a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800506e:	4b66      	ldr	r3, [pc, #408]	; (8005208 <HAL_I2C_Master_Receive+0x4b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	08db      	lsrs	r3, r3, #3
 8005074:	4a65      	ldr	r2, [pc, #404]	; (800520c <HAL_I2C_Master_Receive+0x4bc>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0a1a      	lsrs	r2, r3, #8
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	00da      	lsls	r2, r3, #3
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	3b01      	subs	r3, #1
 800508c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d118      	bne.n	80050c6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80050b6:	b662      	cpsie	i
}
 80050b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e09a      	b.n	80051fc <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d1d9      	bne.n	8005088 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005116:	b662      	cpsie	i
}
 8005118:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800514c:	e042      	b.n	80051d4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 ffe4 	bl	8006120 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e04c      	b.n	80051fc <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d118      	bne.n	80051d4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f47f ae94 	bne.w	8004f06 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e000      	b.n	80051fc <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
  }
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3728      	adds	r7, #40	; 0x28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	00010004 	.word	0x00010004
 8005208:	20000008 	.word	0x20000008
 800520c:	14f8b589 	.word	0x14f8b589

08005210 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	4608      	mov	r0, r1
 800521a:	4611      	mov	r1, r2
 800521c:	461a      	mov	r2, r3
 800521e:	4603      	mov	r3, r0
 8005220:	817b      	strh	r3, [r7, #10]
 8005222:	460b      	mov	r3, r1
 8005224:	813b      	strh	r3, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800522a:	f7fe fa21 	bl	8003670 <HAL_GetTick>
 800522e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b20      	cmp	r3, #32
 800523a:	f040 80d9 	bne.w	80053f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	2319      	movs	r3, #25
 8005244:	2201      	movs	r2, #1
 8005246:	496d      	ldr	r1, [pc, #436]	; (80053fc <HAL_I2C_Mem_Write+0x1ec>)
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fe11 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005254:	2302      	movs	r3, #2
 8005256:	e0cc      	b.n	80053f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_I2C_Mem_Write+0x56>
 8005262:	2302      	movs	r3, #2
 8005264:	e0c5      	b.n	80053f2 <HAL_I2C_Mem_Write+0x1e2>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d007      	beq.n	800528c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800529a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2221      	movs	r2, #33	; 0x21
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2240      	movs	r2, #64	; 0x40
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a3a      	ldr	r2, [r7, #32]
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4a4d      	ldr	r2, [pc, #308]	; (8005400 <HAL_I2C_Mem_Write+0x1f0>)
 80052cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ce:	88f8      	ldrh	r0, [r7, #6]
 80052d0:	893a      	ldrh	r2, [r7, #8]
 80052d2:	8979      	ldrh	r1, [r7, #10]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	4603      	mov	r3, r0
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fc48 	bl	8005b74 <I2C_RequestMemoryWrite>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d052      	beq.n	8005390 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e081      	b.n	80053f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fe92 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b04      	cmp	r3, #4
 8005304:	d107      	bne.n	8005316 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005314:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e06b      	b.n	80053f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	781a      	ldrb	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b04      	cmp	r3, #4
 8005356:	d11b      	bne.n	8005390 <HAL_I2C_Mem_Write+0x180>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	d017      	beq.n	8005390 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	781a      	ldrb	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1aa      	bne.n	80052ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fe7e 	bl	800609e <I2C_WaitOnBTFFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00d      	beq.n	80053c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d107      	bne.n	80053c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e016      	b.n	80053f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e000      	b.n	80053f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	00100002 	.word	0x00100002
 8005400:	ffff0000 	.word	0xffff0000

08005404 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08c      	sub	sp, #48	; 0x30
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	4608      	mov	r0, r1
 800540e:	4611      	mov	r1, r2
 8005410:	461a      	mov	r2, r3
 8005412:	4603      	mov	r3, r0
 8005414:	817b      	strh	r3, [r7, #10]
 8005416:	460b      	mov	r3, r1
 8005418:	813b      	strh	r3, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005422:	f7fe f925 	bl	8003670 <HAL_GetTick>
 8005426:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b20      	cmp	r3, #32
 8005432:	f040 8244 	bne.w	80058be <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	2319      	movs	r3, #25
 800543c:	2201      	movs	r2, #1
 800543e:	4982      	ldr	r1, [pc, #520]	; (8005648 <HAL_I2C_Mem_Read+0x244>)
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fd15 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800544c:	2302      	movs	r3, #2
 800544e:	e237      	b.n	80058c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_I2C_Mem_Read+0x5a>
 800545a:	2302      	movs	r3, #2
 800545c:	e230      	b.n	80058c0 <HAL_I2C_Mem_Read+0x4bc>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b01      	cmp	r3, #1
 8005472:	d007      	beq.n	8005484 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2222      	movs	r2, #34	; 0x22
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2240      	movs	r2, #64	; 0x40
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80054b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a62      	ldr	r2, [pc, #392]	; (800564c <HAL_I2C_Mem_Read+0x248>)
 80054c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054c6:	88f8      	ldrh	r0, [r7, #6]
 80054c8:	893a      	ldrh	r2, [r7, #8]
 80054ca:	8979      	ldrh	r1, [r7, #10]
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	4603      	mov	r3, r0
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fbe2 	bl	8005ca0 <I2C_RequestMemoryRead>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e1ec      	b.n	80058c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d113      	bne.n	8005516 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e1c0      	b.n	8005898 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551a:	2b01      	cmp	r3, #1
 800551c:	d11e      	bne.n	800555c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800552e:	b672      	cpsid	i
}
 8005530:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005532:	2300      	movs	r3, #0
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005556:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005558:	b662      	cpsie	i
}
 800555a:	e035      	b.n	80055c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005560:	2b02      	cmp	r3, #2
 8005562:	d11e      	bne.n	80055a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005572:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005574:	b672      	cpsid	i
}
 8005576:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800559e:	b662      	cpsie	i
}
 80055a0:	e012      	b.n	80055c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b2:	2300      	movs	r3, #0
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80055c8:	e166      	b.n	8005898 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	f200 811f 	bhi.w	8005812 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d123      	bne.n	8005624 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fd9d 	bl	8006120 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e167      	b.n	80058c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005622:	e139      	b.n	8005898 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005628:	2b02      	cmp	r3, #2
 800562a:	d152      	bne.n	80056d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	2200      	movs	r2, #0
 8005634:	4906      	ldr	r1, [pc, #24]	; (8005650 <HAL_I2C_Mem_Read+0x24c>)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fc1a 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e13c      	b.n	80058c0 <HAL_I2C_Mem_Read+0x4bc>
 8005646:	bf00      	nop
 8005648:	00100002 	.word	0x00100002
 800564c:	ffff0000 	.word	0xffff0000
 8005650:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005654:	b672      	cpsid	i
}
 8005656:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800569a:	b662      	cpsie	i
}
 800569c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056d0:	e0e2      	b.n	8005898 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	2200      	movs	r2, #0
 80056da:	497b      	ldr	r1, [pc, #492]	; (80058c8 <HAL_I2C_Mem_Read+0x4c4>)
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fbc7 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0e9      	b.n	80058c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056fc:	b672      	cpsid	i
}
 80056fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005732:	4b66      	ldr	r3, [pc, #408]	; (80058cc <HAL_I2C_Mem_Read+0x4c8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	08db      	lsrs	r3, r3, #3
 8005738:	4a65      	ldr	r2, [pc, #404]	; (80058d0 <HAL_I2C_Mem_Read+0x4cc>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	0a1a      	lsrs	r2, r3, #8
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	00da      	lsls	r2, r3, #3
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	3b01      	subs	r3, #1
 8005750:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d118      	bne.n	800578a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800577a:	b662      	cpsie	i
}
 800577c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e09a      	b.n	80058c0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d1d9      	bne.n	800574c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80057da:	b662      	cpsie	i
}
 80057dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005810:	e042      	b.n	8005898 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005814:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fc82 	bl	8006120 <I2C_WaitOnRXNEFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e04c      	b.n	80058c0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b04      	cmp	r3, #4
 8005864:	d118      	bne.n	8005898 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	f47f ae94 	bne.w	80055ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e000      	b.n	80058c0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
  }
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3728      	adds	r7, #40	; 0x28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	00010004 	.word	0x00010004
 80058cc:	20000008 	.word	0x20000008
 80058d0:	14f8b589 	.word	0x14f8b589

080058d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	460b      	mov	r3, r1
 80058e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d006      	beq.n	80058fe <I2C_MasterRequestWrite+0x2a>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d003      	beq.n	80058fe <I2C_MasterRequestWrite+0x2a>
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058fc:	d108      	bne.n	8005910 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e00b      	b.n	8005928 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	2b12      	cmp	r3, #18
 8005916:	d107      	bne.n	8005928 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005926:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 fa9b 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00d      	beq.n	800595c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594e:	d103      	bne.n	8005958 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005956:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e035      	b.n	80059c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005964:	d108      	bne.n	8005978 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005966:	897b      	ldrh	r3, [r7, #10]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005974:	611a      	str	r2, [r3, #16]
 8005976:	e01b      	b.n	80059b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005978:	897b      	ldrh	r3, [r7, #10]
 800597a:	11db      	asrs	r3, r3, #7
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f003 0306 	and.w	r3, r3, #6
 8005982:	b2db      	uxtb	r3, r3
 8005984:	f063 030f 	orn	r3, r3, #15
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	490e      	ldr	r1, [pc, #56]	; (80059d0 <I2C_MasterRequestWrite+0xfc>)
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 fac1 	bl	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e010      	b.n	80059c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059a6:	897b      	ldrh	r3, [r7, #10]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	4907      	ldr	r1, [pc, #28]	; (80059d4 <I2C_MasterRequestWrite+0x100>)
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 fab1 	bl	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	00010008 	.word	0x00010008
 80059d4:	00010002 	.word	0x00010002

080059d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	460b      	mov	r3, r1
 80059e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d006      	beq.n	8005a12 <I2C_MasterRequestRead+0x3a>
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d003      	beq.n	8005a12 <I2C_MasterRequestRead+0x3a>
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a10:	d108      	bne.n	8005a24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	e00b      	b.n	8005a3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	2b11      	cmp	r3, #17
 8005a2a:	d107      	bne.n	8005a3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fa11 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00d      	beq.n	8005a70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a62:	d103      	bne.n	8005a6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e079      	b.n	8005b64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a78:	d108      	bne.n	8005a8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a7a:	897b      	ldrh	r3, [r7, #10]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	611a      	str	r2, [r3, #16]
 8005a8a:	e05f      	b.n	8005b4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a8c:	897b      	ldrh	r3, [r7, #10]
 8005a8e:	11db      	asrs	r3, r3, #7
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f003 0306 	and.w	r3, r3, #6
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f063 030f 	orn	r3, r3, #15
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4930      	ldr	r1, [pc, #192]	; (8005b6c <I2C_MasterRequestRead+0x194>)
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fa37 	bl	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e054      	b.n	8005b64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005aba:	897b      	ldrh	r3, [r7, #10]
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4929      	ldr	r1, [pc, #164]	; (8005b70 <I2C_MasterRequestRead+0x198>)
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa27 	bl	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e044      	b.n	8005b64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005afe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f9af 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00d      	beq.n	8005b34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b26:	d103      	bne.n	8005b30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e017      	b.n	8005b64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b34:	897b      	ldrh	r3, [r7, #10]
 8005b36:	11db      	asrs	r3, r3, #7
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 0306 	and.w	r3, r3, #6
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f063 030e 	orn	r3, r3, #14
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	4907      	ldr	r1, [pc, #28]	; (8005b70 <I2C_MasterRequestRead+0x198>)
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f9e3 	bl	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	00010008 	.word	0x00010008
 8005b70:	00010002 	.word	0x00010002

08005b74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	461a      	mov	r2, r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	817b      	strh	r3, [r7, #10]
 8005b86:	460b      	mov	r3, r1
 8005b88:	813b      	strh	r3, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f960 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00d      	beq.n	8005bd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc4:	d103      	bne.n	8005bce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e05f      	b.n	8005c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bd2:	897b      	ldrh	r3, [r7, #10]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005be0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	6a3a      	ldr	r2, [r7, #32]
 8005be6:	492d      	ldr	r1, [pc, #180]	; (8005c9c <I2C_RequestMemoryWrite+0x128>)
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f998 	bl	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e04c      	b.n	8005c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c10:	6a39      	ldr	r1, [r7, #32]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fa02 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00d      	beq.n	8005c3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d107      	bne.n	8005c36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e02b      	b.n	8005c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d105      	bne.n	8005c4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c40:	893b      	ldrh	r3, [r7, #8]
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	611a      	str	r2, [r3, #16]
 8005c4a:	e021      	b.n	8005c90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c4c:	893b      	ldrh	r3, [r7, #8]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5c:	6a39      	ldr	r1, [r7, #32]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f9dc 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d107      	bne.n	8005c82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e005      	b.n	8005c92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c86:	893b      	ldrh	r3, [r7, #8]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	00010002 	.word	0x00010002

08005ca0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	4608      	mov	r0, r1
 8005caa:	4611      	mov	r1, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	817b      	strh	r3, [r7, #10]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	813b      	strh	r3, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f8c2 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00d      	beq.n	8005d0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d00:	d103      	bne.n	8005d0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e0aa      	b.n	8005e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d0e:	897b      	ldrh	r3, [r7, #10]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	6a3a      	ldr	r2, [r7, #32]
 8005d22:	4952      	ldr	r1, [pc, #328]	; (8005e6c <I2C_RequestMemoryRead+0x1cc>)
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f8fa 	bl	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e097      	b.n	8005e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4c:	6a39      	ldr	r1, [r7, #32]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f964 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d107      	bne.n	8005d72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e076      	b.n	8005e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d105      	bne.n	8005d88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d7c:	893b      	ldrh	r3, [r7, #8]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	611a      	str	r2, [r3, #16]
 8005d86:	e021      	b.n	8005dcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d88:	893b      	ldrh	r3, [r7, #8]
 8005d8a:	0a1b      	lsrs	r3, r3, #8
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d98:	6a39      	ldr	r1, [r7, #32]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f93e 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00d      	beq.n	8005dc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d107      	bne.n	8005dbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e050      	b.n	8005e64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc2:	893b      	ldrh	r3, [r7, #8]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	6a39      	ldr	r1, [r7, #32]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f923 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00d      	beq.n	8005df8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d107      	bne.n	8005df4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e035      	b.n	8005e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f82b 	bl	8005e70 <I2C_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e2e:	d103      	bne.n	8005e38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e013      	b.n	8005e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e3c:	897b      	ldrh	r3, [r7, #10]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	4906      	ldr	r1, [pc, #24]	; (8005e6c <I2C_RequestMemoryRead+0x1cc>)
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f863 	bl	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	00010002 	.word	0x00010002

08005e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e80:	e025      	b.n	8005ece <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e88:	d021      	beq.n	8005ece <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8a:	f7fd fbf1 	bl	8003670 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d302      	bcc.n	8005ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d116      	bne.n	8005ece <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f043 0220 	orr.w	r2, r3, #32
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e023      	b.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d10d      	bne.n	8005ef4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	43da      	mvns	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bf0c      	ite	eq
 8005eea:	2301      	moveq	r3, #1
 8005eec:	2300      	movne	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	e00c      	b.n	8005f0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	43da      	mvns	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4013      	ands	r3, r2
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bf0c      	ite	eq
 8005f06:	2301      	moveq	r3, #1
 8005f08:	2300      	movne	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d0b6      	beq.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f2c:	e051      	b.n	8005fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3c:	d123      	bne.n	8005f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0204 	orr.w	r2, r3, #4
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e046      	b.n	8006014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f8c:	d021      	beq.n	8005fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8e:	f7fd fb6f 	bl	8003670 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d116      	bne.n	8005fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f043 0220 	orr.w	r2, r3, #32
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e020      	b.n	8006014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10c      	bne.n	8005ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	43da      	mvns	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bf14      	ite	ne
 8005fee:	2301      	movne	r3, #1
 8005ff0:	2300      	moveq	r3, #0
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	e00b      	b.n	800600e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	43da      	mvns	r2, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4013      	ands	r3, r2
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d18d      	bne.n	8005f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006028:	e02d      	b.n	8006086 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f8ce 	bl	80061cc <I2C_IsAcknowledgeFailed>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e02d      	b.n	8006096 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006040:	d021      	beq.n	8006086 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006042:	f7fd fb15 	bl	8003670 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d116      	bne.n	8006086 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f043 0220 	orr.w	r2, r3, #32
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e007      	b.n	8006096 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006090:	2b80      	cmp	r3, #128	; 0x80
 8006092:	d1ca      	bne.n	800602a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060aa:	e02d      	b.n	8006108 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f88d 	bl	80061cc <I2C_IsAcknowledgeFailed>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e02d      	b.n	8006118 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060c2:	d021      	beq.n	8006108 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c4:	f7fd fad4 	bl	8003670 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d302      	bcc.n	80060da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d116      	bne.n	8006108 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	f043 0220 	orr.w	r2, r3, #32
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e007      	b.n	8006118 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b04      	cmp	r3, #4
 8006114:	d1ca      	bne.n	80060ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800612c:	e042      	b.n	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b10      	cmp	r3, #16
 800613a:	d119      	bne.n	8006170 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0210 	mvn.w	r2, #16
 8006144:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e029      	b.n	80061c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006170:	f7fd fa7e 	bl	8003670 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	d302      	bcc.n	8006186 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d116      	bne.n	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	f043 0220 	orr.w	r2, r3, #32
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e007      	b.n	80061c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d1b5      	bne.n	800612e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e2:	d11b      	bne.n	800621c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	f043 0204 	orr.w	r2, r3, #4
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr

08006228 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e034      	b.n	80062a4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006242:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f245 5255 	movw	r2, #21845	; 0x5555
 800624c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6852      	ldr	r2, [r2, #4]
 8006256:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6892      	ldr	r2, [r2, #8]
 8006260:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006262:	f7fd fa05 	bl	8003670 <HAL_GetTick>
 8006266:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006268:	e00f      	b.n	800628a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800626a:	f7fd fa01 	bl	8003670 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b27      	cmp	r3, #39	; 0x27
 8006276:	d908      	bls.n	800628a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e00c      	b.n	80062a4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e8      	bne.n	800626a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80062a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80062bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr
	...

080062cc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
}
 80062d6:	bf00      	nop
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	420e0020 	.word	0x420e0020

080062e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e26c      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 8087 	beq.w	8006412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006304:	4b92      	ldr	r3, [pc, #584]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f003 030c 	and.w	r3, r3, #12
 800630c:	2b04      	cmp	r3, #4
 800630e:	d00c      	beq.n	800632a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006310:	4b8f      	ldr	r3, [pc, #572]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f003 030c 	and.w	r3, r3, #12
 8006318:	2b08      	cmp	r3, #8
 800631a:	d112      	bne.n	8006342 <HAL_RCC_OscConfig+0x5e>
 800631c:	4b8c      	ldr	r3, [pc, #560]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006328:	d10b      	bne.n	8006342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800632a:	4b89      	ldr	r3, [pc, #548]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d06c      	beq.n	8006410 <HAL_RCC_OscConfig+0x12c>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d168      	bne.n	8006410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e246      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800634a:	d106      	bne.n	800635a <HAL_RCC_OscConfig+0x76>
 800634c:	4b80      	ldr	r3, [pc, #512]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a7f      	ldr	r2, [pc, #508]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	e02e      	b.n	80063b8 <HAL_RCC_OscConfig+0xd4>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10c      	bne.n	800637c <HAL_RCC_OscConfig+0x98>
 8006362:	4b7b      	ldr	r3, [pc, #492]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a7a      	ldr	r2, [pc, #488]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	4b78      	ldr	r3, [pc, #480]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a77      	ldr	r2, [pc, #476]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e01d      	b.n	80063b8 <HAL_RCC_OscConfig+0xd4>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006384:	d10c      	bne.n	80063a0 <HAL_RCC_OscConfig+0xbc>
 8006386:	4b72      	ldr	r3, [pc, #456]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a71      	ldr	r2, [pc, #452]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 800638c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	4b6f      	ldr	r3, [pc, #444]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a6e      	ldr	r2, [pc, #440]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	e00b      	b.n	80063b8 <HAL_RCC_OscConfig+0xd4>
 80063a0:	4b6b      	ldr	r3, [pc, #428]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a6a      	ldr	r2, [pc, #424]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 80063a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	4b68      	ldr	r3, [pc, #416]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a67      	ldr	r2, [pc, #412]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 80063b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d013      	beq.n	80063e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c0:	f7fd f956 	bl	8003670 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c8:	f7fd f952 	bl	8003670 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b64      	cmp	r3, #100	; 0x64
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e1fa      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063da:	4b5d      	ldr	r3, [pc, #372]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f0      	beq.n	80063c8 <HAL_RCC_OscConfig+0xe4>
 80063e6:	e014      	b.n	8006412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e8:	f7fd f942 	bl	8003670 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f0:	f7fd f93e 	bl	8003670 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b64      	cmp	r3, #100	; 0x64
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e1e6      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006402:	4b53      	ldr	r3, [pc, #332]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f0      	bne.n	80063f0 <HAL_RCC_OscConfig+0x10c>
 800640e:	e000      	b.n	8006412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d063      	beq.n	80064e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800641e:	4b4c      	ldr	r3, [pc, #304]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f003 030c 	and.w	r3, r3, #12
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800642a:	4b49      	ldr	r3, [pc, #292]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f003 030c 	and.w	r3, r3, #12
 8006432:	2b08      	cmp	r3, #8
 8006434:	d11c      	bne.n	8006470 <HAL_RCC_OscConfig+0x18c>
 8006436:	4b46      	ldr	r3, [pc, #280]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d116      	bne.n	8006470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006442:	4b43      	ldr	r3, [pc, #268]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_RCC_OscConfig+0x176>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d001      	beq.n	800645a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e1ba      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800645a:	4b3d      	ldr	r3, [pc, #244]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	4939      	ldr	r1, [pc, #228]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 800646a:	4313      	orrs	r3, r2
 800646c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646e:	e03a      	b.n	80064e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d020      	beq.n	80064ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006478:	4b36      	ldr	r3, [pc, #216]	; (8006554 <HAL_RCC_OscConfig+0x270>)
 800647a:	2201      	movs	r2, #1
 800647c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647e:	f7fd f8f7 	bl	8003670 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006486:	f7fd f8f3 	bl	8003670 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e19b      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006498:	4b2d      	ldr	r3, [pc, #180]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a4:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	4927      	ldr	r1, [pc, #156]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]
 80064b8:	e015      	b.n	80064e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ba:	4b26      	ldr	r3, [pc, #152]	; (8006554 <HAL_RCC_OscConfig+0x270>)
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c0:	f7fd f8d6 	bl	8003670 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c8:	f7fd f8d2 	bl	8003670 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e17a      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064da:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1f0      	bne.n	80064c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d03a      	beq.n	8006568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d019      	beq.n	800652e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064fa:	4b17      	ldr	r3, [pc, #92]	; (8006558 <HAL_RCC_OscConfig+0x274>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006500:	f7fd f8b6 	bl	8003670 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006508:	f7fd f8b2 	bl	8003670 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e15a      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800651a:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <HAL_RCC_OscConfig+0x26c>)
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f0      	beq.n	8006508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006526:	2001      	movs	r0, #1
 8006528:	f000 fad8 	bl	8006adc <RCC_Delay>
 800652c:	e01c      	b.n	8006568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <HAL_RCC_OscConfig+0x274>)
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006534:	f7fd f89c 	bl	8003670 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653a:	e00f      	b.n	800655c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800653c:	f7fd f898 	bl	8003670 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d908      	bls.n	800655c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e140      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
 800654e:	bf00      	nop
 8006550:	40021000 	.word	0x40021000
 8006554:	42420000 	.word	0x42420000
 8006558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800655c:	4b9e      	ldr	r3, [pc, #632]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e9      	bne.n	800653c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80a6 	beq.w	80066c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006576:	2300      	movs	r3, #0
 8006578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800657a:	4b97      	ldr	r3, [pc, #604]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10d      	bne.n	80065a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006586:	4b94      	ldr	r3, [pc, #592]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	4a93      	ldr	r2, [pc, #588]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800658c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006590:	61d3      	str	r3, [r2, #28]
 8006592:	4b91      	ldr	r3, [pc, #580]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800659e:	2301      	movs	r3, #1
 80065a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a2:	4b8e      	ldr	r3, [pc, #568]	; (80067dc <HAL_RCC_OscConfig+0x4f8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d118      	bne.n	80065e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ae:	4b8b      	ldr	r3, [pc, #556]	; (80067dc <HAL_RCC_OscConfig+0x4f8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a8a      	ldr	r2, [pc, #552]	; (80067dc <HAL_RCC_OscConfig+0x4f8>)
 80065b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ba:	f7fd f859 	bl	8003670 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c2:	f7fd f855 	bl	8003670 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b64      	cmp	r3, #100	; 0x64
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e0fd      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d4:	4b81      	ldr	r3, [pc, #516]	; (80067dc <HAL_RCC_OscConfig+0x4f8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d106      	bne.n	80065f6 <HAL_RCC_OscConfig+0x312>
 80065e8:	4b7b      	ldr	r3, [pc, #492]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	4a7a      	ldr	r2, [pc, #488]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	6213      	str	r3, [r2, #32]
 80065f4:	e02d      	b.n	8006652 <HAL_RCC_OscConfig+0x36e>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10c      	bne.n	8006618 <HAL_RCC_OscConfig+0x334>
 80065fe:	4b76      	ldr	r3, [pc, #472]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	4a75      	ldr	r2, [pc, #468]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	6213      	str	r3, [r2, #32]
 800660a:	4b73      	ldr	r3, [pc, #460]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	4a72      	ldr	r2, [pc, #456]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006610:	f023 0304 	bic.w	r3, r3, #4
 8006614:	6213      	str	r3, [r2, #32]
 8006616:	e01c      	b.n	8006652 <HAL_RCC_OscConfig+0x36e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b05      	cmp	r3, #5
 800661e:	d10c      	bne.n	800663a <HAL_RCC_OscConfig+0x356>
 8006620:	4b6d      	ldr	r3, [pc, #436]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	4a6c      	ldr	r2, [pc, #432]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006626:	f043 0304 	orr.w	r3, r3, #4
 800662a:	6213      	str	r3, [r2, #32]
 800662c:	4b6a      	ldr	r3, [pc, #424]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	4a69      	ldr	r2, [pc, #420]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	6213      	str	r3, [r2, #32]
 8006638:	e00b      	b.n	8006652 <HAL_RCC_OscConfig+0x36e>
 800663a:	4b67      	ldr	r3, [pc, #412]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	4a66      	ldr	r2, [pc, #408]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	6213      	str	r3, [r2, #32]
 8006646:	4b64      	ldr	r3, [pc, #400]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	4a63      	ldr	r2, [pc, #396]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800664c:	f023 0304 	bic.w	r3, r3, #4
 8006650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d015      	beq.n	8006686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800665a:	f7fd f809 	bl	8003670 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006660:	e00a      	b.n	8006678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006662:	f7fd f805 	bl	8003670 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006670:	4293      	cmp	r3, r2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e0ab      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006678:	4b57      	ldr	r3, [pc, #348]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0ee      	beq.n	8006662 <HAL_RCC_OscConfig+0x37e>
 8006684:	e014      	b.n	80066b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006686:	f7fc fff3 	bl	8003670 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800668c:	e00a      	b.n	80066a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668e:	f7fc ffef 	bl	8003670 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f241 3288 	movw	r2, #5000	; 0x1388
 800669c:	4293      	cmp	r3, r2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e095      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066a4:	4b4c      	ldr	r3, [pc, #304]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1ee      	bne.n	800668e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d105      	bne.n	80066c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066b6:	4b48      	ldr	r3, [pc, #288]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	4a47      	ldr	r2, [pc, #284]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 80066bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 8081 	beq.w	80067ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066cc:	4b42      	ldr	r3, [pc, #264]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f003 030c 	and.w	r3, r3, #12
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d061      	beq.n	800679c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d146      	bne.n	800676e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e0:	4b3f      	ldr	r3, [pc, #252]	; (80067e0 <HAL_RCC_OscConfig+0x4fc>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e6:	f7fc ffc3 	bl	8003670 <HAL_GetTick>
 80066ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ee:	f7fc ffbf 	bl	8003670 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e067      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006700:	4b35      	ldr	r3, [pc, #212]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f0      	bne.n	80066ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006714:	d108      	bne.n	8006728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006716:	4b30      	ldr	r3, [pc, #192]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	492d      	ldr	r1, [pc, #180]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006724:	4313      	orrs	r3, r2
 8006726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006728:	4b2b      	ldr	r3, [pc, #172]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a19      	ldr	r1, [r3, #32]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	430b      	orrs	r3, r1
 800673a:	4927      	ldr	r1, [pc, #156]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 800673c:	4313      	orrs	r3, r2
 800673e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006740:	4b27      	ldr	r3, [pc, #156]	; (80067e0 <HAL_RCC_OscConfig+0x4fc>)
 8006742:	2201      	movs	r2, #1
 8006744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006746:	f7fc ff93 	bl	8003670 <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800674c:	e008      	b.n	8006760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800674e:	f7fc ff8f 	bl	8003670 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d901      	bls.n	8006760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e037      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006760:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0f0      	beq.n	800674e <HAL_RCC_OscConfig+0x46a>
 800676c:	e02f      	b.n	80067ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676e:	4b1c      	ldr	r3, [pc, #112]	; (80067e0 <HAL_RCC_OscConfig+0x4fc>)
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006774:	f7fc ff7c 	bl	8003670 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800677c:	f7fc ff78 	bl	8003670 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e020      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800678e:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x498>
 800679a:	e018      	b.n	80067ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e013      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_RCC_OscConfig+0x4f4>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d106      	bne.n	80067ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d001      	beq.n	80067ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40021000 	.word	0x40021000
 80067dc:	40007000 	.word	0x40007000
 80067e0:	42420060 	.word	0x42420060

080067e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0d0      	b.n	800699a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067f8:	4b6a      	ldr	r3, [pc, #424]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d910      	bls.n	8006828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006806:	4b67      	ldr	r3, [pc, #412]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f023 0207 	bic.w	r2, r3, #7
 800680e:	4965      	ldr	r1, [pc, #404]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	4313      	orrs	r3, r2
 8006814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006816:	4b63      	ldr	r3, [pc, #396]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d001      	beq.n	8006828 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0b8      	b.n	800699a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d020      	beq.n	8006876 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006840:	4b59      	ldr	r3, [pc, #356]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	4a58      	ldr	r2, [pc, #352]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006846:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800684a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006858:	4b53      	ldr	r3, [pc, #332]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4a52      	ldr	r2, [pc, #328]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 800685e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006862:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006864:	4b50      	ldr	r3, [pc, #320]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	494d      	ldr	r1, [pc, #308]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006872:	4313      	orrs	r3, r2
 8006874:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d040      	beq.n	8006904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d107      	bne.n	800689a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688a:	4b47      	ldr	r3, [pc, #284]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d115      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e07f      	b.n	800699a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d107      	bne.n	80068b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a2:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e073      	b.n	800699a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b2:	4b3d      	ldr	r3, [pc, #244]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e06b      	b.n	800699a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068c2:	4b39      	ldr	r3, [pc, #228]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f023 0203 	bic.w	r2, r3, #3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4936      	ldr	r1, [pc, #216]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068d4:	f7fc fecc 	bl	8003670 <HAL_GetTick>
 80068d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068dc:	f7fc fec8 	bl	8003670 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e053      	b.n	800699a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f2:	4b2d      	ldr	r3, [pc, #180]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f003 020c 	and.w	r2, r3, #12
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	429a      	cmp	r2, r3
 8006902:	d1eb      	bne.n	80068dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006904:	4b27      	ldr	r3, [pc, #156]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d210      	bcs.n	8006934 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006912:	4b24      	ldr	r3, [pc, #144]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f023 0207 	bic.w	r2, r3, #7
 800691a:	4922      	ldr	r1, [pc, #136]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	4313      	orrs	r3, r2
 8006920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006922:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d001      	beq.n	8006934 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e032      	b.n	800699a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d008      	beq.n	8006952 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	4916      	ldr	r1, [pc, #88]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 800694e:	4313      	orrs	r3, r2
 8006950:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d009      	beq.n	8006972 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	490e      	ldr	r1, [pc, #56]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 800696e:	4313      	orrs	r3, r2
 8006970:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006972:	f000 f821 	bl	80069b8 <HAL_RCC_GetSysClockFreq>
 8006976:	4602      	mov	r2, r0
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	490a      	ldr	r1, [pc, #40]	; (80069ac <HAL_RCC_ClockConfig+0x1c8>)
 8006984:	5ccb      	ldrb	r3, [r1, r3]
 8006986:	fa22 f303 	lsr.w	r3, r2, r3
 800698a:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <HAL_RCC_ClockConfig+0x1cc>)
 800698c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f7fc fe2a 	bl	80035ec <HAL_InitTick>

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40022000 	.word	0x40022000
 80069a8:	40021000 	.word	0x40021000
 80069ac:	0800b5dc 	.word	0x0800b5dc
 80069b0:	20000008 	.word	0x20000008
 80069b4:	2000000c 	.word	0x2000000c

080069b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b8:	b490      	push	{r4, r7}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80069be:	4b2a      	ldr	r3, [pc, #168]	; (8006a68 <HAL_RCC_GetSysClockFreq+0xb0>)
 80069c0:	1d3c      	adds	r4, r7, #4
 80069c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80069c8:	f240 2301 	movw	r3, #513	; 0x201
 80069cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	2300      	movs	r3, #0
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80069e2:	4b22      	ldr	r3, [pc, #136]	; (8006a6c <HAL_RCC_GetSysClockFreq+0xb4>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	f003 030c 	and.w	r3, r3, #12
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d002      	beq.n	80069f8 <HAL_RCC_GetSysClockFreq+0x40>
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	d003      	beq.n	80069fe <HAL_RCC_GetSysClockFreq+0x46>
 80069f6:	e02d      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069fa:	623b      	str	r3, [r7, #32]
      break;
 80069fc:	e02d      	b.n	8006a5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	0c9b      	lsrs	r3, r3, #18
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d013      	beq.n	8006a44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a1c:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	0c5b      	lsrs	r3, r3, #17
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a36:	fb02 f203 	mul.w	r2, r2, r3
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
 8006a42:	e004      	b.n	8006a4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	4a0b      	ldr	r2, [pc, #44]	; (8006a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a48:	fb02 f303 	mul.w	r3, r2, r3
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	623b      	str	r3, [r7, #32]
      break;
 8006a52:	e002      	b.n	8006a5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a54:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a56:	623b      	str	r3, [r7, #32]
      break;
 8006a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3728      	adds	r7, #40	; 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc90      	pop	{r4, r7}
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	0800afcc 	.word	0x0800afcc
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	007a1200 	.word	0x007a1200
 8006a74:	003d0900 	.word	0x003d0900

08006a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a7c:	4b02      	ldr	r3, [pc, #8]	; (8006a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr
 8006a88:	20000008 	.word	0x20000008

08006a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a90:	f7ff fff2 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8006a94:	4602      	mov	r2, r0
 8006a96:	4b05      	ldr	r3, [pc, #20]	; (8006aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	0a1b      	lsrs	r3, r3, #8
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	4903      	ldr	r1, [pc, #12]	; (8006ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aa2:	5ccb      	ldrb	r3, [r1, r3]
 8006aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	0800b5ec 	.word	0x0800b5ec

08006ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ab8:	f7ff ffde 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8006abc:	4602      	mov	r2, r0
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	0adb      	lsrs	r3, r3, #11
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	4903      	ldr	r1, [pc, #12]	; (8006ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aca:	5ccb      	ldrb	r3, [r1, r3]
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	0800b5ec 	.word	0x0800b5ec

08006adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ae4:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <RCC_Delay+0x34>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a0a      	ldr	r2, [pc, #40]	; (8006b14 <RCC_Delay+0x38>)
 8006aea:	fba2 2303 	umull	r2, r3, r2, r3
 8006aee:	0a5b      	lsrs	r3, r3, #9
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
 8006af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006af8:	bf00      	nop
  }
  while (Delay --);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1e5a      	subs	r2, r3, #1
 8006afe:	60fa      	str	r2, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f9      	bne.n	8006af8 <RCC_Delay+0x1c>
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr
 8006b10:	20000008 	.word	0x20000008
 8006b14:	10624dd3 	.word	0x10624dd3

08006b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d07d      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b34:	2300      	movs	r3, #0
 8006b36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b38:	4b4f      	ldr	r3, [pc, #316]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10d      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b44:	4b4c      	ldr	r3, [pc, #304]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	4a4b      	ldr	r2, [pc, #300]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b4e:	61d3      	str	r3, [r2, #28]
 8006b50:	4b49      	ldr	r3, [pc, #292]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b60:	4b46      	ldr	r3, [pc, #280]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d118      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b6c:	4b43      	ldr	r3, [pc, #268]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a42      	ldr	r2, [pc, #264]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b78:	f7fc fd7a 	bl	8003670 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b7e:	e008      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b80:	f7fc fd76 	bl	8003670 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	; 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e06d      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b92:	4b3a      	ldr	r3, [pc, #232]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0f0      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b9e:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d02e      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d027      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bbc:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bc6:	4b2e      	ldr	r3, [pc, #184]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bcc:	4b2c      	ldr	r3, [pc, #176]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006bd2:	4a29      	ldr	r2, [pc, #164]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d014      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be2:	f7fc fd45 	bl	8003670 <HAL_GetTick>
 8006be6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be8:	e00a      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bea:	f7fc fd41 	bl	8003670 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e036      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c00:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0ee      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c0c:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	4917      	ldr	r1, [pc, #92]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d105      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c24:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d008      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c3c:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	490b      	ldr	r1, [pc, #44]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c5a:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	4904      	ldr	r1, [pc, #16]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	40007000 	.word	0x40007000
 8006c80:	42420440 	.word	0x42420440

08006c84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c84:	b590      	push	{r4, r7, lr}
 8006c86:	b08d      	sub	sp, #52	; 0x34
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c8c:	4b5a      	ldr	r3, [pc, #360]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006c8e:	f107 040c 	add.w	r4, r7, #12
 8006c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c98:	f240 2301 	movw	r3, #513	; 0x201
 8006c9c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	61fb      	str	r3, [r7, #28]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d00a      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	f200 8091 	bhi.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d04c      	beq.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d07c      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006ccc:	e089      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8006cce:	4b4b      	ldr	r3, [pc, #300]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006cd4:	4b49      	ldr	r3, [pc, #292]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8082 	beq.w	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	0c9b      	lsrs	r3, r3, #18
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006cee:	4413      	add	r3, r2
 8006cf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006cf4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d018      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d00:	4b3e      	ldr	r3, [pc, #248]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	0c5b      	lsrs	r3, r3, #17
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d0e:	4413      	add	r3, r2
 8006d10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00d      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006d20:	4a37      	ldr	r2, [pc, #220]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	fb02 f303 	mul.w	r3, r2, r3
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d30:	e004      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	4a33      	ldr	r2, [pc, #204]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006d3c:	4b2f      	ldr	r3, [pc, #188]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d48:	d102      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d4e:	e04a      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4a2c      	ldr	r2, [pc, #176]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006d56:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d5e:	e042      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006d60:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d70:	d108      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d82:	e01f      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8e:	d109      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006d90:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006d9c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da2:	e00f      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dae:	d11c      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006db0:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d016      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006dbc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006dc2:	e012      	b.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006dc4:	e011      	b.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006dc6:	f7ff fe75 	bl	8006ab4 <HAL_RCC_GetPCLK2Freq>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	0b9b      	lsrs	r3, r3, #14
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006de0:	e004      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006de2:	bf00      	nop
 8006de4:	e002      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006de6:	bf00      	nop
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006dea:	bf00      	nop
    }
  }
  return (frequency);
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3734      	adds	r7, #52	; 0x34
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd90      	pop	{r4, r7, pc}
 8006df6:	bf00      	nop
 8006df8:	0800afdc 	.word	0x0800afdc
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	007a1200 	.word	0x007a1200
 8006e04:	003d0900 	.word	0x003d0900
 8006e08:	aaaaaaab 	.word	0xaaaaaaab

08006e0c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e084      	b.n	8006f2c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7c5b      	ldrb	r3, [r3, #17]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d105      	bne.n	8006e38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fc f9c6 	bl	80031c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f87a 	bl	8006f38 <HAL_RTC_WaitForSynchro>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e06b      	b.n	8006f2c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f89c 	bl	8006f92 <RTC_EnterInitMode>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2204      	movs	r2, #4
 8006e64:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e060      	b.n	8006f2c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0207 	bic.w	r2, r2, #7
 8006e78:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006e82:	4b2c      	ldr	r3, [pc, #176]	; (8006f34 <HAL_RTC_Init+0x128>)
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	4a2b      	ldr	r2, [pc, #172]	; (8006f34 <HAL_RTC_Init+0x128>)
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006e8e:	4b29      	ldr	r3, [pc, #164]	; (8006f34 <HAL_RTC_Init+0x128>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	4926      	ldr	r1, [pc, #152]	; (8006f34 <HAL_RTC_Init+0x128>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea8:	d003      	beq.n	8006eb2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e00e      	b.n	8006ed0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	f7ff fee6 	bl	8006c84 <HAL_RCCEx_GetPeriphCLKFreq>
 8006eb8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d104      	bne.n	8006eca <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e030      	b.n	8006f2c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f023 010f 	bic.w	r1, r3, #15
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	0c1a      	lsrs	r2, r3, #16
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	b291      	uxth	r1, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f870 	bl	8006fe2 <RTC_ExitInitMode>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e00c      	b.n	8006f2c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40006c00 	.word	0x40006c00

08006f38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e01d      	b.n	8006f8a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0208 	bic.w	r2, r2, #8
 8006f5c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006f5e:	f7fc fb87 	bl	8003670 <HAL_GetTick>
 8006f62:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006f64:	e009      	b.n	8006f7a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f66:	f7fc fb83 	bl	8003670 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f74:	d901      	bls.n	8006f7a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e007      	b.n	8006f8a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0ee      	beq.n	8006f66 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006f9e:	f7fc fb67 	bl	8003670 <HAL_GetTick>
 8006fa2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006fa4:	e009      	b.n	8006fba <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006fa6:	f7fc fb63 	bl	8003670 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fb4:	d901      	bls.n	8006fba <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e00f      	b.n	8006fda <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0ee      	beq.n	8006fa6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0210 	orr.w	r2, r2, #16
 8006fd6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0210 	bic.w	r2, r2, #16
 8006ffc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006ffe:	f7fc fb37 	bl	8003670 <HAL_GetTick>
 8007002:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007004:	e009      	b.n	800701a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007006:	f7fc fb33 	bl	8003670 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007014:	d901      	bls.n	800701a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e007      	b.n	800702a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0ee      	beq.n	8007006 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e076      	b.n	8007132 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	d108      	bne.n	800705e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007054:	d009      	beq.n	800706a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	61da      	str	r2, [r3, #28]
 800705c:	e005      	b.n	800706a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7fc f8c1 	bl	800320c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2202      	movs	r2, #2
 800708e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ee:	ea42 0103 	orr.w	r1, r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	0c1a      	lsrs	r2, r3, #16
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f002 0204 	and.w	r2, r2, #4
 8007110:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007120:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e041      	b.n	80071d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d106      	bne.n	8007166 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7fc f89f 	bl	80032a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	4619      	mov	r1, r3
 8007178:	4610      	mov	r0, r2
 800717a:	f000 fbb1 	bl	80078e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d001      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e03a      	b.n	8007266 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_TIM_Base_Start_IT+0x98>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00e      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x58>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d009      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x58>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a14      	ldr	r2, [pc, #80]	; (8007274 <HAL_TIM_Base_Start_IT+0x9c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d004      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x58>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a13      	ldr	r2, [pc, #76]	; (8007278 <HAL_TIM_Base_Start_IT+0xa0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d111      	bne.n	8007254 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b06      	cmp	r3, #6
 8007240:	d010      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f042 0201 	orr.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007252:	e007      	b.n	8007264 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr
 8007270:	40012c00 	.word	0x40012c00
 8007274:	40000400 	.word	0x40000400
 8007278:	40000800 	.word	0x40000800

0800727c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0201 	bic.w	r2, r2, #1
 8007292:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6a1a      	ldr	r2, [r3, #32]
 800729a:	f241 1311 	movw	r3, #4369	; 0x1111
 800729e:	4013      	ands	r3, r2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10f      	bne.n	80072c4 <HAL_TIM_Base_Stop_IT+0x48>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a1a      	ldr	r2, [r3, #32]
 80072aa:	f240 4344 	movw	r3, #1092	; 0x444
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d107      	bne.n	80072c4 <HAL_TIM_Base_Stop_IT+0x48>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0201 	bic.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bc80      	pop	{r7}
 80072d6:	4770      	bx	lr

080072d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e041      	b.n	800736e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d106      	bne.n	8007304 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f839 	bl	8007376 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3304      	adds	r3, #4
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f000 fae2 	bl	80078e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e041      	b.n	8007420 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d106      	bne.n	80073b6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f839 	bl	8007428 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2202      	movs	r2, #2
 80073ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4619      	mov	r1, r3
 80073c8:	4610      	mov	r0, r2
 80073ca:	f000 fa89 	bl	80078e0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0208 	bic.w	r2, r2, #8
 80073dc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	bc80      	pop	{r7}
 8007438:	4770      	bx	lr

0800743a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b02      	cmp	r3, #2
 800744e:	d122      	bne.n	8007496 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b02      	cmp	r3, #2
 800745c:	d11b      	bne.n	8007496 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f06f 0202 	mvn.w	r2, #2
 8007466:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa13 	bl	80078a8 <HAL_TIM_IC_CaptureCallback>
 8007482:	e005      	b.n	8007490 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa06 	bl	8007896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa15 	bl	80078ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d122      	bne.n	80074ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d11b      	bne.n	80074ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f06f 0204 	mvn.w	r2, #4
 80074ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9e9 	bl	80078a8 <HAL_TIM_IC_CaptureCallback>
 80074d6:	e005      	b.n	80074e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f9dc 	bl	8007896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f9eb 	bl	80078ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d122      	bne.n	800753e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b08      	cmp	r3, #8
 8007504:	d11b      	bne.n	800753e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f06f 0208 	mvn.w	r2, #8
 800750e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2204      	movs	r2, #4
 8007514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f9bf 	bl	80078a8 <HAL_TIM_IC_CaptureCallback>
 800752a:	e005      	b.n	8007538 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f9b2 	bl	8007896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f9c1 	bl	80078ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b10      	cmp	r3, #16
 800754a:	d122      	bne.n	8007592 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b10      	cmp	r3, #16
 8007558:	d11b      	bne.n	8007592 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f06f 0210 	mvn.w	r2, #16
 8007562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2208      	movs	r2, #8
 8007568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f995 	bl	80078a8 <HAL_TIM_IC_CaptureCallback>
 800757e:	e005      	b.n	800758c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f988 	bl	8007896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f997 	bl	80078ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b01      	cmp	r3, #1
 800759e:	d10e      	bne.n	80075be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d107      	bne.n	80075be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f06f 0201 	mvn.w	r2, #1
 80075b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f963 	bl	8007884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	d10e      	bne.n	80075ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b80      	cmp	r3, #128	; 0x80
 80075d8:	d107      	bne.n	80075ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fcb3 	bl	8007f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d10e      	bne.n	8007616 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d107      	bne.n	8007616 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800760e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f95b 	bl	80078cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b20      	cmp	r3, #32
 8007622:	d10e      	bne.n	8007642 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b20      	cmp	r3, #32
 8007630:	d107      	bne.n	8007642 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f06f 0220 	mvn.w	r2, #32
 800763a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fc7e 	bl	8007f3e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007662:	2302      	movs	r3, #2
 8007664:	e046      	b.n	80076f4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b0c      	cmp	r3, #12
 8007672:	d839      	bhi.n	80076e8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <HAL_TIM_OC_ConfigChannel+0x30>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	080076b1 	.word	0x080076b1
 8007680:	080076e9 	.word	0x080076e9
 8007684:	080076e9 	.word	0x080076e9
 8007688:	080076e9 	.word	0x080076e9
 800768c:	080076bf 	.word	0x080076bf
 8007690:	080076e9 	.word	0x080076e9
 8007694:	080076e9 	.word	0x080076e9
 8007698:	080076e9 	.word	0x080076e9
 800769c:	080076cd 	.word	0x080076cd
 80076a0:	080076e9 	.word	0x080076e9
 80076a4:	080076e9 	.word	0x080076e9
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076db 	.word	0x080076db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f974 	bl	80079a4 <TIM_OC1_SetConfig>
      break;
 80076bc:	e015      	b.n	80076ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 f9d3 	bl	8007a70 <TIM_OC2_SetConfig>
      break;
 80076ca:	e00e      	b.n	80076ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fa36 	bl	8007b44 <TIM_OC3_SetConfig>
      break;
 80076d8:	e007      	b.n	80076ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68b9      	ldr	r1, [r7, #8]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 fa99 	bl	8007c18 <TIM_OC4_SetConfig>
      break;
 80076e6:	e000      	b.n	80076ea <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80076e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_TIM_ConfigClockSource+0x18>
 8007710:	2302      	movs	r3, #2
 8007712:	e0b3      	b.n	800787c <HAL_TIM_ConfigClockSource+0x180>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800773a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774c:	d03e      	beq.n	80077cc <HAL_TIM_ConfigClockSource+0xd0>
 800774e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007752:	f200 8087 	bhi.w	8007864 <HAL_TIM_ConfigClockSource+0x168>
 8007756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775a:	f000 8085 	beq.w	8007868 <HAL_TIM_ConfigClockSource+0x16c>
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007762:	d87f      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x168>
 8007764:	2b70      	cmp	r3, #112	; 0x70
 8007766:	d01a      	beq.n	800779e <HAL_TIM_ConfigClockSource+0xa2>
 8007768:	2b70      	cmp	r3, #112	; 0x70
 800776a:	d87b      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x168>
 800776c:	2b60      	cmp	r3, #96	; 0x60
 800776e:	d050      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x116>
 8007770:	2b60      	cmp	r3, #96	; 0x60
 8007772:	d877      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x168>
 8007774:	2b50      	cmp	r3, #80	; 0x50
 8007776:	d03c      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0xf6>
 8007778:	2b50      	cmp	r3, #80	; 0x50
 800777a:	d873      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x168>
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d058      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x136>
 8007780:	2b40      	cmp	r3, #64	; 0x40
 8007782:	d86f      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x168>
 8007784:	2b30      	cmp	r3, #48	; 0x30
 8007786:	d064      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x156>
 8007788:	2b30      	cmp	r3, #48	; 0x30
 800778a:	d86b      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x168>
 800778c:	2b20      	cmp	r3, #32
 800778e:	d060      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x156>
 8007790:	2b20      	cmp	r3, #32
 8007792:	d867      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x168>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d05c      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x156>
 8007798:	2b10      	cmp	r3, #16
 800779a:	d05a      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800779c:	e062      	b.n	8007864 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6899      	ldr	r1, [r3, #8]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f000 faf8 	bl	8007da2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	609a      	str	r2, [r3, #8]
      break;
 80077ca:	e04e      	b.n	800786a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	6899      	ldr	r1, [r3, #8]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f000 fae1 	bl	8007da2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077ee:	609a      	str	r2, [r3, #8]
      break;
 80077f0:	e03b      	b.n	800786a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6859      	ldr	r1, [r3, #4]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	461a      	mov	r2, r3
 8007800:	f000 fa58 	bl	8007cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2150      	movs	r1, #80	; 0x50
 800780a:	4618      	mov	r0, r3
 800780c:	f000 faaf 	bl	8007d6e <TIM_ITRx_SetConfig>
      break;
 8007810:	e02b      	b.n	800786a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6859      	ldr	r1, [r3, #4]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	461a      	mov	r2, r3
 8007820:	f000 fa76 	bl	8007d10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2160      	movs	r1, #96	; 0x60
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fa9f 	bl	8007d6e <TIM_ITRx_SetConfig>
      break;
 8007830:	e01b      	b.n	800786a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6859      	ldr	r1, [r3, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	461a      	mov	r2, r3
 8007840:	f000 fa38 	bl	8007cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2140      	movs	r1, #64	; 0x40
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fa8f 	bl	8007d6e <TIM_ITRx_SetConfig>
      break;
 8007850:	e00b      	b.n	800786a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f000 fa86 	bl	8007d6e <TIM_ITRx_SetConfig>
        break;
 8007862:	e002      	b.n	800786a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007864:	bf00      	nop
 8007866:	e000      	b.n	800786a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr

08007896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr

080078a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr
	...

080078e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a29      	ldr	r2, [pc, #164]	; (8007998 <TIM_Base_SetConfig+0xb8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00b      	beq.n	8007910 <TIM_Base_SetConfig+0x30>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fe:	d007      	beq.n	8007910 <TIM_Base_SetConfig+0x30>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a26      	ldr	r2, [pc, #152]	; (800799c <TIM_Base_SetConfig+0xbc>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_Base_SetConfig+0x30>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a25      	ldr	r2, [pc, #148]	; (80079a0 <TIM_Base_SetConfig+0xc0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d108      	bne.n	8007922 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a1c      	ldr	r2, [pc, #112]	; (8007998 <TIM_Base_SetConfig+0xb8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00b      	beq.n	8007942 <TIM_Base_SetConfig+0x62>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007930:	d007      	beq.n	8007942 <TIM_Base_SetConfig+0x62>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a19      	ldr	r2, [pc, #100]	; (800799c <TIM_Base_SetConfig+0xbc>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d003      	beq.n	8007942 <TIM_Base_SetConfig+0x62>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a18      	ldr	r2, [pc, #96]	; (80079a0 <TIM_Base_SetConfig+0xc0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d108      	bne.n	8007954 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a07      	ldr	r2, [pc, #28]	; (8007998 <TIM_Base_SetConfig+0xb8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d103      	bne.n	8007988 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	615a      	str	r2, [r3, #20]
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40000400 	.word	0x40000400
 80079a0:	40000800 	.word	0x40000800

080079a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0302 	bic.w	r3, r3, #2
 80079ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a1c      	ldr	r2, [pc, #112]	; (8007a6c <TIM_OC1_SetConfig+0xc8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10c      	bne.n	8007a1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f023 0308 	bic.w	r3, r3, #8
 8007a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 0304 	bic.w	r3, r3, #4
 8007a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <TIM_OC1_SetConfig+0xc8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d111      	bne.n	8007a46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	621a      	str	r2, [r3, #32]
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40012c00 	.word	0x40012c00

08007a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f023 0210 	bic.w	r2, r3, #16
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f023 0320 	bic.w	r3, r3, #32
 8007aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a1d      	ldr	r2, [pc, #116]	; (8007b40 <TIM_OC2_SetConfig+0xd0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10d      	bne.n	8007aec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a14      	ldr	r2, [pc, #80]	; (8007b40 <TIM_OC2_SetConfig+0xd0>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d113      	bne.n	8007b1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	621a      	str	r2, [r3, #32]
}
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr
 8007b40:	40012c00 	.word	0x40012c00

08007b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0303 	bic.w	r3, r3, #3
 8007b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <TIM_OC3_SetConfig+0xd0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d10d      	bne.n	8007bbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a14      	ldr	r2, [pc, #80]	; (8007c14 <TIM_OC3_SetConfig+0xd0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d113      	bne.n	8007bee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	621a      	str	r2, [r3, #32]
}
 8007c08:	bf00      	nop
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40012c00 	.word	0x40012c00

08007c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	031b      	lsls	r3, r3, #12
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a0f      	ldr	r2, [pc, #60]	; (8007cb0 <TIM_OC4_SetConfig+0x98>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d109      	bne.n	8007c8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	019b      	lsls	r3, r3, #6
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	621a      	str	r2, [r3, #32]
}
 8007ca6:	bf00      	nop
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr
 8007cb0:	40012c00 	.word	0x40012c00

08007cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	f023 0201 	bic.w	r2, r3, #1
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f023 030a 	bic.w	r3, r3, #10
 8007cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	621a      	str	r2, [r3, #32]
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr

08007d10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f023 0210 	bic.w	r2, r3, #16
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	031b      	lsls	r3, r3, #12
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	621a      	str	r2, [r3, #32]
}
 8007d64:	bf00      	nop
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bc80      	pop	{r7}
 8007d6c:	4770      	bx	lr

08007d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f043 0307 	orr.w	r3, r3, #7
 8007d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	609a      	str	r2, [r3, #8]
}
 8007d98:	bf00      	nop
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr

08007da2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b087      	sub	sp, #28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	021a      	lsls	r2, r3, #8
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	609a      	str	r2, [r3, #8]
}
 8007dd6:	bf00      	nop
 8007dd8:	371c      	adds	r7, #28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bc80      	pop	{r7}
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e046      	b.n	8007e86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00e      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e44:	d009      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a12      	ldr	r2, [pc, #72]	; (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d004      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a10      	ldr	r2, [pc, #64]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d10c      	bne.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr
 8007e90:	40012c00 	.word	0x40012c00
 8007e94:	40000400 	.word	0x40000400
 8007e98:	40000800 	.word	0x40000800

08007e9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e03d      	b.n	8007f34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr

08007f62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e03f      	b.n	8007ff4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d106      	bne.n	8007f8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7fb f9cd 	bl	8003328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2224      	movs	r2, #36	; 0x24
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f828 	bl	8007ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695a      	ldr	r2, [r3, #20]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	4313      	orrs	r3, r2
 800802a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008036:	f023 030c 	bic.w	r3, r3, #12
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6812      	ldr	r2, [r2, #0]
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	430b      	orrs	r3, r1
 8008042:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a2c      	ldr	r2, [pc, #176]	; (8008110 <UART_SetConfig+0x114>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d103      	bne.n	800806c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008064:	f7fe fd26 	bl	8006ab4 <HAL_RCC_GetPCLK2Freq>
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	e002      	b.n	8008072 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800806c:	f7fe fd0e 	bl	8006a8c <HAL_RCC_GetPCLK1Freq>
 8008070:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009a      	lsls	r2, r3, #2
 800807c:	441a      	add	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	fbb2 f3f3 	udiv	r3, r2, r3
 8008088:	4a22      	ldr	r2, [pc, #136]	; (8008114 <UART_SetConfig+0x118>)
 800808a:	fba2 2303 	umull	r2, r3, r2, r3
 800808e:	095b      	lsrs	r3, r3, #5
 8008090:	0119      	lsls	r1, r3, #4
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009a      	lsls	r2, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80080a8:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <UART_SetConfig+0x118>)
 80080aa:	fba3 0302 	umull	r0, r3, r3, r2
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	2064      	movs	r0, #100	; 0x64
 80080b2:	fb00 f303 	mul.w	r3, r0, r3
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	3332      	adds	r3, #50	; 0x32
 80080bc:	4a15      	ldr	r2, [pc, #84]	; (8008114 <UART_SetConfig+0x118>)
 80080be:	fba2 2303 	umull	r2, r3, r2, r3
 80080c2:	095b      	lsrs	r3, r3, #5
 80080c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080c8:	4419      	add	r1, r3
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4613      	mov	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	009a      	lsls	r2, r3, #2
 80080d4:	441a      	add	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80080e0:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <UART_SetConfig+0x118>)
 80080e2:	fba3 0302 	umull	r0, r3, r3, r2
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	2064      	movs	r0, #100	; 0x64
 80080ea:	fb00 f303 	mul.w	r3, r0, r3
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	3332      	adds	r3, #50	; 0x32
 80080f4:	4a07      	ldr	r2, [pc, #28]	; (8008114 <UART_SetConfig+0x118>)
 80080f6:	fba2 2303 	umull	r2, r3, r2, r3
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	440a      	add	r2, r1
 8008106:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40013800 	.word	0x40013800
 8008114:	51eb851f 	.word	0x51eb851f

08008118 <__libc_init_array>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	2600      	movs	r6, #0
 800811c:	4d0c      	ldr	r5, [pc, #48]	; (8008150 <__libc_init_array+0x38>)
 800811e:	4c0d      	ldr	r4, [pc, #52]	; (8008154 <__libc_init_array+0x3c>)
 8008120:	1b64      	subs	r4, r4, r5
 8008122:	10a4      	asrs	r4, r4, #2
 8008124:	42a6      	cmp	r6, r4
 8008126:	d109      	bne.n	800813c <__libc_init_array+0x24>
 8008128:	f002 ff0c 	bl	800af44 <_init>
 800812c:	2600      	movs	r6, #0
 800812e:	4d0a      	ldr	r5, [pc, #40]	; (8008158 <__libc_init_array+0x40>)
 8008130:	4c0a      	ldr	r4, [pc, #40]	; (800815c <__libc_init_array+0x44>)
 8008132:	1b64      	subs	r4, r4, r5
 8008134:	10a4      	asrs	r4, r4, #2
 8008136:	42a6      	cmp	r6, r4
 8008138:	d105      	bne.n	8008146 <__libc_init_array+0x2e>
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008140:	4798      	blx	r3
 8008142:	3601      	adds	r6, #1
 8008144:	e7ee      	b.n	8008124 <__libc_init_array+0xc>
 8008146:	f855 3b04 	ldr.w	r3, [r5], #4
 800814a:	4798      	blx	r3
 800814c:	3601      	adds	r6, #1
 800814e:	e7f2      	b.n	8008136 <__libc_init_array+0x1e>
 8008150:	0800b9dc 	.word	0x0800b9dc
 8008154:	0800b9dc 	.word	0x0800b9dc
 8008158:	0800b9dc 	.word	0x0800b9dc
 800815c:	0800b9e0 	.word	0x0800b9e0

08008160 <malloc>:
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <malloc+0xc>)
 8008162:	4601      	mov	r1, r0
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f000 b865 	b.w	8008234 <_malloc_r>
 800816a:	bf00      	nop
 800816c:	20000014 	.word	0x20000014

08008170 <memcpy>:
 8008170:	440a      	add	r2, r1
 8008172:	4291      	cmp	r1, r2
 8008174:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008178:	d100      	bne.n	800817c <memcpy+0xc>
 800817a:	4770      	bx	lr
 800817c:	b510      	push	{r4, lr}
 800817e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008182:	4291      	cmp	r1, r2
 8008184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008188:	d1f9      	bne.n	800817e <memcpy+0xe>
 800818a:	bd10      	pop	{r4, pc}

0800818c <memset>:
 800818c:	4603      	mov	r3, r0
 800818e:	4402      	add	r2, r0
 8008190:	4293      	cmp	r3, r2
 8008192:	d100      	bne.n	8008196 <memset+0xa>
 8008194:	4770      	bx	lr
 8008196:	f803 1b01 	strb.w	r1, [r3], #1
 800819a:	e7f9      	b.n	8008190 <memset+0x4>

0800819c <_free_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4605      	mov	r5, r0
 80081a0:	2900      	cmp	r1, #0
 80081a2:	d043      	beq.n	800822c <_free_r+0x90>
 80081a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a8:	1f0c      	subs	r4, r1, #4
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfb8      	it	lt
 80081ae:	18e4      	addlt	r4, r4, r3
 80081b0:	f001 fbba 	bl	8009928 <__malloc_lock>
 80081b4:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <_free_r+0x94>)
 80081b6:	6813      	ldr	r3, [r2, #0]
 80081b8:	4610      	mov	r0, r2
 80081ba:	b933      	cbnz	r3, 80081ca <_free_r+0x2e>
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	6014      	str	r4, [r2, #0]
 80081c0:	4628      	mov	r0, r5
 80081c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c6:	f001 bbb5 	b.w	8009934 <__malloc_unlock>
 80081ca:	42a3      	cmp	r3, r4
 80081cc:	d90a      	bls.n	80081e4 <_free_r+0x48>
 80081ce:	6821      	ldr	r1, [r4, #0]
 80081d0:	1862      	adds	r2, r4, r1
 80081d2:	4293      	cmp	r3, r2
 80081d4:	bf01      	itttt	eq
 80081d6:	681a      	ldreq	r2, [r3, #0]
 80081d8:	685b      	ldreq	r3, [r3, #4]
 80081da:	1852      	addeq	r2, r2, r1
 80081dc:	6022      	streq	r2, [r4, #0]
 80081de:	6063      	str	r3, [r4, #4]
 80081e0:	6004      	str	r4, [r0, #0]
 80081e2:	e7ed      	b.n	80081c0 <_free_r+0x24>
 80081e4:	461a      	mov	r2, r3
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	b10b      	cbz	r3, 80081ee <_free_r+0x52>
 80081ea:	42a3      	cmp	r3, r4
 80081ec:	d9fa      	bls.n	80081e4 <_free_r+0x48>
 80081ee:	6811      	ldr	r1, [r2, #0]
 80081f0:	1850      	adds	r0, r2, r1
 80081f2:	42a0      	cmp	r0, r4
 80081f4:	d10b      	bne.n	800820e <_free_r+0x72>
 80081f6:	6820      	ldr	r0, [r4, #0]
 80081f8:	4401      	add	r1, r0
 80081fa:	1850      	adds	r0, r2, r1
 80081fc:	4283      	cmp	r3, r0
 80081fe:	6011      	str	r1, [r2, #0]
 8008200:	d1de      	bne.n	80081c0 <_free_r+0x24>
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4401      	add	r1, r0
 8008208:	6011      	str	r1, [r2, #0]
 800820a:	6053      	str	r3, [r2, #4]
 800820c:	e7d8      	b.n	80081c0 <_free_r+0x24>
 800820e:	d902      	bls.n	8008216 <_free_r+0x7a>
 8008210:	230c      	movs	r3, #12
 8008212:	602b      	str	r3, [r5, #0]
 8008214:	e7d4      	b.n	80081c0 <_free_r+0x24>
 8008216:	6820      	ldr	r0, [r4, #0]
 8008218:	1821      	adds	r1, r4, r0
 800821a:	428b      	cmp	r3, r1
 800821c:	bf01      	itttt	eq
 800821e:	6819      	ldreq	r1, [r3, #0]
 8008220:	685b      	ldreq	r3, [r3, #4]
 8008222:	1809      	addeq	r1, r1, r0
 8008224:	6021      	streq	r1, [r4, #0]
 8008226:	6063      	str	r3, [r4, #4]
 8008228:	6054      	str	r4, [r2, #4]
 800822a:	e7c9      	b.n	80081c0 <_free_r+0x24>
 800822c:	bd38      	pop	{r3, r4, r5, pc}
 800822e:	bf00      	nop
 8008230:	20000418 	.word	0x20000418

08008234 <_malloc_r>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	1ccd      	adds	r5, r1, #3
 8008238:	f025 0503 	bic.w	r5, r5, #3
 800823c:	3508      	adds	r5, #8
 800823e:	2d0c      	cmp	r5, #12
 8008240:	bf38      	it	cc
 8008242:	250c      	movcc	r5, #12
 8008244:	2d00      	cmp	r5, #0
 8008246:	4606      	mov	r6, r0
 8008248:	db01      	blt.n	800824e <_malloc_r+0x1a>
 800824a:	42a9      	cmp	r1, r5
 800824c:	d903      	bls.n	8008256 <_malloc_r+0x22>
 800824e:	230c      	movs	r3, #12
 8008250:	6033      	str	r3, [r6, #0]
 8008252:	2000      	movs	r0, #0
 8008254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008256:	f001 fb67 	bl	8009928 <__malloc_lock>
 800825a:	4921      	ldr	r1, [pc, #132]	; (80082e0 <_malloc_r+0xac>)
 800825c:	680a      	ldr	r2, [r1, #0]
 800825e:	4614      	mov	r4, r2
 8008260:	b99c      	cbnz	r4, 800828a <_malloc_r+0x56>
 8008262:	4f20      	ldr	r7, [pc, #128]	; (80082e4 <_malloc_r+0xb0>)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	b923      	cbnz	r3, 8008272 <_malloc_r+0x3e>
 8008268:	4621      	mov	r1, r4
 800826a:	4630      	mov	r0, r6
 800826c:	f000 fc9c 	bl	8008ba8 <_sbrk_r>
 8008270:	6038      	str	r0, [r7, #0]
 8008272:	4629      	mov	r1, r5
 8008274:	4630      	mov	r0, r6
 8008276:	f000 fc97 	bl	8008ba8 <_sbrk_r>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	d123      	bne.n	80082c6 <_malloc_r+0x92>
 800827e:	230c      	movs	r3, #12
 8008280:	4630      	mov	r0, r6
 8008282:	6033      	str	r3, [r6, #0]
 8008284:	f001 fb56 	bl	8009934 <__malloc_unlock>
 8008288:	e7e3      	b.n	8008252 <_malloc_r+0x1e>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	1b5b      	subs	r3, r3, r5
 800828e:	d417      	bmi.n	80082c0 <_malloc_r+0x8c>
 8008290:	2b0b      	cmp	r3, #11
 8008292:	d903      	bls.n	800829c <_malloc_r+0x68>
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	441c      	add	r4, r3
 8008298:	6025      	str	r5, [r4, #0]
 800829a:	e004      	b.n	80082a6 <_malloc_r+0x72>
 800829c:	6863      	ldr	r3, [r4, #4]
 800829e:	42a2      	cmp	r2, r4
 80082a0:	bf0c      	ite	eq
 80082a2:	600b      	streq	r3, [r1, #0]
 80082a4:	6053      	strne	r3, [r2, #4]
 80082a6:	4630      	mov	r0, r6
 80082a8:	f001 fb44 	bl	8009934 <__malloc_unlock>
 80082ac:	f104 000b 	add.w	r0, r4, #11
 80082b0:	1d23      	adds	r3, r4, #4
 80082b2:	f020 0007 	bic.w	r0, r0, #7
 80082b6:	1ac2      	subs	r2, r0, r3
 80082b8:	d0cc      	beq.n	8008254 <_malloc_r+0x20>
 80082ba:	1a1b      	subs	r3, r3, r0
 80082bc:	50a3      	str	r3, [r4, r2]
 80082be:	e7c9      	b.n	8008254 <_malloc_r+0x20>
 80082c0:	4622      	mov	r2, r4
 80082c2:	6864      	ldr	r4, [r4, #4]
 80082c4:	e7cc      	b.n	8008260 <_malloc_r+0x2c>
 80082c6:	1cc4      	adds	r4, r0, #3
 80082c8:	f024 0403 	bic.w	r4, r4, #3
 80082cc:	42a0      	cmp	r0, r4
 80082ce:	d0e3      	beq.n	8008298 <_malloc_r+0x64>
 80082d0:	1a21      	subs	r1, r4, r0
 80082d2:	4630      	mov	r0, r6
 80082d4:	f000 fc68 	bl	8008ba8 <_sbrk_r>
 80082d8:	3001      	adds	r0, #1
 80082da:	d1dd      	bne.n	8008298 <_malloc_r+0x64>
 80082dc:	e7cf      	b.n	800827e <_malloc_r+0x4a>
 80082de:	bf00      	nop
 80082e0:	20000418 	.word	0x20000418
 80082e4:	2000041c 	.word	0x2000041c

080082e8 <__cvt>:
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ee:	461f      	mov	r7, r3
 80082f0:	bfbb      	ittet	lt
 80082f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80082f6:	461f      	movlt	r7, r3
 80082f8:	2300      	movge	r3, #0
 80082fa:	232d      	movlt	r3, #45	; 0x2d
 80082fc:	b088      	sub	sp, #32
 80082fe:	4614      	mov	r4, r2
 8008300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008302:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008304:	7013      	strb	r3, [r2, #0]
 8008306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008308:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800830c:	f023 0820 	bic.w	r8, r3, #32
 8008310:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008314:	d005      	beq.n	8008322 <__cvt+0x3a>
 8008316:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800831a:	d100      	bne.n	800831e <__cvt+0x36>
 800831c:	3501      	adds	r5, #1
 800831e:	2302      	movs	r3, #2
 8008320:	e000      	b.n	8008324 <__cvt+0x3c>
 8008322:	2303      	movs	r3, #3
 8008324:	aa07      	add	r2, sp, #28
 8008326:	9204      	str	r2, [sp, #16]
 8008328:	aa06      	add	r2, sp, #24
 800832a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800832e:	e9cd 3500 	strd	r3, r5, [sp]
 8008332:	4622      	mov	r2, r4
 8008334:	463b      	mov	r3, r7
 8008336:	f000 fcf7 	bl	8008d28 <_dtoa_r>
 800833a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800833e:	4606      	mov	r6, r0
 8008340:	d102      	bne.n	8008348 <__cvt+0x60>
 8008342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008344:	07db      	lsls	r3, r3, #31
 8008346:	d522      	bpl.n	800838e <__cvt+0xa6>
 8008348:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800834c:	eb06 0905 	add.w	r9, r6, r5
 8008350:	d110      	bne.n	8008374 <__cvt+0x8c>
 8008352:	7833      	ldrb	r3, [r6, #0]
 8008354:	2b30      	cmp	r3, #48	; 0x30
 8008356:	d10a      	bne.n	800836e <__cvt+0x86>
 8008358:	2200      	movs	r2, #0
 800835a:	2300      	movs	r3, #0
 800835c:	4620      	mov	r0, r4
 800835e:	4639      	mov	r1, r7
 8008360:	f7f8 fb22 	bl	80009a8 <__aeabi_dcmpeq>
 8008364:	b918      	cbnz	r0, 800836e <__cvt+0x86>
 8008366:	f1c5 0501 	rsb	r5, r5, #1
 800836a:	f8ca 5000 	str.w	r5, [sl]
 800836e:	f8da 3000 	ldr.w	r3, [sl]
 8008372:	4499      	add	r9, r3
 8008374:	2200      	movs	r2, #0
 8008376:	2300      	movs	r3, #0
 8008378:	4620      	mov	r0, r4
 800837a:	4639      	mov	r1, r7
 800837c:	f7f8 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8008380:	b108      	cbz	r0, 8008386 <__cvt+0x9e>
 8008382:	f8cd 901c 	str.w	r9, [sp, #28]
 8008386:	2230      	movs	r2, #48	; 0x30
 8008388:	9b07      	ldr	r3, [sp, #28]
 800838a:	454b      	cmp	r3, r9
 800838c:	d307      	bcc.n	800839e <__cvt+0xb6>
 800838e:	4630      	mov	r0, r6
 8008390:	9b07      	ldr	r3, [sp, #28]
 8008392:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008394:	1b9b      	subs	r3, r3, r6
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	b008      	add	sp, #32
 800839a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839e:	1c59      	adds	r1, r3, #1
 80083a0:	9107      	str	r1, [sp, #28]
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	e7f0      	b.n	8008388 <__cvt+0xa0>

080083a6 <__exponent>:
 80083a6:	4603      	mov	r3, r0
 80083a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083aa:	2900      	cmp	r1, #0
 80083ac:	f803 2b02 	strb.w	r2, [r3], #2
 80083b0:	bfb6      	itet	lt
 80083b2:	222d      	movlt	r2, #45	; 0x2d
 80083b4:	222b      	movge	r2, #43	; 0x2b
 80083b6:	4249      	neglt	r1, r1
 80083b8:	2909      	cmp	r1, #9
 80083ba:	7042      	strb	r2, [r0, #1]
 80083bc:	dd2b      	ble.n	8008416 <__exponent+0x70>
 80083be:	f10d 0407 	add.w	r4, sp, #7
 80083c2:	46a4      	mov	ip, r4
 80083c4:	270a      	movs	r7, #10
 80083c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80083ca:	460a      	mov	r2, r1
 80083cc:	46a6      	mov	lr, r4
 80083ce:	fb07 1516 	mls	r5, r7, r6, r1
 80083d2:	2a63      	cmp	r2, #99	; 0x63
 80083d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80083d8:	4631      	mov	r1, r6
 80083da:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80083de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80083e2:	dcf0      	bgt.n	80083c6 <__exponent+0x20>
 80083e4:	3130      	adds	r1, #48	; 0x30
 80083e6:	f1ae 0502 	sub.w	r5, lr, #2
 80083ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083ee:	4629      	mov	r1, r5
 80083f0:	1c44      	adds	r4, r0, #1
 80083f2:	4561      	cmp	r1, ip
 80083f4:	d30a      	bcc.n	800840c <__exponent+0x66>
 80083f6:	f10d 0209 	add.w	r2, sp, #9
 80083fa:	eba2 020e 	sub.w	r2, r2, lr
 80083fe:	4565      	cmp	r5, ip
 8008400:	bf88      	it	hi
 8008402:	2200      	movhi	r2, #0
 8008404:	4413      	add	r3, r2
 8008406:	1a18      	subs	r0, r3, r0
 8008408:	b003      	add	sp, #12
 800840a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008410:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008414:	e7ed      	b.n	80083f2 <__exponent+0x4c>
 8008416:	2330      	movs	r3, #48	; 0x30
 8008418:	3130      	adds	r1, #48	; 0x30
 800841a:	7083      	strb	r3, [r0, #2]
 800841c:	70c1      	strb	r1, [r0, #3]
 800841e:	1d03      	adds	r3, r0, #4
 8008420:	e7f1      	b.n	8008406 <__exponent+0x60>
	...

08008424 <_printf_float>:
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	b091      	sub	sp, #68	; 0x44
 800842a:	460c      	mov	r4, r1
 800842c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008430:	4616      	mov	r6, r2
 8008432:	461f      	mov	r7, r3
 8008434:	4605      	mov	r5, r0
 8008436:	f001 fa65 	bl	8009904 <_localeconv_r>
 800843a:	6803      	ldr	r3, [r0, #0]
 800843c:	4618      	mov	r0, r3
 800843e:	9309      	str	r3, [sp, #36]	; 0x24
 8008440:	f7f7 fe86 	bl	8000150 <strlen>
 8008444:	2300      	movs	r3, #0
 8008446:	930e      	str	r3, [sp, #56]	; 0x38
 8008448:	f8d8 3000 	ldr.w	r3, [r8]
 800844c:	900a      	str	r0, [sp, #40]	; 0x28
 800844e:	3307      	adds	r3, #7
 8008450:	f023 0307 	bic.w	r3, r3, #7
 8008454:	f103 0208 	add.w	r2, r3, #8
 8008458:	f894 9018 	ldrb.w	r9, [r4, #24]
 800845c:	f8d4 b000 	ldr.w	fp, [r4]
 8008460:	f8c8 2000 	str.w	r2, [r8]
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800846c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008470:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008474:	930b      	str	r3, [sp, #44]	; 0x2c
 8008476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800847a:	4640      	mov	r0, r8
 800847c:	4b9c      	ldr	r3, [pc, #624]	; (80086f0 <_printf_float+0x2cc>)
 800847e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008480:	f7f8 fac4 	bl	8000a0c <__aeabi_dcmpun>
 8008484:	bb70      	cbnz	r0, 80084e4 <_printf_float+0xc0>
 8008486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800848a:	4640      	mov	r0, r8
 800848c:	4b98      	ldr	r3, [pc, #608]	; (80086f0 <_printf_float+0x2cc>)
 800848e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008490:	f7f8 fa9e 	bl	80009d0 <__aeabi_dcmple>
 8008494:	bb30      	cbnz	r0, 80084e4 <_printf_float+0xc0>
 8008496:	2200      	movs	r2, #0
 8008498:	2300      	movs	r3, #0
 800849a:	4640      	mov	r0, r8
 800849c:	4651      	mov	r1, sl
 800849e:	f7f8 fa8d 	bl	80009bc <__aeabi_dcmplt>
 80084a2:	b110      	cbz	r0, 80084aa <_printf_float+0x86>
 80084a4:	232d      	movs	r3, #45	; 0x2d
 80084a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084aa:	4b92      	ldr	r3, [pc, #584]	; (80086f4 <_printf_float+0x2d0>)
 80084ac:	4892      	ldr	r0, [pc, #584]	; (80086f8 <_printf_float+0x2d4>)
 80084ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80084b2:	bf94      	ite	ls
 80084b4:	4698      	movls	r8, r3
 80084b6:	4680      	movhi	r8, r0
 80084b8:	2303      	movs	r3, #3
 80084ba:	f04f 0a00 	mov.w	sl, #0
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	f02b 0304 	bic.w	r3, fp, #4
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	4633      	mov	r3, r6
 80084c8:	4621      	mov	r1, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	9700      	str	r7, [sp, #0]
 80084ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80084d0:	f000 f9d4 	bl	800887c <_printf_common>
 80084d4:	3001      	adds	r0, #1
 80084d6:	f040 8090 	bne.w	80085fa <_printf_float+0x1d6>
 80084da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084de:	b011      	add	sp, #68	; 0x44
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e4:	4642      	mov	r2, r8
 80084e6:	4653      	mov	r3, sl
 80084e8:	4640      	mov	r0, r8
 80084ea:	4651      	mov	r1, sl
 80084ec:	f7f8 fa8e 	bl	8000a0c <__aeabi_dcmpun>
 80084f0:	b148      	cbz	r0, 8008506 <_printf_float+0xe2>
 80084f2:	f1ba 0f00 	cmp.w	sl, #0
 80084f6:	bfb8      	it	lt
 80084f8:	232d      	movlt	r3, #45	; 0x2d
 80084fa:	4880      	ldr	r0, [pc, #512]	; (80086fc <_printf_float+0x2d8>)
 80084fc:	bfb8      	it	lt
 80084fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008502:	4b7f      	ldr	r3, [pc, #508]	; (8008700 <_printf_float+0x2dc>)
 8008504:	e7d3      	b.n	80084ae <_printf_float+0x8a>
 8008506:	6863      	ldr	r3, [r4, #4]
 8008508:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	d142      	bne.n	8008596 <_printf_float+0x172>
 8008510:	2306      	movs	r3, #6
 8008512:	6063      	str	r3, [r4, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	9206      	str	r2, [sp, #24]
 8008518:	aa0e      	add	r2, sp, #56	; 0x38
 800851a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800851e:	aa0d      	add	r2, sp, #52	; 0x34
 8008520:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008524:	9203      	str	r2, [sp, #12]
 8008526:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800852a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	6863      	ldr	r3, [r4, #4]
 8008532:	4642      	mov	r2, r8
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	4628      	mov	r0, r5
 8008538:	4653      	mov	r3, sl
 800853a:	910b      	str	r1, [sp, #44]	; 0x2c
 800853c:	f7ff fed4 	bl	80082e8 <__cvt>
 8008540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008542:	4680      	mov	r8, r0
 8008544:	2947      	cmp	r1, #71	; 0x47
 8008546:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008548:	d108      	bne.n	800855c <_printf_float+0x138>
 800854a:	1cc8      	adds	r0, r1, #3
 800854c:	db02      	blt.n	8008554 <_printf_float+0x130>
 800854e:	6863      	ldr	r3, [r4, #4]
 8008550:	4299      	cmp	r1, r3
 8008552:	dd40      	ble.n	80085d6 <_printf_float+0x1b2>
 8008554:	f1a9 0902 	sub.w	r9, r9, #2
 8008558:	fa5f f989 	uxtb.w	r9, r9
 800855c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008560:	d81f      	bhi.n	80085a2 <_printf_float+0x17e>
 8008562:	464a      	mov	r2, r9
 8008564:	3901      	subs	r1, #1
 8008566:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800856a:	910d      	str	r1, [sp, #52]	; 0x34
 800856c:	f7ff ff1b 	bl	80083a6 <__exponent>
 8008570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008572:	4682      	mov	sl, r0
 8008574:	1813      	adds	r3, r2, r0
 8008576:	2a01      	cmp	r2, #1
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	dc02      	bgt.n	8008582 <_printf_float+0x15e>
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	07d2      	lsls	r2, r2, #31
 8008580:	d501      	bpl.n	8008586 <_printf_float+0x162>
 8008582:	3301      	adds	r3, #1
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800858a:	2b00      	cmp	r3, #0
 800858c:	d09b      	beq.n	80084c6 <_printf_float+0xa2>
 800858e:	232d      	movs	r3, #45	; 0x2d
 8008590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008594:	e797      	b.n	80084c6 <_printf_float+0xa2>
 8008596:	2947      	cmp	r1, #71	; 0x47
 8008598:	d1bc      	bne.n	8008514 <_printf_float+0xf0>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1ba      	bne.n	8008514 <_printf_float+0xf0>
 800859e:	2301      	movs	r3, #1
 80085a0:	e7b7      	b.n	8008512 <_printf_float+0xee>
 80085a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80085a6:	d118      	bne.n	80085da <_printf_float+0x1b6>
 80085a8:	2900      	cmp	r1, #0
 80085aa:	6863      	ldr	r3, [r4, #4]
 80085ac:	dd0b      	ble.n	80085c6 <_printf_float+0x1a2>
 80085ae:	6121      	str	r1, [r4, #16]
 80085b0:	b913      	cbnz	r3, 80085b8 <_printf_float+0x194>
 80085b2:	6822      	ldr	r2, [r4, #0]
 80085b4:	07d0      	lsls	r0, r2, #31
 80085b6:	d502      	bpl.n	80085be <_printf_float+0x19a>
 80085b8:	3301      	adds	r3, #1
 80085ba:	440b      	add	r3, r1
 80085bc:	6123      	str	r3, [r4, #16]
 80085be:	f04f 0a00 	mov.w	sl, #0
 80085c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80085c4:	e7df      	b.n	8008586 <_printf_float+0x162>
 80085c6:	b913      	cbnz	r3, 80085ce <_printf_float+0x1aa>
 80085c8:	6822      	ldr	r2, [r4, #0]
 80085ca:	07d2      	lsls	r2, r2, #31
 80085cc:	d501      	bpl.n	80085d2 <_printf_float+0x1ae>
 80085ce:	3302      	adds	r3, #2
 80085d0:	e7f4      	b.n	80085bc <_printf_float+0x198>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e7f2      	b.n	80085bc <_printf_float+0x198>
 80085d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80085da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085dc:	4299      	cmp	r1, r3
 80085de:	db05      	blt.n	80085ec <_printf_float+0x1c8>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	6121      	str	r1, [r4, #16]
 80085e4:	07d8      	lsls	r0, r3, #31
 80085e6:	d5ea      	bpl.n	80085be <_printf_float+0x19a>
 80085e8:	1c4b      	adds	r3, r1, #1
 80085ea:	e7e7      	b.n	80085bc <_printf_float+0x198>
 80085ec:	2900      	cmp	r1, #0
 80085ee:	bfcc      	ite	gt
 80085f0:	2201      	movgt	r2, #1
 80085f2:	f1c1 0202 	rsble	r2, r1, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	e7e0      	b.n	80085bc <_printf_float+0x198>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	055a      	lsls	r2, r3, #21
 80085fe:	d407      	bmi.n	8008610 <_printf_float+0x1ec>
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	4642      	mov	r2, r8
 8008604:	4631      	mov	r1, r6
 8008606:	4628      	mov	r0, r5
 8008608:	47b8      	blx	r7
 800860a:	3001      	adds	r0, #1
 800860c:	d12b      	bne.n	8008666 <_printf_float+0x242>
 800860e:	e764      	b.n	80084da <_printf_float+0xb6>
 8008610:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008614:	f240 80dd 	bls.w	80087d2 <_printf_float+0x3ae>
 8008618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	f7f8 f9c2 	bl	80009a8 <__aeabi_dcmpeq>
 8008624:	2800      	cmp	r0, #0
 8008626:	d033      	beq.n	8008690 <_printf_float+0x26c>
 8008628:	2301      	movs	r3, #1
 800862a:	4631      	mov	r1, r6
 800862c:	4628      	mov	r0, r5
 800862e:	4a35      	ldr	r2, [pc, #212]	; (8008704 <_printf_float+0x2e0>)
 8008630:	47b8      	blx	r7
 8008632:	3001      	adds	r0, #1
 8008634:	f43f af51 	beq.w	80084da <_printf_float+0xb6>
 8008638:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800863c:	429a      	cmp	r2, r3
 800863e:	db02      	blt.n	8008646 <_printf_float+0x222>
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	07d8      	lsls	r0, r3, #31
 8008644:	d50f      	bpl.n	8008666 <_printf_float+0x242>
 8008646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	f43f af42 	beq.w	80084da <_printf_float+0xb6>
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	f104 091a 	add.w	r9, r4, #26
 800865e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008660:	3b01      	subs	r3, #1
 8008662:	4543      	cmp	r3, r8
 8008664:	dc09      	bgt.n	800867a <_printf_float+0x256>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	079b      	lsls	r3, r3, #30
 800866a:	f100 8102 	bmi.w	8008872 <_printf_float+0x44e>
 800866e:	68e0      	ldr	r0, [r4, #12]
 8008670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008672:	4298      	cmp	r0, r3
 8008674:	bfb8      	it	lt
 8008676:	4618      	movlt	r0, r3
 8008678:	e731      	b.n	80084de <_printf_float+0xba>
 800867a:	2301      	movs	r3, #1
 800867c:	464a      	mov	r2, r9
 800867e:	4631      	mov	r1, r6
 8008680:	4628      	mov	r0, r5
 8008682:	47b8      	blx	r7
 8008684:	3001      	adds	r0, #1
 8008686:	f43f af28 	beq.w	80084da <_printf_float+0xb6>
 800868a:	f108 0801 	add.w	r8, r8, #1
 800868e:	e7e6      	b.n	800865e <_printf_float+0x23a>
 8008690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008692:	2b00      	cmp	r3, #0
 8008694:	dc38      	bgt.n	8008708 <_printf_float+0x2e4>
 8008696:	2301      	movs	r3, #1
 8008698:	4631      	mov	r1, r6
 800869a:	4628      	mov	r0, r5
 800869c:	4a19      	ldr	r2, [pc, #100]	; (8008704 <_printf_float+0x2e0>)
 800869e:	47b8      	blx	r7
 80086a0:	3001      	adds	r0, #1
 80086a2:	f43f af1a 	beq.w	80084da <_printf_float+0xb6>
 80086a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80086aa:	4313      	orrs	r3, r2
 80086ac:	d102      	bne.n	80086b4 <_printf_float+0x290>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	07d9      	lsls	r1, r3, #31
 80086b2:	d5d8      	bpl.n	8008666 <_printf_float+0x242>
 80086b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b8      	blx	r7
 80086be:	3001      	adds	r0, #1
 80086c0:	f43f af0b 	beq.w	80084da <_printf_float+0xb6>
 80086c4:	f04f 0900 	mov.w	r9, #0
 80086c8:	f104 0a1a 	add.w	sl, r4, #26
 80086cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ce:	425b      	negs	r3, r3
 80086d0:	454b      	cmp	r3, r9
 80086d2:	dc01      	bgt.n	80086d8 <_printf_float+0x2b4>
 80086d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086d6:	e794      	b.n	8008602 <_printf_float+0x1de>
 80086d8:	2301      	movs	r3, #1
 80086da:	4652      	mov	r2, sl
 80086dc:	4631      	mov	r1, r6
 80086de:	4628      	mov	r0, r5
 80086e0:	47b8      	blx	r7
 80086e2:	3001      	adds	r0, #1
 80086e4:	f43f aef9 	beq.w	80084da <_printf_float+0xb6>
 80086e8:	f109 0901 	add.w	r9, r9, #1
 80086ec:	e7ee      	b.n	80086cc <_printf_float+0x2a8>
 80086ee:	bf00      	nop
 80086f0:	7fefffff 	.word	0x7fefffff
 80086f4:	0800b5f8 	.word	0x0800b5f8
 80086f8:	0800b5fc 	.word	0x0800b5fc
 80086fc:	0800b604 	.word	0x0800b604
 8008700:	0800b600 	.word	0x0800b600
 8008704:	0800b608 	.word	0x0800b608
 8008708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800870a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800870c:	429a      	cmp	r2, r3
 800870e:	bfa8      	it	ge
 8008710:	461a      	movge	r2, r3
 8008712:	2a00      	cmp	r2, #0
 8008714:	4691      	mov	r9, r2
 8008716:	dc37      	bgt.n	8008788 <_printf_float+0x364>
 8008718:	f04f 0b00 	mov.w	fp, #0
 800871c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008720:	f104 021a 	add.w	r2, r4, #26
 8008724:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008728:	ebaa 0309 	sub.w	r3, sl, r9
 800872c:	455b      	cmp	r3, fp
 800872e:	dc33      	bgt.n	8008798 <_printf_float+0x374>
 8008730:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008734:	429a      	cmp	r2, r3
 8008736:	db3b      	blt.n	80087b0 <_printf_float+0x38c>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	07da      	lsls	r2, r3, #31
 800873c:	d438      	bmi.n	80087b0 <_printf_float+0x38c>
 800873e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008740:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008742:	eba2 030a 	sub.w	r3, r2, sl
 8008746:	eba2 0901 	sub.w	r9, r2, r1
 800874a:	4599      	cmp	r9, r3
 800874c:	bfa8      	it	ge
 800874e:	4699      	movge	r9, r3
 8008750:	f1b9 0f00 	cmp.w	r9, #0
 8008754:	dc34      	bgt.n	80087c0 <_printf_float+0x39c>
 8008756:	f04f 0800 	mov.w	r8, #0
 800875a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800875e:	f104 0a1a 	add.w	sl, r4, #26
 8008762:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008766:	1a9b      	subs	r3, r3, r2
 8008768:	eba3 0309 	sub.w	r3, r3, r9
 800876c:	4543      	cmp	r3, r8
 800876e:	f77f af7a 	ble.w	8008666 <_printf_float+0x242>
 8008772:	2301      	movs	r3, #1
 8008774:	4652      	mov	r2, sl
 8008776:	4631      	mov	r1, r6
 8008778:	4628      	mov	r0, r5
 800877a:	47b8      	blx	r7
 800877c:	3001      	adds	r0, #1
 800877e:	f43f aeac 	beq.w	80084da <_printf_float+0xb6>
 8008782:	f108 0801 	add.w	r8, r8, #1
 8008786:	e7ec      	b.n	8008762 <_printf_float+0x33e>
 8008788:	4613      	mov	r3, r2
 800878a:	4631      	mov	r1, r6
 800878c:	4642      	mov	r2, r8
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	d1c0      	bne.n	8008718 <_printf_float+0x2f4>
 8008796:	e6a0      	b.n	80084da <_printf_float+0xb6>
 8008798:	2301      	movs	r3, #1
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	920b      	str	r2, [sp, #44]	; 0x2c
 80087a0:	47b8      	blx	r7
 80087a2:	3001      	adds	r0, #1
 80087a4:	f43f ae99 	beq.w	80084da <_printf_float+0xb6>
 80087a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087aa:	f10b 0b01 	add.w	fp, fp, #1
 80087ae:	e7b9      	b.n	8008724 <_printf_float+0x300>
 80087b0:	4631      	mov	r1, r6
 80087b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087b6:	4628      	mov	r0, r5
 80087b8:	47b8      	blx	r7
 80087ba:	3001      	adds	r0, #1
 80087bc:	d1bf      	bne.n	800873e <_printf_float+0x31a>
 80087be:	e68c      	b.n	80084da <_printf_float+0xb6>
 80087c0:	464b      	mov	r3, r9
 80087c2:	4631      	mov	r1, r6
 80087c4:	4628      	mov	r0, r5
 80087c6:	eb08 020a 	add.w	r2, r8, sl
 80087ca:	47b8      	blx	r7
 80087cc:	3001      	adds	r0, #1
 80087ce:	d1c2      	bne.n	8008756 <_printf_float+0x332>
 80087d0:	e683      	b.n	80084da <_printf_float+0xb6>
 80087d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087d4:	2a01      	cmp	r2, #1
 80087d6:	dc01      	bgt.n	80087dc <_printf_float+0x3b8>
 80087d8:	07db      	lsls	r3, r3, #31
 80087da:	d537      	bpl.n	800884c <_printf_float+0x428>
 80087dc:	2301      	movs	r3, #1
 80087de:	4642      	mov	r2, r8
 80087e0:	4631      	mov	r1, r6
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b8      	blx	r7
 80087e6:	3001      	adds	r0, #1
 80087e8:	f43f ae77 	beq.w	80084da <_printf_float+0xb6>
 80087ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087f0:	4631      	mov	r1, r6
 80087f2:	4628      	mov	r0, r5
 80087f4:	47b8      	blx	r7
 80087f6:	3001      	adds	r0, #1
 80087f8:	f43f ae6f 	beq.w	80084da <_printf_float+0xb6>
 80087fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008800:	2200      	movs	r2, #0
 8008802:	2300      	movs	r3, #0
 8008804:	f7f8 f8d0 	bl	80009a8 <__aeabi_dcmpeq>
 8008808:	b9d8      	cbnz	r0, 8008842 <_printf_float+0x41e>
 800880a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880c:	f108 0201 	add.w	r2, r8, #1
 8008810:	3b01      	subs	r3, #1
 8008812:	4631      	mov	r1, r6
 8008814:	4628      	mov	r0, r5
 8008816:	47b8      	blx	r7
 8008818:	3001      	adds	r0, #1
 800881a:	d10e      	bne.n	800883a <_printf_float+0x416>
 800881c:	e65d      	b.n	80084da <_printf_float+0xb6>
 800881e:	2301      	movs	r3, #1
 8008820:	464a      	mov	r2, r9
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	47b8      	blx	r7
 8008828:	3001      	adds	r0, #1
 800882a:	f43f ae56 	beq.w	80084da <_printf_float+0xb6>
 800882e:	f108 0801 	add.w	r8, r8, #1
 8008832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008834:	3b01      	subs	r3, #1
 8008836:	4543      	cmp	r3, r8
 8008838:	dcf1      	bgt.n	800881e <_printf_float+0x3fa>
 800883a:	4653      	mov	r3, sl
 800883c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008840:	e6e0      	b.n	8008604 <_printf_float+0x1e0>
 8008842:	f04f 0800 	mov.w	r8, #0
 8008846:	f104 091a 	add.w	r9, r4, #26
 800884a:	e7f2      	b.n	8008832 <_printf_float+0x40e>
 800884c:	2301      	movs	r3, #1
 800884e:	4642      	mov	r2, r8
 8008850:	e7df      	b.n	8008812 <_printf_float+0x3ee>
 8008852:	2301      	movs	r3, #1
 8008854:	464a      	mov	r2, r9
 8008856:	4631      	mov	r1, r6
 8008858:	4628      	mov	r0, r5
 800885a:	47b8      	blx	r7
 800885c:	3001      	adds	r0, #1
 800885e:	f43f ae3c 	beq.w	80084da <_printf_float+0xb6>
 8008862:	f108 0801 	add.w	r8, r8, #1
 8008866:	68e3      	ldr	r3, [r4, #12]
 8008868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800886a:	1a5b      	subs	r3, r3, r1
 800886c:	4543      	cmp	r3, r8
 800886e:	dcf0      	bgt.n	8008852 <_printf_float+0x42e>
 8008870:	e6fd      	b.n	800866e <_printf_float+0x24a>
 8008872:	f04f 0800 	mov.w	r8, #0
 8008876:	f104 0919 	add.w	r9, r4, #25
 800887a:	e7f4      	b.n	8008866 <_printf_float+0x442>

0800887c <_printf_common>:
 800887c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	4616      	mov	r6, r2
 8008882:	4699      	mov	r9, r3
 8008884:	688a      	ldr	r2, [r1, #8]
 8008886:	690b      	ldr	r3, [r1, #16]
 8008888:	4607      	mov	r7, r0
 800888a:	4293      	cmp	r3, r2
 800888c:	bfb8      	it	lt
 800888e:	4613      	movlt	r3, r2
 8008890:	6033      	str	r3, [r6, #0]
 8008892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008896:	460c      	mov	r4, r1
 8008898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800889c:	b10a      	cbz	r2, 80088a2 <_printf_common+0x26>
 800889e:	3301      	adds	r3, #1
 80088a0:	6033      	str	r3, [r6, #0]
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	0699      	lsls	r1, r3, #26
 80088a6:	bf42      	ittt	mi
 80088a8:	6833      	ldrmi	r3, [r6, #0]
 80088aa:	3302      	addmi	r3, #2
 80088ac:	6033      	strmi	r3, [r6, #0]
 80088ae:	6825      	ldr	r5, [r4, #0]
 80088b0:	f015 0506 	ands.w	r5, r5, #6
 80088b4:	d106      	bne.n	80088c4 <_printf_common+0x48>
 80088b6:	f104 0a19 	add.w	sl, r4, #25
 80088ba:	68e3      	ldr	r3, [r4, #12]
 80088bc:	6832      	ldr	r2, [r6, #0]
 80088be:	1a9b      	subs	r3, r3, r2
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	dc28      	bgt.n	8008916 <_printf_common+0x9a>
 80088c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088c8:	1e13      	subs	r3, r2, #0
 80088ca:	6822      	ldr	r2, [r4, #0]
 80088cc:	bf18      	it	ne
 80088ce:	2301      	movne	r3, #1
 80088d0:	0692      	lsls	r2, r2, #26
 80088d2:	d42d      	bmi.n	8008930 <_printf_common+0xb4>
 80088d4:	4649      	mov	r1, r9
 80088d6:	4638      	mov	r0, r7
 80088d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088dc:	47c0      	blx	r8
 80088de:	3001      	adds	r0, #1
 80088e0:	d020      	beq.n	8008924 <_printf_common+0xa8>
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	68e5      	ldr	r5, [r4, #12]
 80088e6:	f003 0306 	and.w	r3, r3, #6
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	bf18      	it	ne
 80088ee:	2500      	movne	r5, #0
 80088f0:	6832      	ldr	r2, [r6, #0]
 80088f2:	f04f 0600 	mov.w	r6, #0
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	bf08      	it	eq
 80088fa:	1aad      	subeq	r5, r5, r2
 80088fc:	6922      	ldr	r2, [r4, #16]
 80088fe:	bf08      	it	eq
 8008900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008904:	4293      	cmp	r3, r2
 8008906:	bfc4      	itt	gt
 8008908:	1a9b      	subgt	r3, r3, r2
 800890a:	18ed      	addgt	r5, r5, r3
 800890c:	341a      	adds	r4, #26
 800890e:	42b5      	cmp	r5, r6
 8008910:	d11a      	bne.n	8008948 <_printf_common+0xcc>
 8008912:	2000      	movs	r0, #0
 8008914:	e008      	b.n	8008928 <_printf_common+0xac>
 8008916:	2301      	movs	r3, #1
 8008918:	4652      	mov	r2, sl
 800891a:	4649      	mov	r1, r9
 800891c:	4638      	mov	r0, r7
 800891e:	47c0      	blx	r8
 8008920:	3001      	adds	r0, #1
 8008922:	d103      	bne.n	800892c <_printf_common+0xb0>
 8008924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892c:	3501      	adds	r5, #1
 800892e:	e7c4      	b.n	80088ba <_printf_common+0x3e>
 8008930:	2030      	movs	r0, #48	; 0x30
 8008932:	18e1      	adds	r1, r4, r3
 8008934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800893e:	4422      	add	r2, r4
 8008940:	3302      	adds	r3, #2
 8008942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008946:	e7c5      	b.n	80088d4 <_printf_common+0x58>
 8008948:	2301      	movs	r3, #1
 800894a:	4622      	mov	r2, r4
 800894c:	4649      	mov	r1, r9
 800894e:	4638      	mov	r0, r7
 8008950:	47c0      	blx	r8
 8008952:	3001      	adds	r0, #1
 8008954:	d0e6      	beq.n	8008924 <_printf_common+0xa8>
 8008956:	3601      	adds	r6, #1
 8008958:	e7d9      	b.n	800890e <_printf_common+0x92>
	...

0800895c <_printf_i>:
 800895c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	460c      	mov	r4, r1
 8008962:	7e27      	ldrb	r7, [r4, #24]
 8008964:	4691      	mov	r9, r2
 8008966:	2f78      	cmp	r7, #120	; 0x78
 8008968:	4680      	mov	r8, r0
 800896a:	469a      	mov	sl, r3
 800896c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800896e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008972:	d807      	bhi.n	8008984 <_printf_i+0x28>
 8008974:	2f62      	cmp	r7, #98	; 0x62
 8008976:	d80a      	bhi.n	800898e <_printf_i+0x32>
 8008978:	2f00      	cmp	r7, #0
 800897a:	f000 80d9 	beq.w	8008b30 <_printf_i+0x1d4>
 800897e:	2f58      	cmp	r7, #88	; 0x58
 8008980:	f000 80a4 	beq.w	8008acc <_printf_i+0x170>
 8008984:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800898c:	e03a      	b.n	8008a04 <_printf_i+0xa8>
 800898e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008992:	2b15      	cmp	r3, #21
 8008994:	d8f6      	bhi.n	8008984 <_printf_i+0x28>
 8008996:	a001      	add	r0, pc, #4	; (adr r0, 800899c <_printf_i+0x40>)
 8008998:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800899c:	080089f5 	.word	0x080089f5
 80089a0:	08008a09 	.word	0x08008a09
 80089a4:	08008985 	.word	0x08008985
 80089a8:	08008985 	.word	0x08008985
 80089ac:	08008985 	.word	0x08008985
 80089b0:	08008985 	.word	0x08008985
 80089b4:	08008a09 	.word	0x08008a09
 80089b8:	08008985 	.word	0x08008985
 80089bc:	08008985 	.word	0x08008985
 80089c0:	08008985 	.word	0x08008985
 80089c4:	08008985 	.word	0x08008985
 80089c8:	08008b17 	.word	0x08008b17
 80089cc:	08008a39 	.word	0x08008a39
 80089d0:	08008af9 	.word	0x08008af9
 80089d4:	08008985 	.word	0x08008985
 80089d8:	08008985 	.word	0x08008985
 80089dc:	08008b39 	.word	0x08008b39
 80089e0:	08008985 	.word	0x08008985
 80089e4:	08008a39 	.word	0x08008a39
 80089e8:	08008985 	.word	0x08008985
 80089ec:	08008985 	.word	0x08008985
 80089f0:	08008b01 	.word	0x08008b01
 80089f4:	680b      	ldr	r3, [r1, #0]
 80089f6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089fa:	1d1a      	adds	r2, r3, #4
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	600a      	str	r2, [r1, #0]
 8008a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a04:	2301      	movs	r3, #1
 8008a06:	e0a4      	b.n	8008b52 <_printf_i+0x1f6>
 8008a08:	6825      	ldr	r5, [r4, #0]
 8008a0a:	6808      	ldr	r0, [r1, #0]
 8008a0c:	062e      	lsls	r6, r5, #24
 8008a0e:	f100 0304 	add.w	r3, r0, #4
 8008a12:	d50a      	bpl.n	8008a2a <_printf_i+0xce>
 8008a14:	6805      	ldr	r5, [r0, #0]
 8008a16:	600b      	str	r3, [r1, #0]
 8008a18:	2d00      	cmp	r5, #0
 8008a1a:	da03      	bge.n	8008a24 <_printf_i+0xc8>
 8008a1c:	232d      	movs	r3, #45	; 0x2d
 8008a1e:	426d      	negs	r5, r5
 8008a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a24:	230a      	movs	r3, #10
 8008a26:	485e      	ldr	r0, [pc, #376]	; (8008ba0 <_printf_i+0x244>)
 8008a28:	e019      	b.n	8008a5e <_printf_i+0x102>
 8008a2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a2e:	6805      	ldr	r5, [r0, #0]
 8008a30:	600b      	str	r3, [r1, #0]
 8008a32:	bf18      	it	ne
 8008a34:	b22d      	sxthne	r5, r5
 8008a36:	e7ef      	b.n	8008a18 <_printf_i+0xbc>
 8008a38:	680b      	ldr	r3, [r1, #0]
 8008a3a:	6825      	ldr	r5, [r4, #0]
 8008a3c:	1d18      	adds	r0, r3, #4
 8008a3e:	6008      	str	r0, [r1, #0]
 8008a40:	0628      	lsls	r0, r5, #24
 8008a42:	d501      	bpl.n	8008a48 <_printf_i+0xec>
 8008a44:	681d      	ldr	r5, [r3, #0]
 8008a46:	e002      	b.n	8008a4e <_printf_i+0xf2>
 8008a48:	0669      	lsls	r1, r5, #25
 8008a4a:	d5fb      	bpl.n	8008a44 <_printf_i+0xe8>
 8008a4c:	881d      	ldrh	r5, [r3, #0]
 8008a4e:	2f6f      	cmp	r7, #111	; 0x6f
 8008a50:	bf0c      	ite	eq
 8008a52:	2308      	moveq	r3, #8
 8008a54:	230a      	movne	r3, #10
 8008a56:	4852      	ldr	r0, [pc, #328]	; (8008ba0 <_printf_i+0x244>)
 8008a58:	2100      	movs	r1, #0
 8008a5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a5e:	6866      	ldr	r6, [r4, #4]
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	bfa8      	it	ge
 8008a64:	6821      	ldrge	r1, [r4, #0]
 8008a66:	60a6      	str	r6, [r4, #8]
 8008a68:	bfa4      	itt	ge
 8008a6a:	f021 0104 	bicge.w	r1, r1, #4
 8008a6e:	6021      	strge	r1, [r4, #0]
 8008a70:	b90d      	cbnz	r5, 8008a76 <_printf_i+0x11a>
 8008a72:	2e00      	cmp	r6, #0
 8008a74:	d04d      	beq.n	8008b12 <_printf_i+0x1b6>
 8008a76:	4616      	mov	r6, r2
 8008a78:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a7c:	fb03 5711 	mls	r7, r3, r1, r5
 8008a80:	5dc7      	ldrb	r7, [r0, r7]
 8008a82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a86:	462f      	mov	r7, r5
 8008a88:	42bb      	cmp	r3, r7
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	d9f4      	bls.n	8008a78 <_printf_i+0x11c>
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	d10b      	bne.n	8008aaa <_printf_i+0x14e>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	07df      	lsls	r7, r3, #31
 8008a96:	d508      	bpl.n	8008aaa <_printf_i+0x14e>
 8008a98:	6923      	ldr	r3, [r4, #16]
 8008a9a:	6861      	ldr	r1, [r4, #4]
 8008a9c:	4299      	cmp	r1, r3
 8008a9e:	bfde      	ittt	le
 8008aa0:	2330      	movle	r3, #48	; 0x30
 8008aa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008aa6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008aaa:	1b92      	subs	r2, r2, r6
 8008aac:	6122      	str	r2, [r4, #16]
 8008aae:	464b      	mov	r3, r9
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f8cd a000 	str.w	sl, [sp]
 8008ab8:	aa03      	add	r2, sp, #12
 8008aba:	f7ff fedf 	bl	800887c <_printf_common>
 8008abe:	3001      	adds	r0, #1
 8008ac0:	d14c      	bne.n	8008b5c <_printf_i+0x200>
 8008ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ac6:	b004      	add	sp, #16
 8008ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008acc:	4834      	ldr	r0, [pc, #208]	; (8008ba0 <_printf_i+0x244>)
 8008ace:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ad2:	680e      	ldr	r6, [r1, #0]
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ada:	061f      	lsls	r7, r3, #24
 8008adc:	600e      	str	r6, [r1, #0]
 8008ade:	d514      	bpl.n	8008b0a <_printf_i+0x1ae>
 8008ae0:	07d9      	lsls	r1, r3, #31
 8008ae2:	bf44      	itt	mi
 8008ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8008ae8:	6023      	strmi	r3, [r4, #0]
 8008aea:	b91d      	cbnz	r5, 8008af4 <_printf_i+0x198>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	f023 0320 	bic.w	r3, r3, #32
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	2310      	movs	r3, #16
 8008af6:	e7af      	b.n	8008a58 <_printf_i+0xfc>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	f043 0320 	orr.w	r3, r3, #32
 8008afe:	6023      	str	r3, [r4, #0]
 8008b00:	2378      	movs	r3, #120	; 0x78
 8008b02:	4828      	ldr	r0, [pc, #160]	; (8008ba4 <_printf_i+0x248>)
 8008b04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b08:	e7e3      	b.n	8008ad2 <_printf_i+0x176>
 8008b0a:	065e      	lsls	r6, r3, #25
 8008b0c:	bf48      	it	mi
 8008b0e:	b2ad      	uxthmi	r5, r5
 8008b10:	e7e6      	b.n	8008ae0 <_printf_i+0x184>
 8008b12:	4616      	mov	r6, r2
 8008b14:	e7bb      	b.n	8008a8e <_printf_i+0x132>
 8008b16:	680b      	ldr	r3, [r1, #0]
 8008b18:	6826      	ldr	r6, [r4, #0]
 8008b1a:	1d1d      	adds	r5, r3, #4
 8008b1c:	6960      	ldr	r0, [r4, #20]
 8008b1e:	600d      	str	r5, [r1, #0]
 8008b20:	0635      	lsls	r5, r6, #24
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	d501      	bpl.n	8008b2a <_printf_i+0x1ce>
 8008b26:	6018      	str	r0, [r3, #0]
 8008b28:	e002      	b.n	8008b30 <_printf_i+0x1d4>
 8008b2a:	0671      	lsls	r1, r6, #25
 8008b2c:	d5fb      	bpl.n	8008b26 <_printf_i+0x1ca>
 8008b2e:	8018      	strh	r0, [r3, #0]
 8008b30:	2300      	movs	r3, #0
 8008b32:	4616      	mov	r6, r2
 8008b34:	6123      	str	r3, [r4, #16]
 8008b36:	e7ba      	b.n	8008aae <_printf_i+0x152>
 8008b38:	680b      	ldr	r3, [r1, #0]
 8008b3a:	1d1a      	adds	r2, r3, #4
 8008b3c:	600a      	str	r2, [r1, #0]
 8008b3e:	681e      	ldr	r6, [r3, #0]
 8008b40:	2100      	movs	r1, #0
 8008b42:	4630      	mov	r0, r6
 8008b44:	6862      	ldr	r2, [r4, #4]
 8008b46:	f000 fee1 	bl	800990c <memchr>
 8008b4a:	b108      	cbz	r0, 8008b50 <_printf_i+0x1f4>
 8008b4c:	1b80      	subs	r0, r0, r6
 8008b4e:	6060      	str	r0, [r4, #4]
 8008b50:	6863      	ldr	r3, [r4, #4]
 8008b52:	6123      	str	r3, [r4, #16]
 8008b54:	2300      	movs	r3, #0
 8008b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b5a:	e7a8      	b.n	8008aae <_printf_i+0x152>
 8008b5c:	4632      	mov	r2, r6
 8008b5e:	4649      	mov	r1, r9
 8008b60:	4640      	mov	r0, r8
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	47d0      	blx	sl
 8008b66:	3001      	adds	r0, #1
 8008b68:	d0ab      	beq.n	8008ac2 <_printf_i+0x166>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	079b      	lsls	r3, r3, #30
 8008b6e:	d413      	bmi.n	8008b98 <_printf_i+0x23c>
 8008b70:	68e0      	ldr	r0, [r4, #12]
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	4298      	cmp	r0, r3
 8008b76:	bfb8      	it	lt
 8008b78:	4618      	movlt	r0, r3
 8008b7a:	e7a4      	b.n	8008ac6 <_printf_i+0x16a>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4632      	mov	r2, r6
 8008b80:	4649      	mov	r1, r9
 8008b82:	4640      	mov	r0, r8
 8008b84:	47d0      	blx	sl
 8008b86:	3001      	adds	r0, #1
 8008b88:	d09b      	beq.n	8008ac2 <_printf_i+0x166>
 8008b8a:	3501      	adds	r5, #1
 8008b8c:	68e3      	ldr	r3, [r4, #12]
 8008b8e:	9903      	ldr	r1, [sp, #12]
 8008b90:	1a5b      	subs	r3, r3, r1
 8008b92:	42ab      	cmp	r3, r5
 8008b94:	dcf2      	bgt.n	8008b7c <_printf_i+0x220>
 8008b96:	e7eb      	b.n	8008b70 <_printf_i+0x214>
 8008b98:	2500      	movs	r5, #0
 8008b9a:	f104 0619 	add.w	r6, r4, #25
 8008b9e:	e7f5      	b.n	8008b8c <_printf_i+0x230>
 8008ba0:	0800b60a 	.word	0x0800b60a
 8008ba4:	0800b61b 	.word	0x0800b61b

08008ba8 <_sbrk_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	2300      	movs	r3, #0
 8008bac:	4d05      	ldr	r5, [pc, #20]	; (8008bc4 <_sbrk_r+0x1c>)
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	602b      	str	r3, [r5, #0]
 8008bb4:	f002 f9ae 	bl	800af14 <_sbrk>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_sbrk_r+0x1a>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_sbrk_r+0x1a>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	20000834 	.word	0x20000834

08008bc8 <siprintf>:
 8008bc8:	b40e      	push	{r1, r2, r3}
 8008bca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bce:	b500      	push	{lr}
 8008bd0:	b09c      	sub	sp, #112	; 0x70
 8008bd2:	ab1d      	add	r3, sp, #116	; 0x74
 8008bd4:	9002      	str	r0, [sp, #8]
 8008bd6:	9006      	str	r0, [sp, #24]
 8008bd8:	9107      	str	r1, [sp, #28]
 8008bda:	9104      	str	r1, [sp, #16]
 8008bdc:	4808      	ldr	r0, [pc, #32]	; (8008c00 <siprintf+0x38>)
 8008bde:	4909      	ldr	r1, [pc, #36]	; (8008c04 <siprintf+0x3c>)
 8008be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be4:	9105      	str	r1, [sp, #20]
 8008be6:	6800      	ldr	r0, [r0, #0]
 8008be8:	a902      	add	r1, sp, #8
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	f001 fa94 	bl	800a118 <_svfiprintf_r>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	9b02      	ldr	r3, [sp, #8]
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	b01c      	add	sp, #112	; 0x70
 8008bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bfc:	b003      	add	sp, #12
 8008bfe:	4770      	bx	lr
 8008c00:	20000014 	.word	0x20000014
 8008c04:	ffff0208 	.word	0xffff0208

08008c08 <quorem>:
 8008c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	6903      	ldr	r3, [r0, #16]
 8008c0e:	690c      	ldr	r4, [r1, #16]
 8008c10:	4607      	mov	r7, r0
 8008c12:	42a3      	cmp	r3, r4
 8008c14:	f2c0 8083 	blt.w	8008d1e <quorem+0x116>
 8008c18:	3c01      	subs	r4, #1
 8008c1a:	f100 0514 	add.w	r5, r0, #20
 8008c1e:	f101 0814 	add.w	r8, r1, #20
 8008c22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c30:	3301      	adds	r3, #1
 8008c32:	429a      	cmp	r2, r3
 8008c34:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c40:	d332      	bcc.n	8008ca8 <quorem+0xa0>
 8008c42:	f04f 0e00 	mov.w	lr, #0
 8008c46:	4640      	mov	r0, r8
 8008c48:	46ac      	mov	ip, r5
 8008c4a:	46f2      	mov	sl, lr
 8008c4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c50:	b293      	uxth	r3, r2
 8008c52:	fb06 e303 	mla	r3, r6, r3, lr
 8008c56:	0c12      	lsrs	r2, r2, #16
 8008c58:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c5c:	fb06 e202 	mla	r2, r6, r2, lr
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	ebaa 0303 	sub.w	r3, sl, r3
 8008c66:	f8dc a000 	ldr.w	sl, [ip]
 8008c6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c6e:	fa1f fa8a 	uxth.w	sl, sl
 8008c72:	4453      	add	r3, sl
 8008c74:	fa1f fa82 	uxth.w	sl, r2
 8008c78:	f8dc 2000 	ldr.w	r2, [ip]
 8008c7c:	4581      	cmp	r9, r0
 8008c7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008c82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c90:	f84c 3b04 	str.w	r3, [ip], #4
 8008c94:	d2da      	bcs.n	8008c4c <quorem+0x44>
 8008c96:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c9a:	b92b      	cbnz	r3, 8008ca8 <quorem+0xa0>
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	3b04      	subs	r3, #4
 8008ca0:	429d      	cmp	r5, r3
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	d32f      	bcc.n	8008d06 <quorem+0xfe>
 8008ca6:	613c      	str	r4, [r7, #16]
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f001 f8c3 	bl	8009e34 <__mcmp>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	db25      	blt.n	8008cfe <quorem+0xf6>
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f04f 0c00 	mov.w	ip, #0
 8008cb8:	3601      	adds	r6, #1
 8008cba:	f858 1b04 	ldr.w	r1, [r8], #4
 8008cbe:	f8d0 e000 	ldr.w	lr, [r0]
 8008cc2:	b28b      	uxth	r3, r1
 8008cc4:	ebac 0303 	sub.w	r3, ip, r3
 8008cc8:	fa1f f28e 	uxth.w	r2, lr
 8008ccc:	4413      	add	r3, r2
 8008cce:	0c0a      	lsrs	r2, r1, #16
 8008cd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cde:	45c1      	cmp	r9, r8
 8008ce0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ce4:	f840 3b04 	str.w	r3, [r0], #4
 8008ce8:	d2e7      	bcs.n	8008cba <quorem+0xb2>
 8008cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cf2:	b922      	cbnz	r2, 8008cfe <quorem+0xf6>
 8008cf4:	3b04      	subs	r3, #4
 8008cf6:	429d      	cmp	r5, r3
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	d30a      	bcc.n	8008d12 <quorem+0x10a>
 8008cfc:	613c      	str	r4, [r7, #16]
 8008cfe:	4630      	mov	r0, r6
 8008d00:	b003      	add	sp, #12
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	6812      	ldr	r2, [r2, #0]
 8008d08:	3b04      	subs	r3, #4
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	d1cb      	bne.n	8008ca6 <quorem+0x9e>
 8008d0e:	3c01      	subs	r4, #1
 8008d10:	e7c6      	b.n	8008ca0 <quorem+0x98>
 8008d12:	6812      	ldr	r2, [r2, #0]
 8008d14:	3b04      	subs	r3, #4
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	d1f0      	bne.n	8008cfc <quorem+0xf4>
 8008d1a:	3c01      	subs	r4, #1
 8008d1c:	e7eb      	b.n	8008cf6 <quorem+0xee>
 8008d1e:	2000      	movs	r0, #0
 8008d20:	e7ee      	b.n	8008d00 <quorem+0xf8>
 8008d22:	0000      	movs	r0, r0
 8008d24:	0000      	movs	r0, r0
	...

08008d28 <_dtoa_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	4616      	mov	r6, r2
 8008d2e:	461f      	mov	r7, r3
 8008d30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008d32:	b099      	sub	sp, #100	; 0x64
 8008d34:	4605      	mov	r5, r0
 8008d36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008d3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008d3e:	b974      	cbnz	r4, 8008d5e <_dtoa_r+0x36>
 8008d40:	2010      	movs	r0, #16
 8008d42:	f7ff fa0d 	bl	8008160 <malloc>
 8008d46:	4602      	mov	r2, r0
 8008d48:	6268      	str	r0, [r5, #36]	; 0x24
 8008d4a:	b920      	cbnz	r0, 8008d56 <_dtoa_r+0x2e>
 8008d4c:	21ea      	movs	r1, #234	; 0xea
 8008d4e:	4bae      	ldr	r3, [pc, #696]	; (8009008 <_dtoa_r+0x2e0>)
 8008d50:	48ae      	ldr	r0, [pc, #696]	; (800900c <_dtoa_r+0x2e4>)
 8008d52:	f001 fae1 	bl	800a318 <__assert_func>
 8008d56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d5a:	6004      	str	r4, [r0, #0]
 8008d5c:	60c4      	str	r4, [r0, #12]
 8008d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d60:	6819      	ldr	r1, [r3, #0]
 8008d62:	b151      	cbz	r1, 8008d7a <_dtoa_r+0x52>
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	2301      	movs	r3, #1
 8008d68:	4093      	lsls	r3, r2
 8008d6a:	604a      	str	r2, [r1, #4]
 8008d6c:	608b      	str	r3, [r1, #8]
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 fe26 	bl	80099c0 <_Bfree>
 8008d74:	2200      	movs	r2, #0
 8008d76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	1e3b      	subs	r3, r7, #0
 8008d7c:	bfaf      	iteee	ge
 8008d7e:	2300      	movge	r3, #0
 8008d80:	2201      	movlt	r2, #1
 8008d82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d86:	9305      	strlt	r3, [sp, #20]
 8008d88:	bfa8      	it	ge
 8008d8a:	f8c8 3000 	strge.w	r3, [r8]
 8008d8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008d92:	4b9f      	ldr	r3, [pc, #636]	; (8009010 <_dtoa_r+0x2e8>)
 8008d94:	bfb8      	it	lt
 8008d96:	f8c8 2000 	strlt.w	r2, [r8]
 8008d9a:	ea33 0309 	bics.w	r3, r3, r9
 8008d9e:	d119      	bne.n	8008dd4 <_dtoa_r+0xac>
 8008da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008da4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dac:	4333      	orrs	r3, r6
 8008dae:	f000 8580 	beq.w	80098b2 <_dtoa_r+0xb8a>
 8008db2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008db4:	b953      	cbnz	r3, 8008dcc <_dtoa_r+0xa4>
 8008db6:	4b97      	ldr	r3, [pc, #604]	; (8009014 <_dtoa_r+0x2ec>)
 8008db8:	e022      	b.n	8008e00 <_dtoa_r+0xd8>
 8008dba:	4b97      	ldr	r3, [pc, #604]	; (8009018 <_dtoa_r+0x2f0>)
 8008dbc:	9308      	str	r3, [sp, #32]
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	9808      	ldr	r0, [sp, #32]
 8008dc6:	b019      	add	sp, #100	; 0x64
 8008dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dcc:	4b91      	ldr	r3, [pc, #580]	; (8009014 <_dtoa_r+0x2ec>)
 8008dce:	9308      	str	r3, [sp, #32]
 8008dd0:	3303      	adds	r3, #3
 8008dd2:	e7f5      	b.n	8008dc0 <_dtoa_r+0x98>
 8008dd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008dd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008de0:	2200      	movs	r2, #0
 8008de2:	2300      	movs	r3, #0
 8008de4:	f7f7 fde0 	bl	80009a8 <__aeabi_dcmpeq>
 8008de8:	4680      	mov	r8, r0
 8008dea:	b158      	cbz	r0, 8008e04 <_dtoa_r+0xdc>
 8008dec:	2301      	movs	r3, #1
 8008dee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8559 	beq.w	80098ac <_dtoa_r+0xb84>
 8008dfa:	4888      	ldr	r0, [pc, #544]	; (800901c <_dtoa_r+0x2f4>)
 8008dfc:	6018      	str	r0, [r3, #0]
 8008dfe:	1e43      	subs	r3, r0, #1
 8008e00:	9308      	str	r3, [sp, #32]
 8008e02:	e7df      	b.n	8008dc4 <_dtoa_r+0x9c>
 8008e04:	ab16      	add	r3, sp, #88	; 0x58
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	ab17      	add	r3, sp, #92	; 0x5c
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e12:	f001 f8bb 	bl	8009f8c <__d2b>
 8008e16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008e1a:	4682      	mov	sl, r0
 8008e1c:	2c00      	cmp	r4, #0
 8008e1e:	d07e      	beq.n	8008f1e <_dtoa_r+0x1f6>
 8008e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008e32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008e36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	4b78      	ldr	r3, [pc, #480]	; (8009020 <_dtoa_r+0x2f8>)
 8008e3e:	f7f7 f993 	bl	8000168 <__aeabi_dsub>
 8008e42:	a36b      	add	r3, pc, #428	; (adr r3, 8008ff0 <_dtoa_r+0x2c8>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fb46 	bl	80004d8 <__aeabi_dmul>
 8008e4c:	a36a      	add	r3, pc, #424	; (adr r3, 8008ff8 <_dtoa_r+0x2d0>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 f98b 	bl	800016c <__adddf3>
 8008e56:	4606      	mov	r6, r0
 8008e58:	4620      	mov	r0, r4
 8008e5a:	460f      	mov	r7, r1
 8008e5c:	f7f7 fad2 	bl	8000404 <__aeabi_i2d>
 8008e60:	a367      	add	r3, pc, #412	; (adr r3, 8009000 <_dtoa_r+0x2d8>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	f7f7 fb37 	bl	80004d8 <__aeabi_dmul>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4630      	mov	r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	f7f7 f97b 	bl	800016c <__adddf3>
 8008e76:	4606      	mov	r6, r0
 8008e78:	460f      	mov	r7, r1
 8008e7a:	f7f7 fddd 	bl	8000a38 <__aeabi_d2iz>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	4681      	mov	r9, r0
 8008e82:	2300      	movs	r3, #0
 8008e84:	4630      	mov	r0, r6
 8008e86:	4639      	mov	r1, r7
 8008e88:	f7f7 fd98 	bl	80009bc <__aeabi_dcmplt>
 8008e8c:	b148      	cbz	r0, 8008ea2 <_dtoa_r+0x17a>
 8008e8e:	4648      	mov	r0, r9
 8008e90:	f7f7 fab8 	bl	8000404 <__aeabi_i2d>
 8008e94:	4632      	mov	r2, r6
 8008e96:	463b      	mov	r3, r7
 8008e98:	f7f7 fd86 	bl	80009a8 <__aeabi_dcmpeq>
 8008e9c:	b908      	cbnz	r0, 8008ea2 <_dtoa_r+0x17a>
 8008e9e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008ea2:	f1b9 0f16 	cmp.w	r9, #22
 8008ea6:	d857      	bhi.n	8008f58 <_dtoa_r+0x230>
 8008ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008eac:	4b5d      	ldr	r3, [pc, #372]	; (8009024 <_dtoa_r+0x2fc>)
 8008eae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	f7f7 fd81 	bl	80009bc <__aeabi_dcmplt>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d04e      	beq.n	8008f5c <_dtoa_r+0x234>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ec6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ec8:	1b1c      	subs	r4, r3, r4
 8008eca:	1e63      	subs	r3, r4, #1
 8008ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ece:	bf49      	itett	mi
 8008ed0:	f1c4 0301 	rsbmi	r3, r4, #1
 8008ed4:	2300      	movpl	r3, #0
 8008ed6:	9306      	strmi	r3, [sp, #24]
 8008ed8:	2300      	movmi	r3, #0
 8008eda:	bf54      	ite	pl
 8008edc:	9306      	strpl	r3, [sp, #24]
 8008ede:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008ee0:	f1b9 0f00 	cmp.w	r9, #0
 8008ee4:	db3c      	blt.n	8008f60 <_dtoa_r+0x238>
 8008ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008eec:	444b      	add	r3, r9
 8008eee:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ef6:	2b09      	cmp	r3, #9
 8008ef8:	d86c      	bhi.n	8008fd4 <_dtoa_r+0x2ac>
 8008efa:	2b05      	cmp	r3, #5
 8008efc:	bfc4      	itt	gt
 8008efe:	3b04      	subgt	r3, #4
 8008f00:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008f02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f04:	bfc8      	it	gt
 8008f06:	2400      	movgt	r4, #0
 8008f08:	f1a3 0302 	sub.w	r3, r3, #2
 8008f0c:	bfd8      	it	le
 8008f0e:	2401      	movle	r4, #1
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	f200 808b 	bhi.w	800902c <_dtoa_r+0x304>
 8008f16:	e8df f003 	tbb	[pc, r3]
 8008f1a:	4f2d      	.short	0x4f2d
 8008f1c:	5b4d      	.short	0x5b4d
 8008f1e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008f22:	441c      	add	r4, r3
 8008f24:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	bfc3      	ittte	gt
 8008f2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f30:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008f34:	fa09 f303 	lslgt.w	r3, r9, r3
 8008f38:	f1c3 0320 	rsble	r3, r3, #32
 8008f3c:	bfc6      	itte	gt
 8008f3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f42:	4318      	orrgt	r0, r3
 8008f44:	fa06 f003 	lslle.w	r0, r6, r3
 8008f48:	f7f7 fa4c 	bl	80003e4 <__aeabi_ui2d>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008f52:	3c01      	subs	r4, #1
 8008f54:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f56:	e770      	b.n	8008e3a <_dtoa_r+0x112>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e7b3      	b.n	8008ec4 <_dtoa_r+0x19c>
 8008f5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f5e:	e7b2      	b.n	8008ec6 <_dtoa_r+0x19e>
 8008f60:	9b06      	ldr	r3, [sp, #24]
 8008f62:	eba3 0309 	sub.w	r3, r3, r9
 8008f66:	9306      	str	r3, [sp, #24]
 8008f68:	f1c9 0300 	rsb	r3, r9, #0
 8008f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8008f6e:	2300      	movs	r3, #0
 8008f70:	930e      	str	r3, [sp, #56]	; 0x38
 8008f72:	e7bf      	b.n	8008ef4 <_dtoa_r+0x1cc>
 8008f74:	2300      	movs	r3, #0
 8008f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dc59      	bgt.n	8009032 <_dtoa_r+0x30a>
 8008f7e:	f04f 0b01 	mov.w	fp, #1
 8008f82:	465b      	mov	r3, fp
 8008f84:	f8cd b008 	str.w	fp, [sp, #8]
 8008f88:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008f90:	6042      	str	r2, [r0, #4]
 8008f92:	2204      	movs	r2, #4
 8008f94:	f102 0614 	add.w	r6, r2, #20
 8008f98:	429e      	cmp	r6, r3
 8008f9a:	6841      	ldr	r1, [r0, #4]
 8008f9c:	d94f      	bls.n	800903e <_dtoa_r+0x316>
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f000 fcce 	bl	8009940 <_Balloc>
 8008fa4:	9008      	str	r0, [sp, #32]
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d14d      	bne.n	8009046 <_dtoa_r+0x31e>
 8008faa:	4602      	mov	r2, r0
 8008fac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fb0:	4b1d      	ldr	r3, [pc, #116]	; (8009028 <_dtoa_r+0x300>)
 8008fb2:	e6cd      	b.n	8008d50 <_dtoa_r+0x28>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e7de      	b.n	8008f76 <_dtoa_r+0x24e>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fbe:	eb09 0b03 	add.w	fp, r9, r3
 8008fc2:	f10b 0301 	add.w	r3, fp, #1
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	9302      	str	r3, [sp, #8]
 8008fca:	bfb8      	it	lt
 8008fcc:	2301      	movlt	r3, #1
 8008fce:	e7dd      	b.n	8008f8c <_dtoa_r+0x264>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e7f2      	b.n	8008fba <_dtoa_r+0x292>
 8008fd4:	2401      	movs	r4, #1
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008fda:	9322      	str	r3, [sp, #136]	; 0x88
 8008fdc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2312      	movs	r3, #18
 8008fe4:	f8cd b008 	str.w	fp, [sp, #8]
 8008fe8:	9223      	str	r2, [sp, #140]	; 0x8c
 8008fea:	e7cf      	b.n	8008f8c <_dtoa_r+0x264>
 8008fec:	f3af 8000 	nop.w
 8008ff0:	636f4361 	.word	0x636f4361
 8008ff4:	3fd287a7 	.word	0x3fd287a7
 8008ff8:	8b60c8b3 	.word	0x8b60c8b3
 8008ffc:	3fc68a28 	.word	0x3fc68a28
 8009000:	509f79fb 	.word	0x509f79fb
 8009004:	3fd34413 	.word	0x3fd34413
 8009008:	0800b639 	.word	0x0800b639
 800900c:	0800b650 	.word	0x0800b650
 8009010:	7ff00000 	.word	0x7ff00000
 8009014:	0800b635 	.word	0x0800b635
 8009018:	0800b62c 	.word	0x0800b62c
 800901c:	0800b609 	.word	0x0800b609
 8009020:	3ff80000 	.word	0x3ff80000
 8009024:	0800b748 	.word	0x0800b748
 8009028:	0800b6af 	.word	0x0800b6af
 800902c:	2301      	movs	r3, #1
 800902e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009030:	e7d4      	b.n	8008fdc <_dtoa_r+0x2b4>
 8009032:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009036:	465b      	mov	r3, fp
 8009038:	f8cd b008 	str.w	fp, [sp, #8]
 800903c:	e7a6      	b.n	8008f8c <_dtoa_r+0x264>
 800903e:	3101      	adds	r1, #1
 8009040:	6041      	str	r1, [r0, #4]
 8009042:	0052      	lsls	r2, r2, #1
 8009044:	e7a6      	b.n	8008f94 <_dtoa_r+0x26c>
 8009046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009048:	9a08      	ldr	r2, [sp, #32]
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	9b02      	ldr	r3, [sp, #8]
 800904e:	2b0e      	cmp	r3, #14
 8009050:	f200 80a8 	bhi.w	80091a4 <_dtoa_r+0x47c>
 8009054:	2c00      	cmp	r4, #0
 8009056:	f000 80a5 	beq.w	80091a4 <_dtoa_r+0x47c>
 800905a:	f1b9 0f00 	cmp.w	r9, #0
 800905e:	dd34      	ble.n	80090ca <_dtoa_r+0x3a2>
 8009060:	4a9a      	ldr	r2, [pc, #616]	; (80092cc <_dtoa_r+0x5a4>)
 8009062:	f009 030f 	and.w	r3, r9, #15
 8009066:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800906a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800906e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009072:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009076:	ea4f 1429 	mov.w	r4, r9, asr #4
 800907a:	d016      	beq.n	80090aa <_dtoa_r+0x382>
 800907c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009080:	4b93      	ldr	r3, [pc, #588]	; (80092d0 <_dtoa_r+0x5a8>)
 8009082:	2703      	movs	r7, #3
 8009084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009088:	f7f7 fb50 	bl	800072c <__aeabi_ddiv>
 800908c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009090:	f004 040f 	and.w	r4, r4, #15
 8009094:	4e8e      	ldr	r6, [pc, #568]	; (80092d0 <_dtoa_r+0x5a8>)
 8009096:	b954      	cbnz	r4, 80090ae <_dtoa_r+0x386>
 8009098:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800909c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090a0:	f7f7 fb44 	bl	800072c <__aeabi_ddiv>
 80090a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090a8:	e029      	b.n	80090fe <_dtoa_r+0x3d6>
 80090aa:	2702      	movs	r7, #2
 80090ac:	e7f2      	b.n	8009094 <_dtoa_r+0x36c>
 80090ae:	07e1      	lsls	r1, r4, #31
 80090b0:	d508      	bpl.n	80090c4 <_dtoa_r+0x39c>
 80090b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090ba:	f7f7 fa0d 	bl	80004d8 <__aeabi_dmul>
 80090be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090c2:	3701      	adds	r7, #1
 80090c4:	1064      	asrs	r4, r4, #1
 80090c6:	3608      	adds	r6, #8
 80090c8:	e7e5      	b.n	8009096 <_dtoa_r+0x36e>
 80090ca:	f000 80a5 	beq.w	8009218 <_dtoa_r+0x4f0>
 80090ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090d2:	f1c9 0400 	rsb	r4, r9, #0
 80090d6:	4b7d      	ldr	r3, [pc, #500]	; (80092cc <_dtoa_r+0x5a4>)
 80090d8:	f004 020f 	and.w	r2, r4, #15
 80090dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	f7f7 f9f8 	bl	80004d8 <__aeabi_dmul>
 80090e8:	2702      	movs	r7, #2
 80090ea:	2300      	movs	r3, #0
 80090ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090f0:	4e77      	ldr	r6, [pc, #476]	; (80092d0 <_dtoa_r+0x5a8>)
 80090f2:	1124      	asrs	r4, r4, #4
 80090f4:	2c00      	cmp	r4, #0
 80090f6:	f040 8084 	bne.w	8009202 <_dtoa_r+0x4da>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1d2      	bne.n	80090a4 <_dtoa_r+0x37c>
 80090fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 808b 	beq.w	800921c <_dtoa_r+0x4f4>
 8009106:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800910a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800910e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009112:	2200      	movs	r2, #0
 8009114:	4b6f      	ldr	r3, [pc, #444]	; (80092d4 <_dtoa_r+0x5ac>)
 8009116:	f7f7 fc51 	bl	80009bc <__aeabi_dcmplt>
 800911a:	2800      	cmp	r0, #0
 800911c:	d07e      	beq.n	800921c <_dtoa_r+0x4f4>
 800911e:	9b02      	ldr	r3, [sp, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d07b      	beq.n	800921c <_dtoa_r+0x4f4>
 8009124:	f1bb 0f00 	cmp.w	fp, #0
 8009128:	dd38      	ble.n	800919c <_dtoa_r+0x474>
 800912a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800912e:	2200      	movs	r2, #0
 8009130:	4b69      	ldr	r3, [pc, #420]	; (80092d8 <_dtoa_r+0x5b0>)
 8009132:	f7f7 f9d1 	bl	80004d8 <__aeabi_dmul>
 8009136:	465c      	mov	r4, fp
 8009138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800913c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8009140:	3701      	adds	r7, #1
 8009142:	4638      	mov	r0, r7
 8009144:	f7f7 f95e 	bl	8000404 <__aeabi_i2d>
 8009148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800914c:	f7f7 f9c4 	bl	80004d8 <__aeabi_dmul>
 8009150:	2200      	movs	r2, #0
 8009152:	4b62      	ldr	r3, [pc, #392]	; (80092dc <_dtoa_r+0x5b4>)
 8009154:	f7f7 f80a 	bl	800016c <__adddf3>
 8009158:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800915c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009160:	9611      	str	r6, [sp, #68]	; 0x44
 8009162:	2c00      	cmp	r4, #0
 8009164:	d15d      	bne.n	8009222 <_dtoa_r+0x4fa>
 8009166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800916a:	2200      	movs	r2, #0
 800916c:	4b5c      	ldr	r3, [pc, #368]	; (80092e0 <_dtoa_r+0x5b8>)
 800916e:	f7f6 fffb 	bl	8000168 <__aeabi_dsub>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800917a:	4633      	mov	r3, r6
 800917c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800917e:	f7f7 fc3b 	bl	80009f8 <__aeabi_dcmpgt>
 8009182:	2800      	cmp	r0, #0
 8009184:	f040 829e 	bne.w	80096c4 <_dtoa_r+0x99c>
 8009188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800918c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800918e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009192:	f7f7 fc13 	bl	80009bc <__aeabi_dcmplt>
 8009196:	2800      	cmp	r0, #0
 8009198:	f040 8292 	bne.w	80096c0 <_dtoa_r+0x998>
 800919c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80091a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80091a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f2c0 8153 	blt.w	8009452 <_dtoa_r+0x72a>
 80091ac:	f1b9 0f0e 	cmp.w	r9, #14
 80091b0:	f300 814f 	bgt.w	8009452 <_dtoa_r+0x72a>
 80091b4:	4b45      	ldr	r3, [pc, #276]	; (80092cc <_dtoa_r+0x5a4>)
 80091b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80091ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80091c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f280 80db 	bge.w	8009380 <_dtoa_r+0x658>
 80091ca:	9b02      	ldr	r3, [sp, #8]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f300 80d7 	bgt.w	8009380 <_dtoa_r+0x658>
 80091d2:	f040 8274 	bne.w	80096be <_dtoa_r+0x996>
 80091d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091da:	2200      	movs	r2, #0
 80091dc:	4b40      	ldr	r3, [pc, #256]	; (80092e0 <_dtoa_r+0x5b8>)
 80091de:	f7f7 f97b 	bl	80004d8 <__aeabi_dmul>
 80091e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091e6:	f7f7 fbfd 	bl	80009e4 <__aeabi_dcmpge>
 80091ea:	9c02      	ldr	r4, [sp, #8]
 80091ec:	4626      	mov	r6, r4
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f040 824a 	bne.w	8009688 <_dtoa_r+0x960>
 80091f4:	2331      	movs	r3, #49	; 0x31
 80091f6:	9f08      	ldr	r7, [sp, #32]
 80091f8:	f109 0901 	add.w	r9, r9, #1
 80091fc:	f807 3b01 	strb.w	r3, [r7], #1
 8009200:	e246      	b.n	8009690 <_dtoa_r+0x968>
 8009202:	07e2      	lsls	r2, r4, #31
 8009204:	d505      	bpl.n	8009212 <_dtoa_r+0x4ea>
 8009206:	e9d6 2300 	ldrd	r2, r3, [r6]
 800920a:	f7f7 f965 	bl	80004d8 <__aeabi_dmul>
 800920e:	2301      	movs	r3, #1
 8009210:	3701      	adds	r7, #1
 8009212:	1064      	asrs	r4, r4, #1
 8009214:	3608      	adds	r6, #8
 8009216:	e76d      	b.n	80090f4 <_dtoa_r+0x3cc>
 8009218:	2702      	movs	r7, #2
 800921a:	e770      	b.n	80090fe <_dtoa_r+0x3d6>
 800921c:	46c8      	mov	r8, r9
 800921e:	9c02      	ldr	r4, [sp, #8]
 8009220:	e78f      	b.n	8009142 <_dtoa_r+0x41a>
 8009222:	9908      	ldr	r1, [sp, #32]
 8009224:	4b29      	ldr	r3, [pc, #164]	; (80092cc <_dtoa_r+0x5a4>)
 8009226:	4421      	add	r1, r4
 8009228:	9112      	str	r1, [sp, #72]	; 0x48
 800922a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800922c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009230:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009234:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009238:	2900      	cmp	r1, #0
 800923a:	d055      	beq.n	80092e8 <_dtoa_r+0x5c0>
 800923c:	2000      	movs	r0, #0
 800923e:	4929      	ldr	r1, [pc, #164]	; (80092e4 <_dtoa_r+0x5bc>)
 8009240:	f7f7 fa74 	bl	800072c <__aeabi_ddiv>
 8009244:	463b      	mov	r3, r7
 8009246:	4632      	mov	r2, r6
 8009248:	f7f6 ff8e 	bl	8000168 <__aeabi_dsub>
 800924c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009250:	9f08      	ldr	r7, [sp, #32]
 8009252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009256:	f7f7 fbef 	bl	8000a38 <__aeabi_d2iz>
 800925a:	4604      	mov	r4, r0
 800925c:	f7f7 f8d2 	bl	8000404 <__aeabi_i2d>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009268:	f7f6 ff7e 	bl	8000168 <__aeabi_dsub>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	3430      	adds	r4, #48	; 0x30
 8009272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800927a:	f807 4b01 	strb.w	r4, [r7], #1
 800927e:	f7f7 fb9d 	bl	80009bc <__aeabi_dcmplt>
 8009282:	2800      	cmp	r0, #0
 8009284:	d174      	bne.n	8009370 <_dtoa_r+0x648>
 8009286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800928a:	2000      	movs	r0, #0
 800928c:	4911      	ldr	r1, [pc, #68]	; (80092d4 <_dtoa_r+0x5ac>)
 800928e:	f7f6 ff6b 	bl	8000168 <__aeabi_dsub>
 8009292:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009296:	f7f7 fb91 	bl	80009bc <__aeabi_dcmplt>
 800929a:	2800      	cmp	r0, #0
 800929c:	f040 80b6 	bne.w	800940c <_dtoa_r+0x6e4>
 80092a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092a2:	429f      	cmp	r7, r3
 80092a4:	f43f af7a 	beq.w	800919c <_dtoa_r+0x474>
 80092a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092ac:	2200      	movs	r2, #0
 80092ae:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <_dtoa_r+0x5b0>)
 80092b0:	f7f7 f912 	bl	80004d8 <__aeabi_dmul>
 80092b4:	2200      	movs	r2, #0
 80092b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092be:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <_dtoa_r+0x5b0>)
 80092c0:	f7f7 f90a 	bl	80004d8 <__aeabi_dmul>
 80092c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092c8:	e7c3      	b.n	8009252 <_dtoa_r+0x52a>
 80092ca:	bf00      	nop
 80092cc:	0800b748 	.word	0x0800b748
 80092d0:	0800b720 	.word	0x0800b720
 80092d4:	3ff00000 	.word	0x3ff00000
 80092d8:	40240000 	.word	0x40240000
 80092dc:	401c0000 	.word	0x401c0000
 80092e0:	40140000 	.word	0x40140000
 80092e4:	3fe00000 	.word	0x3fe00000
 80092e8:	4630      	mov	r0, r6
 80092ea:	4639      	mov	r1, r7
 80092ec:	f7f7 f8f4 	bl	80004d8 <__aeabi_dmul>
 80092f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092f6:	9c08      	ldr	r4, [sp, #32]
 80092f8:	9314      	str	r3, [sp, #80]	; 0x50
 80092fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092fe:	f7f7 fb9b 	bl	8000a38 <__aeabi_d2iz>
 8009302:	9015      	str	r0, [sp, #84]	; 0x54
 8009304:	f7f7 f87e 	bl	8000404 <__aeabi_i2d>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009310:	f7f6 ff2a 	bl	8000168 <__aeabi_dsub>
 8009314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009316:	4606      	mov	r6, r0
 8009318:	3330      	adds	r3, #48	; 0x30
 800931a:	f804 3b01 	strb.w	r3, [r4], #1
 800931e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009320:	460f      	mov	r7, r1
 8009322:	429c      	cmp	r4, r3
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	d124      	bne.n	8009374 <_dtoa_r+0x64c>
 800932a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800932e:	4bb3      	ldr	r3, [pc, #716]	; (80095fc <_dtoa_r+0x8d4>)
 8009330:	f7f6 ff1c 	bl	800016c <__adddf3>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4630      	mov	r0, r6
 800933a:	4639      	mov	r1, r7
 800933c:	f7f7 fb5c 	bl	80009f8 <__aeabi_dcmpgt>
 8009340:	2800      	cmp	r0, #0
 8009342:	d162      	bne.n	800940a <_dtoa_r+0x6e2>
 8009344:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009348:	2000      	movs	r0, #0
 800934a:	49ac      	ldr	r1, [pc, #688]	; (80095fc <_dtoa_r+0x8d4>)
 800934c:	f7f6 ff0c 	bl	8000168 <__aeabi_dsub>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 fb30 	bl	80009bc <__aeabi_dcmplt>
 800935c:	2800      	cmp	r0, #0
 800935e:	f43f af1d 	beq.w	800919c <_dtoa_r+0x474>
 8009362:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009364:	1e7b      	subs	r3, r7, #1
 8009366:	9314      	str	r3, [sp, #80]	; 0x50
 8009368:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800936c:	2b30      	cmp	r3, #48	; 0x30
 800936e:	d0f8      	beq.n	8009362 <_dtoa_r+0x63a>
 8009370:	46c1      	mov	r9, r8
 8009372:	e03a      	b.n	80093ea <_dtoa_r+0x6c2>
 8009374:	4ba2      	ldr	r3, [pc, #648]	; (8009600 <_dtoa_r+0x8d8>)
 8009376:	f7f7 f8af 	bl	80004d8 <__aeabi_dmul>
 800937a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800937e:	e7bc      	b.n	80092fa <_dtoa_r+0x5d2>
 8009380:	9f08      	ldr	r7, [sp, #32]
 8009382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800938a:	f7f7 f9cf 	bl	800072c <__aeabi_ddiv>
 800938e:	f7f7 fb53 	bl	8000a38 <__aeabi_d2iz>
 8009392:	4604      	mov	r4, r0
 8009394:	f7f7 f836 	bl	8000404 <__aeabi_i2d>
 8009398:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800939c:	f7f7 f89c 	bl	80004d8 <__aeabi_dmul>
 80093a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80093a4:	460b      	mov	r3, r1
 80093a6:	4602      	mov	r2, r0
 80093a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093ac:	f7f6 fedc 	bl	8000168 <__aeabi_dsub>
 80093b0:	f807 6b01 	strb.w	r6, [r7], #1
 80093b4:	9e08      	ldr	r6, [sp, #32]
 80093b6:	9b02      	ldr	r3, [sp, #8]
 80093b8:	1bbe      	subs	r6, r7, r6
 80093ba:	42b3      	cmp	r3, r6
 80093bc:	d13a      	bne.n	8009434 <_dtoa_r+0x70c>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	f7f6 fed3 	bl	800016c <__adddf3>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093d2:	f7f7 fb11 	bl	80009f8 <__aeabi_dcmpgt>
 80093d6:	bb58      	cbnz	r0, 8009430 <_dtoa_r+0x708>
 80093d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e0:	f7f7 fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80093e4:	b108      	cbz	r0, 80093ea <_dtoa_r+0x6c2>
 80093e6:	07e1      	lsls	r1, r4, #31
 80093e8:	d422      	bmi.n	8009430 <_dtoa_r+0x708>
 80093ea:	4628      	mov	r0, r5
 80093ec:	4651      	mov	r1, sl
 80093ee:	f000 fae7 	bl	80099c0 <_Bfree>
 80093f2:	2300      	movs	r3, #0
 80093f4:	703b      	strb	r3, [r7, #0]
 80093f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093f8:	f109 0001 	add.w	r0, r9, #1
 80093fc:	6018      	str	r0, [r3, #0]
 80093fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009400:	2b00      	cmp	r3, #0
 8009402:	f43f acdf 	beq.w	8008dc4 <_dtoa_r+0x9c>
 8009406:	601f      	str	r7, [r3, #0]
 8009408:	e4dc      	b.n	8008dc4 <_dtoa_r+0x9c>
 800940a:	4627      	mov	r7, r4
 800940c:	463b      	mov	r3, r7
 800940e:	461f      	mov	r7, r3
 8009410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009414:	2a39      	cmp	r2, #57	; 0x39
 8009416:	d107      	bne.n	8009428 <_dtoa_r+0x700>
 8009418:	9a08      	ldr	r2, [sp, #32]
 800941a:	429a      	cmp	r2, r3
 800941c:	d1f7      	bne.n	800940e <_dtoa_r+0x6e6>
 800941e:	2230      	movs	r2, #48	; 0x30
 8009420:	9908      	ldr	r1, [sp, #32]
 8009422:	f108 0801 	add.w	r8, r8, #1
 8009426:	700a      	strb	r2, [r1, #0]
 8009428:	781a      	ldrb	r2, [r3, #0]
 800942a:	3201      	adds	r2, #1
 800942c:	701a      	strb	r2, [r3, #0]
 800942e:	e79f      	b.n	8009370 <_dtoa_r+0x648>
 8009430:	46c8      	mov	r8, r9
 8009432:	e7eb      	b.n	800940c <_dtoa_r+0x6e4>
 8009434:	2200      	movs	r2, #0
 8009436:	4b72      	ldr	r3, [pc, #456]	; (8009600 <_dtoa_r+0x8d8>)
 8009438:	f7f7 f84e 	bl	80004d8 <__aeabi_dmul>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009444:	2200      	movs	r2, #0
 8009446:	2300      	movs	r3, #0
 8009448:	f7f7 faae 	bl	80009a8 <__aeabi_dcmpeq>
 800944c:	2800      	cmp	r0, #0
 800944e:	d098      	beq.n	8009382 <_dtoa_r+0x65a>
 8009450:	e7cb      	b.n	80093ea <_dtoa_r+0x6c2>
 8009452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009454:	2a00      	cmp	r2, #0
 8009456:	f000 80cd 	beq.w	80095f4 <_dtoa_r+0x8cc>
 800945a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800945c:	2a01      	cmp	r2, #1
 800945e:	f300 80af 	bgt.w	80095c0 <_dtoa_r+0x898>
 8009462:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009464:	2a00      	cmp	r2, #0
 8009466:	f000 80a7 	beq.w	80095b8 <_dtoa_r+0x890>
 800946a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800946e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009470:	9f06      	ldr	r7, [sp, #24]
 8009472:	9a06      	ldr	r2, [sp, #24]
 8009474:	2101      	movs	r1, #1
 8009476:	441a      	add	r2, r3
 8009478:	9206      	str	r2, [sp, #24]
 800947a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800947c:	4628      	mov	r0, r5
 800947e:	441a      	add	r2, r3
 8009480:	9209      	str	r2, [sp, #36]	; 0x24
 8009482:	f000 fb57 	bl	8009b34 <__i2b>
 8009486:	4606      	mov	r6, r0
 8009488:	2f00      	cmp	r7, #0
 800948a:	dd0c      	ble.n	80094a6 <_dtoa_r+0x77e>
 800948c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948e:	2b00      	cmp	r3, #0
 8009490:	dd09      	ble.n	80094a6 <_dtoa_r+0x77e>
 8009492:	42bb      	cmp	r3, r7
 8009494:	bfa8      	it	ge
 8009496:	463b      	movge	r3, r7
 8009498:	9a06      	ldr	r2, [sp, #24]
 800949a:	1aff      	subs	r7, r7, r3
 800949c:	1ad2      	subs	r2, r2, r3
 800949e:	9206      	str	r2, [sp, #24]
 80094a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	9309      	str	r3, [sp, #36]	; 0x24
 80094a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a8:	b1f3      	cbz	r3, 80094e8 <_dtoa_r+0x7c0>
 80094aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 80a9 	beq.w	8009604 <_dtoa_r+0x8dc>
 80094b2:	2c00      	cmp	r4, #0
 80094b4:	dd10      	ble.n	80094d8 <_dtoa_r+0x7b0>
 80094b6:	4631      	mov	r1, r6
 80094b8:	4622      	mov	r2, r4
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 fbf4 	bl	8009ca8 <__pow5mult>
 80094c0:	4652      	mov	r2, sl
 80094c2:	4601      	mov	r1, r0
 80094c4:	4606      	mov	r6, r0
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 fb4a 	bl	8009b60 <__multiply>
 80094cc:	4680      	mov	r8, r0
 80094ce:	4651      	mov	r1, sl
 80094d0:	4628      	mov	r0, r5
 80094d2:	f000 fa75 	bl	80099c0 <_Bfree>
 80094d6:	46c2      	mov	sl, r8
 80094d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094da:	1b1a      	subs	r2, r3, r4
 80094dc:	d004      	beq.n	80094e8 <_dtoa_r+0x7c0>
 80094de:	4651      	mov	r1, sl
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 fbe1 	bl	8009ca8 <__pow5mult>
 80094e6:	4682      	mov	sl, r0
 80094e8:	2101      	movs	r1, #1
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 fb22 	bl	8009b34 <__i2b>
 80094f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094f2:	4604      	mov	r4, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f340 8087 	ble.w	8009608 <_dtoa_r+0x8e0>
 80094fa:	461a      	mov	r2, r3
 80094fc:	4601      	mov	r1, r0
 80094fe:	4628      	mov	r0, r5
 8009500:	f000 fbd2 	bl	8009ca8 <__pow5mult>
 8009504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009506:	4604      	mov	r4, r0
 8009508:	2b01      	cmp	r3, #1
 800950a:	f340 8080 	ble.w	800960e <_dtoa_r+0x8e6>
 800950e:	f04f 0800 	mov.w	r8, #0
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009518:	6918      	ldr	r0, [r3, #16]
 800951a:	f000 fabd 	bl	8009a98 <__hi0bits>
 800951e:	f1c0 0020 	rsb	r0, r0, #32
 8009522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009524:	4418      	add	r0, r3
 8009526:	f010 001f 	ands.w	r0, r0, #31
 800952a:	f000 8092 	beq.w	8009652 <_dtoa_r+0x92a>
 800952e:	f1c0 0320 	rsb	r3, r0, #32
 8009532:	2b04      	cmp	r3, #4
 8009534:	f340 808a 	ble.w	800964c <_dtoa_r+0x924>
 8009538:	f1c0 001c 	rsb	r0, r0, #28
 800953c:	9b06      	ldr	r3, [sp, #24]
 800953e:	4407      	add	r7, r0
 8009540:	4403      	add	r3, r0
 8009542:	9306      	str	r3, [sp, #24]
 8009544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009546:	4403      	add	r3, r0
 8009548:	9309      	str	r3, [sp, #36]	; 0x24
 800954a:	9b06      	ldr	r3, [sp, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dd05      	ble.n	800955c <_dtoa_r+0x834>
 8009550:	4651      	mov	r1, sl
 8009552:	461a      	mov	r2, r3
 8009554:	4628      	mov	r0, r5
 8009556:	f000 fc01 	bl	8009d5c <__lshift>
 800955a:	4682      	mov	sl, r0
 800955c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955e:	2b00      	cmp	r3, #0
 8009560:	dd05      	ble.n	800956e <_dtoa_r+0x846>
 8009562:	4621      	mov	r1, r4
 8009564:	461a      	mov	r2, r3
 8009566:	4628      	mov	r0, r5
 8009568:	f000 fbf8 	bl	8009d5c <__lshift>
 800956c:	4604      	mov	r4, r0
 800956e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d070      	beq.n	8009656 <_dtoa_r+0x92e>
 8009574:	4621      	mov	r1, r4
 8009576:	4650      	mov	r0, sl
 8009578:	f000 fc5c 	bl	8009e34 <__mcmp>
 800957c:	2800      	cmp	r0, #0
 800957e:	da6a      	bge.n	8009656 <_dtoa_r+0x92e>
 8009580:	2300      	movs	r3, #0
 8009582:	4651      	mov	r1, sl
 8009584:	220a      	movs	r2, #10
 8009586:	4628      	mov	r0, r5
 8009588:	f000 fa3c 	bl	8009a04 <__multadd>
 800958c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800958e:	4682      	mov	sl, r0
 8009590:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 8193 	beq.w	80098c0 <_dtoa_r+0xb98>
 800959a:	4631      	mov	r1, r6
 800959c:	2300      	movs	r3, #0
 800959e:	220a      	movs	r2, #10
 80095a0:	4628      	mov	r0, r5
 80095a2:	f000 fa2f 	bl	8009a04 <__multadd>
 80095a6:	f1bb 0f00 	cmp.w	fp, #0
 80095aa:	4606      	mov	r6, r0
 80095ac:	f300 8093 	bgt.w	80096d6 <_dtoa_r+0x9ae>
 80095b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	dc57      	bgt.n	8009666 <_dtoa_r+0x93e>
 80095b6:	e08e      	b.n	80096d6 <_dtoa_r+0x9ae>
 80095b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80095ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095be:	e756      	b.n	800946e <_dtoa_r+0x746>
 80095c0:	9b02      	ldr	r3, [sp, #8]
 80095c2:	1e5c      	subs	r4, r3, #1
 80095c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	bfb7      	itett	lt
 80095ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095cc:	1b1c      	subge	r4, r3, r4
 80095ce:	1ae2      	sublt	r2, r4, r3
 80095d0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80095d2:	bfbe      	ittt	lt
 80095d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80095d6:	189b      	addlt	r3, r3, r2
 80095d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80095da:	9b02      	ldr	r3, [sp, #8]
 80095dc:	bfb8      	it	lt
 80095de:	2400      	movlt	r4, #0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	bfbb      	ittet	lt
 80095e4:	9b06      	ldrlt	r3, [sp, #24]
 80095e6:	9a02      	ldrlt	r2, [sp, #8]
 80095e8:	9f06      	ldrge	r7, [sp, #24]
 80095ea:	1a9f      	sublt	r7, r3, r2
 80095ec:	bfac      	ite	ge
 80095ee:	9b02      	ldrge	r3, [sp, #8]
 80095f0:	2300      	movlt	r3, #0
 80095f2:	e73e      	b.n	8009472 <_dtoa_r+0x74a>
 80095f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095f6:	9f06      	ldr	r7, [sp, #24]
 80095f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095fa:	e745      	b.n	8009488 <_dtoa_r+0x760>
 80095fc:	3fe00000 	.word	0x3fe00000
 8009600:	40240000 	.word	0x40240000
 8009604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009606:	e76a      	b.n	80094de <_dtoa_r+0x7b6>
 8009608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800960a:	2b01      	cmp	r3, #1
 800960c:	dc19      	bgt.n	8009642 <_dtoa_r+0x91a>
 800960e:	9b04      	ldr	r3, [sp, #16]
 8009610:	b9bb      	cbnz	r3, 8009642 <_dtoa_r+0x91a>
 8009612:	9b05      	ldr	r3, [sp, #20]
 8009614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009618:	b99b      	cbnz	r3, 8009642 <_dtoa_r+0x91a>
 800961a:	9b05      	ldr	r3, [sp, #20]
 800961c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009620:	0d1b      	lsrs	r3, r3, #20
 8009622:	051b      	lsls	r3, r3, #20
 8009624:	b183      	cbz	r3, 8009648 <_dtoa_r+0x920>
 8009626:	f04f 0801 	mov.w	r8, #1
 800962a:	9b06      	ldr	r3, [sp, #24]
 800962c:	3301      	adds	r3, #1
 800962e:	9306      	str	r3, [sp, #24]
 8009630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009632:	3301      	adds	r3, #1
 8009634:	9309      	str	r3, [sp, #36]	; 0x24
 8009636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009638:	2b00      	cmp	r3, #0
 800963a:	f47f af6a 	bne.w	8009512 <_dtoa_r+0x7ea>
 800963e:	2001      	movs	r0, #1
 8009640:	e76f      	b.n	8009522 <_dtoa_r+0x7fa>
 8009642:	f04f 0800 	mov.w	r8, #0
 8009646:	e7f6      	b.n	8009636 <_dtoa_r+0x90e>
 8009648:	4698      	mov	r8, r3
 800964a:	e7f4      	b.n	8009636 <_dtoa_r+0x90e>
 800964c:	f43f af7d 	beq.w	800954a <_dtoa_r+0x822>
 8009650:	4618      	mov	r0, r3
 8009652:	301c      	adds	r0, #28
 8009654:	e772      	b.n	800953c <_dtoa_r+0x814>
 8009656:	9b02      	ldr	r3, [sp, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	dc36      	bgt.n	80096ca <_dtoa_r+0x9a2>
 800965c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800965e:	2b02      	cmp	r3, #2
 8009660:	dd33      	ble.n	80096ca <_dtoa_r+0x9a2>
 8009662:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009666:	f1bb 0f00 	cmp.w	fp, #0
 800966a:	d10d      	bne.n	8009688 <_dtoa_r+0x960>
 800966c:	4621      	mov	r1, r4
 800966e:	465b      	mov	r3, fp
 8009670:	2205      	movs	r2, #5
 8009672:	4628      	mov	r0, r5
 8009674:	f000 f9c6 	bl	8009a04 <__multadd>
 8009678:	4601      	mov	r1, r0
 800967a:	4604      	mov	r4, r0
 800967c:	4650      	mov	r0, sl
 800967e:	f000 fbd9 	bl	8009e34 <__mcmp>
 8009682:	2800      	cmp	r0, #0
 8009684:	f73f adb6 	bgt.w	80091f4 <_dtoa_r+0x4cc>
 8009688:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800968a:	9f08      	ldr	r7, [sp, #32]
 800968c:	ea6f 0903 	mvn.w	r9, r3
 8009690:	f04f 0800 	mov.w	r8, #0
 8009694:	4621      	mov	r1, r4
 8009696:	4628      	mov	r0, r5
 8009698:	f000 f992 	bl	80099c0 <_Bfree>
 800969c:	2e00      	cmp	r6, #0
 800969e:	f43f aea4 	beq.w	80093ea <_dtoa_r+0x6c2>
 80096a2:	f1b8 0f00 	cmp.w	r8, #0
 80096a6:	d005      	beq.n	80096b4 <_dtoa_r+0x98c>
 80096a8:	45b0      	cmp	r8, r6
 80096aa:	d003      	beq.n	80096b4 <_dtoa_r+0x98c>
 80096ac:	4641      	mov	r1, r8
 80096ae:	4628      	mov	r0, r5
 80096b0:	f000 f986 	bl	80099c0 <_Bfree>
 80096b4:	4631      	mov	r1, r6
 80096b6:	4628      	mov	r0, r5
 80096b8:	f000 f982 	bl	80099c0 <_Bfree>
 80096bc:	e695      	b.n	80093ea <_dtoa_r+0x6c2>
 80096be:	2400      	movs	r4, #0
 80096c0:	4626      	mov	r6, r4
 80096c2:	e7e1      	b.n	8009688 <_dtoa_r+0x960>
 80096c4:	46c1      	mov	r9, r8
 80096c6:	4626      	mov	r6, r4
 80096c8:	e594      	b.n	80091f4 <_dtoa_r+0x4cc>
 80096ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 80fc 	beq.w	80098ce <_dtoa_r+0xba6>
 80096d6:	2f00      	cmp	r7, #0
 80096d8:	dd05      	ble.n	80096e6 <_dtoa_r+0x9be>
 80096da:	4631      	mov	r1, r6
 80096dc:	463a      	mov	r2, r7
 80096de:	4628      	mov	r0, r5
 80096e0:	f000 fb3c 	bl	8009d5c <__lshift>
 80096e4:	4606      	mov	r6, r0
 80096e6:	f1b8 0f00 	cmp.w	r8, #0
 80096ea:	d05c      	beq.n	80097a6 <_dtoa_r+0xa7e>
 80096ec:	4628      	mov	r0, r5
 80096ee:	6871      	ldr	r1, [r6, #4]
 80096f0:	f000 f926 	bl	8009940 <_Balloc>
 80096f4:	4607      	mov	r7, r0
 80096f6:	b928      	cbnz	r0, 8009704 <_dtoa_r+0x9dc>
 80096f8:	4602      	mov	r2, r0
 80096fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096fe:	4b7e      	ldr	r3, [pc, #504]	; (80098f8 <_dtoa_r+0xbd0>)
 8009700:	f7ff bb26 	b.w	8008d50 <_dtoa_r+0x28>
 8009704:	6932      	ldr	r2, [r6, #16]
 8009706:	f106 010c 	add.w	r1, r6, #12
 800970a:	3202      	adds	r2, #2
 800970c:	0092      	lsls	r2, r2, #2
 800970e:	300c      	adds	r0, #12
 8009710:	f7fe fd2e 	bl	8008170 <memcpy>
 8009714:	2201      	movs	r2, #1
 8009716:	4639      	mov	r1, r7
 8009718:	4628      	mov	r0, r5
 800971a:	f000 fb1f 	bl	8009d5c <__lshift>
 800971e:	46b0      	mov	r8, r6
 8009720:	4606      	mov	r6, r0
 8009722:	9b08      	ldr	r3, [sp, #32]
 8009724:	3301      	adds	r3, #1
 8009726:	9302      	str	r3, [sp, #8]
 8009728:	9b08      	ldr	r3, [sp, #32]
 800972a:	445b      	add	r3, fp
 800972c:	930a      	str	r3, [sp, #40]	; 0x28
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	9309      	str	r3, [sp, #36]	; 0x24
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	4621      	mov	r1, r4
 800973a:	4650      	mov	r0, sl
 800973c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009740:	f7ff fa62 	bl	8008c08 <quorem>
 8009744:	4603      	mov	r3, r0
 8009746:	4641      	mov	r1, r8
 8009748:	3330      	adds	r3, #48	; 0x30
 800974a:	9004      	str	r0, [sp, #16]
 800974c:	4650      	mov	r0, sl
 800974e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009750:	f000 fb70 	bl	8009e34 <__mcmp>
 8009754:	4632      	mov	r2, r6
 8009756:	9006      	str	r0, [sp, #24]
 8009758:	4621      	mov	r1, r4
 800975a:	4628      	mov	r0, r5
 800975c:	f000 fb86 	bl	8009e6c <__mdiff>
 8009760:	68c2      	ldr	r2, [r0, #12]
 8009762:	4607      	mov	r7, r0
 8009764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009766:	bb02      	cbnz	r2, 80097aa <_dtoa_r+0xa82>
 8009768:	4601      	mov	r1, r0
 800976a:	4650      	mov	r0, sl
 800976c:	f000 fb62 	bl	8009e34 <__mcmp>
 8009770:	4602      	mov	r2, r0
 8009772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009774:	4639      	mov	r1, r7
 8009776:	4628      	mov	r0, r5
 8009778:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800977c:	f000 f920 	bl	80099c0 <_Bfree>
 8009780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009784:	9f02      	ldr	r7, [sp, #8]
 8009786:	ea43 0102 	orr.w	r1, r3, r2
 800978a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978c:	430b      	orrs	r3, r1
 800978e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009790:	d10d      	bne.n	80097ae <_dtoa_r+0xa86>
 8009792:	2b39      	cmp	r3, #57	; 0x39
 8009794:	d027      	beq.n	80097e6 <_dtoa_r+0xabe>
 8009796:	9a06      	ldr	r2, [sp, #24]
 8009798:	2a00      	cmp	r2, #0
 800979a:	dd01      	ble.n	80097a0 <_dtoa_r+0xa78>
 800979c:	9b04      	ldr	r3, [sp, #16]
 800979e:	3331      	adds	r3, #49	; 0x31
 80097a0:	f88b 3000 	strb.w	r3, [fp]
 80097a4:	e776      	b.n	8009694 <_dtoa_r+0x96c>
 80097a6:	4630      	mov	r0, r6
 80097a8:	e7b9      	b.n	800971e <_dtoa_r+0x9f6>
 80097aa:	2201      	movs	r2, #1
 80097ac:	e7e2      	b.n	8009774 <_dtoa_r+0xa4c>
 80097ae:	9906      	ldr	r1, [sp, #24]
 80097b0:	2900      	cmp	r1, #0
 80097b2:	db04      	blt.n	80097be <_dtoa_r+0xa96>
 80097b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80097b6:	4301      	orrs	r1, r0
 80097b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ba:	4301      	orrs	r1, r0
 80097bc:	d120      	bne.n	8009800 <_dtoa_r+0xad8>
 80097be:	2a00      	cmp	r2, #0
 80097c0:	ddee      	ble.n	80097a0 <_dtoa_r+0xa78>
 80097c2:	4651      	mov	r1, sl
 80097c4:	2201      	movs	r2, #1
 80097c6:	4628      	mov	r0, r5
 80097c8:	9302      	str	r3, [sp, #8]
 80097ca:	f000 fac7 	bl	8009d5c <__lshift>
 80097ce:	4621      	mov	r1, r4
 80097d0:	4682      	mov	sl, r0
 80097d2:	f000 fb2f 	bl	8009e34 <__mcmp>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	9b02      	ldr	r3, [sp, #8]
 80097da:	dc02      	bgt.n	80097e2 <_dtoa_r+0xaba>
 80097dc:	d1e0      	bne.n	80097a0 <_dtoa_r+0xa78>
 80097de:	07da      	lsls	r2, r3, #31
 80097e0:	d5de      	bpl.n	80097a0 <_dtoa_r+0xa78>
 80097e2:	2b39      	cmp	r3, #57	; 0x39
 80097e4:	d1da      	bne.n	800979c <_dtoa_r+0xa74>
 80097e6:	2339      	movs	r3, #57	; 0x39
 80097e8:	f88b 3000 	strb.w	r3, [fp]
 80097ec:	463b      	mov	r3, r7
 80097ee:	461f      	mov	r7, r3
 80097f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	2a39      	cmp	r2, #57	; 0x39
 80097f8:	d050      	beq.n	800989c <_dtoa_r+0xb74>
 80097fa:	3201      	adds	r2, #1
 80097fc:	701a      	strb	r2, [r3, #0]
 80097fe:	e749      	b.n	8009694 <_dtoa_r+0x96c>
 8009800:	2a00      	cmp	r2, #0
 8009802:	dd03      	ble.n	800980c <_dtoa_r+0xae4>
 8009804:	2b39      	cmp	r3, #57	; 0x39
 8009806:	d0ee      	beq.n	80097e6 <_dtoa_r+0xabe>
 8009808:	3301      	adds	r3, #1
 800980a:	e7c9      	b.n	80097a0 <_dtoa_r+0xa78>
 800980c:	9a02      	ldr	r2, [sp, #8]
 800980e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009810:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009814:	428a      	cmp	r2, r1
 8009816:	d02a      	beq.n	800986e <_dtoa_r+0xb46>
 8009818:	4651      	mov	r1, sl
 800981a:	2300      	movs	r3, #0
 800981c:	220a      	movs	r2, #10
 800981e:	4628      	mov	r0, r5
 8009820:	f000 f8f0 	bl	8009a04 <__multadd>
 8009824:	45b0      	cmp	r8, r6
 8009826:	4682      	mov	sl, r0
 8009828:	f04f 0300 	mov.w	r3, #0
 800982c:	f04f 020a 	mov.w	r2, #10
 8009830:	4641      	mov	r1, r8
 8009832:	4628      	mov	r0, r5
 8009834:	d107      	bne.n	8009846 <_dtoa_r+0xb1e>
 8009836:	f000 f8e5 	bl	8009a04 <__multadd>
 800983a:	4680      	mov	r8, r0
 800983c:	4606      	mov	r6, r0
 800983e:	9b02      	ldr	r3, [sp, #8]
 8009840:	3301      	adds	r3, #1
 8009842:	9302      	str	r3, [sp, #8]
 8009844:	e777      	b.n	8009736 <_dtoa_r+0xa0e>
 8009846:	f000 f8dd 	bl	8009a04 <__multadd>
 800984a:	4631      	mov	r1, r6
 800984c:	4680      	mov	r8, r0
 800984e:	2300      	movs	r3, #0
 8009850:	220a      	movs	r2, #10
 8009852:	4628      	mov	r0, r5
 8009854:	f000 f8d6 	bl	8009a04 <__multadd>
 8009858:	4606      	mov	r6, r0
 800985a:	e7f0      	b.n	800983e <_dtoa_r+0xb16>
 800985c:	f1bb 0f00 	cmp.w	fp, #0
 8009860:	bfcc      	ite	gt
 8009862:	465f      	movgt	r7, fp
 8009864:	2701      	movle	r7, #1
 8009866:	f04f 0800 	mov.w	r8, #0
 800986a:	9a08      	ldr	r2, [sp, #32]
 800986c:	4417      	add	r7, r2
 800986e:	4651      	mov	r1, sl
 8009870:	2201      	movs	r2, #1
 8009872:	4628      	mov	r0, r5
 8009874:	9302      	str	r3, [sp, #8]
 8009876:	f000 fa71 	bl	8009d5c <__lshift>
 800987a:	4621      	mov	r1, r4
 800987c:	4682      	mov	sl, r0
 800987e:	f000 fad9 	bl	8009e34 <__mcmp>
 8009882:	2800      	cmp	r0, #0
 8009884:	dcb2      	bgt.n	80097ec <_dtoa_r+0xac4>
 8009886:	d102      	bne.n	800988e <_dtoa_r+0xb66>
 8009888:	9b02      	ldr	r3, [sp, #8]
 800988a:	07db      	lsls	r3, r3, #31
 800988c:	d4ae      	bmi.n	80097ec <_dtoa_r+0xac4>
 800988e:	463b      	mov	r3, r7
 8009890:	461f      	mov	r7, r3
 8009892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009896:	2a30      	cmp	r2, #48	; 0x30
 8009898:	d0fa      	beq.n	8009890 <_dtoa_r+0xb68>
 800989a:	e6fb      	b.n	8009694 <_dtoa_r+0x96c>
 800989c:	9a08      	ldr	r2, [sp, #32]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d1a5      	bne.n	80097ee <_dtoa_r+0xac6>
 80098a2:	2331      	movs	r3, #49	; 0x31
 80098a4:	f109 0901 	add.w	r9, r9, #1
 80098a8:	7013      	strb	r3, [r2, #0]
 80098aa:	e6f3      	b.n	8009694 <_dtoa_r+0x96c>
 80098ac:	4b13      	ldr	r3, [pc, #76]	; (80098fc <_dtoa_r+0xbd4>)
 80098ae:	f7ff baa7 	b.w	8008e00 <_dtoa_r+0xd8>
 80098b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f47f aa80 	bne.w	8008dba <_dtoa_r+0x92>
 80098ba:	4b11      	ldr	r3, [pc, #68]	; (8009900 <_dtoa_r+0xbd8>)
 80098bc:	f7ff baa0 	b.w	8008e00 <_dtoa_r+0xd8>
 80098c0:	f1bb 0f00 	cmp.w	fp, #0
 80098c4:	dc03      	bgt.n	80098ce <_dtoa_r+0xba6>
 80098c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	f73f aecc 	bgt.w	8009666 <_dtoa_r+0x93e>
 80098ce:	9f08      	ldr	r7, [sp, #32]
 80098d0:	4621      	mov	r1, r4
 80098d2:	4650      	mov	r0, sl
 80098d4:	f7ff f998 	bl	8008c08 <quorem>
 80098d8:	9a08      	ldr	r2, [sp, #32]
 80098da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80098de:	f807 3b01 	strb.w	r3, [r7], #1
 80098e2:	1aba      	subs	r2, r7, r2
 80098e4:	4593      	cmp	fp, r2
 80098e6:	ddb9      	ble.n	800985c <_dtoa_r+0xb34>
 80098e8:	4651      	mov	r1, sl
 80098ea:	2300      	movs	r3, #0
 80098ec:	220a      	movs	r2, #10
 80098ee:	4628      	mov	r0, r5
 80098f0:	f000 f888 	bl	8009a04 <__multadd>
 80098f4:	4682      	mov	sl, r0
 80098f6:	e7eb      	b.n	80098d0 <_dtoa_r+0xba8>
 80098f8:	0800b6af 	.word	0x0800b6af
 80098fc:	0800b608 	.word	0x0800b608
 8009900:	0800b62c 	.word	0x0800b62c

08009904 <_localeconv_r>:
 8009904:	4800      	ldr	r0, [pc, #0]	; (8009908 <_localeconv_r+0x4>)
 8009906:	4770      	bx	lr
 8009908:	20000168 	.word	0x20000168

0800990c <memchr>:
 800990c:	4603      	mov	r3, r0
 800990e:	b510      	push	{r4, lr}
 8009910:	b2c9      	uxtb	r1, r1
 8009912:	4402      	add	r2, r0
 8009914:	4293      	cmp	r3, r2
 8009916:	4618      	mov	r0, r3
 8009918:	d101      	bne.n	800991e <memchr+0x12>
 800991a:	2000      	movs	r0, #0
 800991c:	e003      	b.n	8009926 <memchr+0x1a>
 800991e:	7804      	ldrb	r4, [r0, #0]
 8009920:	3301      	adds	r3, #1
 8009922:	428c      	cmp	r4, r1
 8009924:	d1f6      	bne.n	8009914 <memchr+0x8>
 8009926:	bd10      	pop	{r4, pc}

08009928 <__malloc_lock>:
 8009928:	4801      	ldr	r0, [pc, #4]	; (8009930 <__malloc_lock+0x8>)
 800992a:	f000 bd26 	b.w	800a37a <__retarget_lock_acquire_recursive>
 800992e:	bf00      	nop
 8009930:	2000083c 	.word	0x2000083c

08009934 <__malloc_unlock>:
 8009934:	4801      	ldr	r0, [pc, #4]	; (800993c <__malloc_unlock+0x8>)
 8009936:	f000 bd21 	b.w	800a37c <__retarget_lock_release_recursive>
 800993a:	bf00      	nop
 800993c:	2000083c 	.word	0x2000083c

08009940 <_Balloc>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009944:	4604      	mov	r4, r0
 8009946:	460d      	mov	r5, r1
 8009948:	b976      	cbnz	r6, 8009968 <_Balloc+0x28>
 800994a:	2010      	movs	r0, #16
 800994c:	f7fe fc08 	bl	8008160 <malloc>
 8009950:	4602      	mov	r2, r0
 8009952:	6260      	str	r0, [r4, #36]	; 0x24
 8009954:	b920      	cbnz	r0, 8009960 <_Balloc+0x20>
 8009956:	2166      	movs	r1, #102	; 0x66
 8009958:	4b17      	ldr	r3, [pc, #92]	; (80099b8 <_Balloc+0x78>)
 800995a:	4818      	ldr	r0, [pc, #96]	; (80099bc <_Balloc+0x7c>)
 800995c:	f000 fcdc 	bl	800a318 <__assert_func>
 8009960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009964:	6006      	str	r6, [r0, #0]
 8009966:	60c6      	str	r6, [r0, #12]
 8009968:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800996a:	68f3      	ldr	r3, [r6, #12]
 800996c:	b183      	cbz	r3, 8009990 <_Balloc+0x50>
 800996e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009976:	b9b8      	cbnz	r0, 80099a8 <_Balloc+0x68>
 8009978:	2101      	movs	r1, #1
 800997a:	fa01 f605 	lsl.w	r6, r1, r5
 800997e:	1d72      	adds	r2, r6, #5
 8009980:	4620      	mov	r0, r4
 8009982:	0092      	lsls	r2, r2, #2
 8009984:	f000 fb5e 	bl	800a044 <_calloc_r>
 8009988:	b160      	cbz	r0, 80099a4 <_Balloc+0x64>
 800998a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800998e:	e00e      	b.n	80099ae <_Balloc+0x6e>
 8009990:	2221      	movs	r2, #33	; 0x21
 8009992:	2104      	movs	r1, #4
 8009994:	4620      	mov	r0, r4
 8009996:	f000 fb55 	bl	800a044 <_calloc_r>
 800999a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800999c:	60f0      	str	r0, [r6, #12]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1e4      	bne.n	800996e <_Balloc+0x2e>
 80099a4:	2000      	movs	r0, #0
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	6802      	ldr	r2, [r0, #0]
 80099aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099ae:	2300      	movs	r3, #0
 80099b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099b4:	e7f7      	b.n	80099a6 <_Balloc+0x66>
 80099b6:	bf00      	nop
 80099b8:	0800b639 	.word	0x0800b639
 80099bc:	0800b6c0 	.word	0x0800b6c0

080099c0 <_Bfree>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099c4:	4605      	mov	r5, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	b976      	cbnz	r6, 80099e8 <_Bfree+0x28>
 80099ca:	2010      	movs	r0, #16
 80099cc:	f7fe fbc8 	bl	8008160 <malloc>
 80099d0:	4602      	mov	r2, r0
 80099d2:	6268      	str	r0, [r5, #36]	; 0x24
 80099d4:	b920      	cbnz	r0, 80099e0 <_Bfree+0x20>
 80099d6:	218a      	movs	r1, #138	; 0x8a
 80099d8:	4b08      	ldr	r3, [pc, #32]	; (80099fc <_Bfree+0x3c>)
 80099da:	4809      	ldr	r0, [pc, #36]	; (8009a00 <_Bfree+0x40>)
 80099dc:	f000 fc9c 	bl	800a318 <__assert_func>
 80099e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e4:	6006      	str	r6, [r0, #0]
 80099e6:	60c6      	str	r6, [r0, #12]
 80099e8:	b13c      	cbz	r4, 80099fa <_Bfree+0x3a>
 80099ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099ec:	6862      	ldr	r2, [r4, #4]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099f4:	6021      	str	r1, [r4, #0]
 80099f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099fa:	bd70      	pop	{r4, r5, r6, pc}
 80099fc:	0800b639 	.word	0x0800b639
 8009a00:	0800b6c0 	.word	0x0800b6c0

08009a04 <__multadd>:
 8009a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a08:	4698      	mov	r8, r3
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	690e      	ldr	r6, [r1, #16]
 8009a10:	4607      	mov	r7, r0
 8009a12:	f101 0014 	add.w	r0, r1, #20
 8009a16:	6805      	ldr	r5, [r0, #0]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	b2a9      	uxth	r1, r5
 8009a1c:	fb02 8101 	mla	r1, r2, r1, r8
 8009a20:	0c2d      	lsrs	r5, r5, #16
 8009a22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009a26:	fb02 c505 	mla	r5, r2, r5, ip
 8009a2a:	b289      	uxth	r1, r1
 8009a2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009a30:	429e      	cmp	r6, r3
 8009a32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009a36:	f840 1b04 	str.w	r1, [r0], #4
 8009a3a:	dcec      	bgt.n	8009a16 <__multadd+0x12>
 8009a3c:	f1b8 0f00 	cmp.w	r8, #0
 8009a40:	d022      	beq.n	8009a88 <__multadd+0x84>
 8009a42:	68a3      	ldr	r3, [r4, #8]
 8009a44:	42b3      	cmp	r3, r6
 8009a46:	dc19      	bgt.n	8009a7c <__multadd+0x78>
 8009a48:	6861      	ldr	r1, [r4, #4]
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	3101      	adds	r1, #1
 8009a4e:	f7ff ff77 	bl	8009940 <_Balloc>
 8009a52:	4605      	mov	r5, r0
 8009a54:	b928      	cbnz	r0, 8009a62 <__multadd+0x5e>
 8009a56:	4602      	mov	r2, r0
 8009a58:	21b5      	movs	r1, #181	; 0xb5
 8009a5a:	4b0d      	ldr	r3, [pc, #52]	; (8009a90 <__multadd+0x8c>)
 8009a5c:	480d      	ldr	r0, [pc, #52]	; (8009a94 <__multadd+0x90>)
 8009a5e:	f000 fc5b 	bl	800a318 <__assert_func>
 8009a62:	6922      	ldr	r2, [r4, #16]
 8009a64:	f104 010c 	add.w	r1, r4, #12
 8009a68:	3202      	adds	r2, #2
 8009a6a:	0092      	lsls	r2, r2, #2
 8009a6c:	300c      	adds	r0, #12
 8009a6e:	f7fe fb7f 	bl	8008170 <memcpy>
 8009a72:	4621      	mov	r1, r4
 8009a74:	4638      	mov	r0, r7
 8009a76:	f7ff ffa3 	bl	80099c0 <_Bfree>
 8009a7a:	462c      	mov	r4, r5
 8009a7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009a80:	3601      	adds	r6, #1
 8009a82:	f8c3 8014 	str.w	r8, [r3, #20]
 8009a86:	6126      	str	r6, [r4, #16]
 8009a88:	4620      	mov	r0, r4
 8009a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a8e:	bf00      	nop
 8009a90:	0800b6af 	.word	0x0800b6af
 8009a94:	0800b6c0 	.word	0x0800b6c0

08009a98 <__hi0bits>:
 8009a98:	0c02      	lsrs	r2, r0, #16
 8009a9a:	0412      	lsls	r2, r2, #16
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	b9ca      	cbnz	r2, 8009ad4 <__hi0bits+0x3c>
 8009aa0:	0403      	lsls	r3, r0, #16
 8009aa2:	2010      	movs	r0, #16
 8009aa4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009aa8:	bf04      	itt	eq
 8009aaa:	021b      	lsleq	r3, r3, #8
 8009aac:	3008      	addeq	r0, #8
 8009aae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009ab2:	bf04      	itt	eq
 8009ab4:	011b      	lsleq	r3, r3, #4
 8009ab6:	3004      	addeq	r0, #4
 8009ab8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009abc:	bf04      	itt	eq
 8009abe:	009b      	lsleq	r3, r3, #2
 8009ac0:	3002      	addeq	r0, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	db05      	blt.n	8009ad2 <__hi0bits+0x3a>
 8009ac6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009aca:	f100 0001 	add.w	r0, r0, #1
 8009ace:	bf08      	it	eq
 8009ad0:	2020      	moveq	r0, #32
 8009ad2:	4770      	bx	lr
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	e7e5      	b.n	8009aa4 <__hi0bits+0xc>

08009ad8 <__lo0bits>:
 8009ad8:	6803      	ldr	r3, [r0, #0]
 8009ada:	4602      	mov	r2, r0
 8009adc:	f013 0007 	ands.w	r0, r3, #7
 8009ae0:	d00b      	beq.n	8009afa <__lo0bits+0x22>
 8009ae2:	07d9      	lsls	r1, r3, #31
 8009ae4:	d422      	bmi.n	8009b2c <__lo0bits+0x54>
 8009ae6:	0798      	lsls	r0, r3, #30
 8009ae8:	bf49      	itett	mi
 8009aea:	085b      	lsrmi	r3, r3, #1
 8009aec:	089b      	lsrpl	r3, r3, #2
 8009aee:	2001      	movmi	r0, #1
 8009af0:	6013      	strmi	r3, [r2, #0]
 8009af2:	bf5c      	itt	pl
 8009af4:	2002      	movpl	r0, #2
 8009af6:	6013      	strpl	r3, [r2, #0]
 8009af8:	4770      	bx	lr
 8009afa:	b299      	uxth	r1, r3
 8009afc:	b909      	cbnz	r1, 8009b02 <__lo0bits+0x2a>
 8009afe:	2010      	movs	r0, #16
 8009b00:	0c1b      	lsrs	r3, r3, #16
 8009b02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b06:	bf04      	itt	eq
 8009b08:	0a1b      	lsreq	r3, r3, #8
 8009b0a:	3008      	addeq	r0, #8
 8009b0c:	0719      	lsls	r1, r3, #28
 8009b0e:	bf04      	itt	eq
 8009b10:	091b      	lsreq	r3, r3, #4
 8009b12:	3004      	addeq	r0, #4
 8009b14:	0799      	lsls	r1, r3, #30
 8009b16:	bf04      	itt	eq
 8009b18:	089b      	lsreq	r3, r3, #2
 8009b1a:	3002      	addeq	r0, #2
 8009b1c:	07d9      	lsls	r1, r3, #31
 8009b1e:	d403      	bmi.n	8009b28 <__lo0bits+0x50>
 8009b20:	085b      	lsrs	r3, r3, #1
 8009b22:	f100 0001 	add.w	r0, r0, #1
 8009b26:	d003      	beq.n	8009b30 <__lo0bits+0x58>
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	4770      	bx	lr
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	4770      	bx	lr
 8009b30:	2020      	movs	r0, #32
 8009b32:	4770      	bx	lr

08009b34 <__i2b>:
 8009b34:	b510      	push	{r4, lr}
 8009b36:	460c      	mov	r4, r1
 8009b38:	2101      	movs	r1, #1
 8009b3a:	f7ff ff01 	bl	8009940 <_Balloc>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	b928      	cbnz	r0, 8009b4e <__i2b+0x1a>
 8009b42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b46:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <__i2b+0x24>)
 8009b48:	4804      	ldr	r0, [pc, #16]	; (8009b5c <__i2b+0x28>)
 8009b4a:	f000 fbe5 	bl	800a318 <__assert_func>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	6144      	str	r4, [r0, #20]
 8009b52:	6103      	str	r3, [r0, #16]
 8009b54:	bd10      	pop	{r4, pc}
 8009b56:	bf00      	nop
 8009b58:	0800b6af 	.word	0x0800b6af
 8009b5c:	0800b6c0 	.word	0x0800b6c0

08009b60 <__multiply>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	4614      	mov	r4, r2
 8009b66:	690a      	ldr	r2, [r1, #16]
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	bfbe      	ittt	lt
 8009b70:	460b      	movlt	r3, r1
 8009b72:	4625      	movlt	r5, r4
 8009b74:	461c      	movlt	r4, r3
 8009b76:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009b7a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009b7e:	68ab      	ldr	r3, [r5, #8]
 8009b80:	6869      	ldr	r1, [r5, #4]
 8009b82:	eb0a 0709 	add.w	r7, sl, r9
 8009b86:	42bb      	cmp	r3, r7
 8009b88:	b085      	sub	sp, #20
 8009b8a:	bfb8      	it	lt
 8009b8c:	3101      	addlt	r1, #1
 8009b8e:	f7ff fed7 	bl	8009940 <_Balloc>
 8009b92:	b930      	cbnz	r0, 8009ba2 <__multiply+0x42>
 8009b94:	4602      	mov	r2, r0
 8009b96:	f240 115d 	movw	r1, #349	; 0x15d
 8009b9a:	4b41      	ldr	r3, [pc, #260]	; (8009ca0 <__multiply+0x140>)
 8009b9c:	4841      	ldr	r0, [pc, #260]	; (8009ca4 <__multiply+0x144>)
 8009b9e:	f000 fbbb 	bl	800a318 <__assert_func>
 8009ba2:	f100 0614 	add.w	r6, r0, #20
 8009ba6:	4633      	mov	r3, r6
 8009ba8:	2200      	movs	r2, #0
 8009baa:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009bae:	4543      	cmp	r3, r8
 8009bb0:	d31e      	bcc.n	8009bf0 <__multiply+0x90>
 8009bb2:	f105 0c14 	add.w	ip, r5, #20
 8009bb6:	f104 0314 	add.w	r3, r4, #20
 8009bba:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009bbe:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009bc2:	9202      	str	r2, [sp, #8]
 8009bc4:	ebac 0205 	sub.w	r2, ip, r5
 8009bc8:	3a15      	subs	r2, #21
 8009bca:	f022 0203 	bic.w	r2, r2, #3
 8009bce:	3204      	adds	r2, #4
 8009bd0:	f105 0115 	add.w	r1, r5, #21
 8009bd4:	458c      	cmp	ip, r1
 8009bd6:	bf38      	it	cc
 8009bd8:	2204      	movcc	r2, #4
 8009bda:	9201      	str	r2, [sp, #4]
 8009bdc:	9a02      	ldr	r2, [sp, #8]
 8009bde:	9303      	str	r3, [sp, #12]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d808      	bhi.n	8009bf6 <__multiply+0x96>
 8009be4:	2f00      	cmp	r7, #0
 8009be6:	dc55      	bgt.n	8009c94 <__multiply+0x134>
 8009be8:	6107      	str	r7, [r0, #16]
 8009bea:	b005      	add	sp, #20
 8009bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf0:	f843 2b04 	str.w	r2, [r3], #4
 8009bf4:	e7db      	b.n	8009bae <__multiply+0x4e>
 8009bf6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bfa:	f1ba 0f00 	cmp.w	sl, #0
 8009bfe:	d020      	beq.n	8009c42 <__multiply+0xe2>
 8009c00:	46b1      	mov	r9, r6
 8009c02:	2200      	movs	r2, #0
 8009c04:	f105 0e14 	add.w	lr, r5, #20
 8009c08:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009c0c:	f8d9 b000 	ldr.w	fp, [r9]
 8009c10:	b2a1      	uxth	r1, r4
 8009c12:	fa1f fb8b 	uxth.w	fp, fp
 8009c16:	fb0a b101 	mla	r1, sl, r1, fp
 8009c1a:	4411      	add	r1, r2
 8009c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c20:	0c24      	lsrs	r4, r4, #16
 8009c22:	0c12      	lsrs	r2, r2, #16
 8009c24:	fb0a 2404 	mla	r4, sl, r4, r2
 8009c28:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009c2c:	b289      	uxth	r1, r1
 8009c2e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009c32:	45f4      	cmp	ip, lr
 8009c34:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009c38:	f849 1b04 	str.w	r1, [r9], #4
 8009c3c:	d8e4      	bhi.n	8009c08 <__multiply+0xa8>
 8009c3e:	9901      	ldr	r1, [sp, #4]
 8009c40:	5072      	str	r2, [r6, r1]
 8009c42:	9a03      	ldr	r2, [sp, #12]
 8009c44:	3304      	adds	r3, #4
 8009c46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c4a:	f1b9 0f00 	cmp.w	r9, #0
 8009c4e:	d01f      	beq.n	8009c90 <__multiply+0x130>
 8009c50:	46b6      	mov	lr, r6
 8009c52:	f04f 0a00 	mov.w	sl, #0
 8009c56:	6834      	ldr	r4, [r6, #0]
 8009c58:	f105 0114 	add.w	r1, r5, #20
 8009c5c:	880a      	ldrh	r2, [r1, #0]
 8009c5e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009c62:	b2a4      	uxth	r4, r4
 8009c64:	fb09 b202 	mla	r2, r9, r2, fp
 8009c68:	4492      	add	sl, r2
 8009c6a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009c6e:	f84e 4b04 	str.w	r4, [lr], #4
 8009c72:	f851 4b04 	ldr.w	r4, [r1], #4
 8009c76:	f8be 2000 	ldrh.w	r2, [lr]
 8009c7a:	0c24      	lsrs	r4, r4, #16
 8009c7c:	fb09 2404 	mla	r4, r9, r4, r2
 8009c80:	458c      	cmp	ip, r1
 8009c82:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009c86:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c8a:	d8e7      	bhi.n	8009c5c <__multiply+0xfc>
 8009c8c:	9a01      	ldr	r2, [sp, #4]
 8009c8e:	50b4      	str	r4, [r6, r2]
 8009c90:	3604      	adds	r6, #4
 8009c92:	e7a3      	b.n	8009bdc <__multiply+0x7c>
 8009c94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1a5      	bne.n	8009be8 <__multiply+0x88>
 8009c9c:	3f01      	subs	r7, #1
 8009c9e:	e7a1      	b.n	8009be4 <__multiply+0x84>
 8009ca0:	0800b6af 	.word	0x0800b6af
 8009ca4:	0800b6c0 	.word	0x0800b6c0

08009ca8 <__pow5mult>:
 8009ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	4615      	mov	r5, r2
 8009cae:	f012 0203 	ands.w	r2, r2, #3
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	460f      	mov	r7, r1
 8009cb6:	d007      	beq.n	8009cc8 <__pow5mult+0x20>
 8009cb8:	4c25      	ldr	r4, [pc, #148]	; (8009d50 <__pow5mult+0xa8>)
 8009cba:	3a01      	subs	r2, #1
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cc2:	f7ff fe9f 	bl	8009a04 <__multadd>
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	10ad      	asrs	r5, r5, #2
 8009cca:	d03d      	beq.n	8009d48 <__pow5mult+0xa0>
 8009ccc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cce:	b97c      	cbnz	r4, 8009cf0 <__pow5mult+0x48>
 8009cd0:	2010      	movs	r0, #16
 8009cd2:	f7fe fa45 	bl	8008160 <malloc>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	6270      	str	r0, [r6, #36]	; 0x24
 8009cda:	b928      	cbnz	r0, 8009ce8 <__pow5mult+0x40>
 8009cdc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ce0:	4b1c      	ldr	r3, [pc, #112]	; (8009d54 <__pow5mult+0xac>)
 8009ce2:	481d      	ldr	r0, [pc, #116]	; (8009d58 <__pow5mult+0xb0>)
 8009ce4:	f000 fb18 	bl	800a318 <__assert_func>
 8009ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cec:	6004      	str	r4, [r0, #0]
 8009cee:	60c4      	str	r4, [r0, #12]
 8009cf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cf8:	b94c      	cbnz	r4, 8009d0e <__pow5mult+0x66>
 8009cfa:	f240 2171 	movw	r1, #625	; 0x271
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7ff ff18 	bl	8009b34 <__i2b>
 8009d04:	2300      	movs	r3, #0
 8009d06:	4604      	mov	r4, r0
 8009d08:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d0c:	6003      	str	r3, [r0, #0]
 8009d0e:	f04f 0900 	mov.w	r9, #0
 8009d12:	07eb      	lsls	r3, r5, #31
 8009d14:	d50a      	bpl.n	8009d2c <__pow5mult+0x84>
 8009d16:	4639      	mov	r1, r7
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7ff ff20 	bl	8009b60 <__multiply>
 8009d20:	4680      	mov	r8, r0
 8009d22:	4639      	mov	r1, r7
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7ff fe4b 	bl	80099c0 <_Bfree>
 8009d2a:	4647      	mov	r7, r8
 8009d2c:	106d      	asrs	r5, r5, #1
 8009d2e:	d00b      	beq.n	8009d48 <__pow5mult+0xa0>
 8009d30:	6820      	ldr	r0, [r4, #0]
 8009d32:	b938      	cbnz	r0, 8009d44 <__pow5mult+0x9c>
 8009d34:	4622      	mov	r2, r4
 8009d36:	4621      	mov	r1, r4
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff ff11 	bl	8009b60 <__multiply>
 8009d3e:	6020      	str	r0, [r4, #0]
 8009d40:	f8c0 9000 	str.w	r9, [r0]
 8009d44:	4604      	mov	r4, r0
 8009d46:	e7e4      	b.n	8009d12 <__pow5mult+0x6a>
 8009d48:	4638      	mov	r0, r7
 8009d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d4e:	bf00      	nop
 8009d50:	0800b810 	.word	0x0800b810
 8009d54:	0800b639 	.word	0x0800b639
 8009d58:	0800b6c0 	.word	0x0800b6c0

08009d5c <__lshift>:
 8009d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d60:	460c      	mov	r4, r1
 8009d62:	4607      	mov	r7, r0
 8009d64:	4691      	mov	r9, r2
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	6849      	ldr	r1, [r1, #4]
 8009d6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d6e:	68a3      	ldr	r3, [r4, #8]
 8009d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d74:	f108 0601 	add.w	r6, r8, #1
 8009d78:	42b3      	cmp	r3, r6
 8009d7a:	db0b      	blt.n	8009d94 <__lshift+0x38>
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff fddf 	bl	8009940 <_Balloc>
 8009d82:	4605      	mov	r5, r0
 8009d84:	b948      	cbnz	r0, 8009d9a <__lshift+0x3e>
 8009d86:	4602      	mov	r2, r0
 8009d88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d8c:	4b27      	ldr	r3, [pc, #156]	; (8009e2c <__lshift+0xd0>)
 8009d8e:	4828      	ldr	r0, [pc, #160]	; (8009e30 <__lshift+0xd4>)
 8009d90:	f000 fac2 	bl	800a318 <__assert_func>
 8009d94:	3101      	adds	r1, #1
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	e7ee      	b.n	8009d78 <__lshift+0x1c>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f100 0114 	add.w	r1, r0, #20
 8009da0:	f100 0210 	add.w	r2, r0, #16
 8009da4:	4618      	mov	r0, r3
 8009da6:	4553      	cmp	r3, sl
 8009da8:	db33      	blt.n	8009e12 <__lshift+0xb6>
 8009daa:	6920      	ldr	r0, [r4, #16]
 8009dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009db0:	f104 0314 	add.w	r3, r4, #20
 8009db4:	f019 091f 	ands.w	r9, r9, #31
 8009db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dc0:	d02b      	beq.n	8009e1a <__lshift+0xbe>
 8009dc2:	468a      	mov	sl, r1
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f1c9 0e20 	rsb	lr, r9, #32
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	fa00 f009 	lsl.w	r0, r0, r9
 8009dd0:	4302      	orrs	r2, r0
 8009dd2:	f84a 2b04 	str.w	r2, [sl], #4
 8009dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dda:	459c      	cmp	ip, r3
 8009ddc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009de0:	d8f3      	bhi.n	8009dca <__lshift+0x6e>
 8009de2:	ebac 0304 	sub.w	r3, ip, r4
 8009de6:	3b15      	subs	r3, #21
 8009de8:	f023 0303 	bic.w	r3, r3, #3
 8009dec:	3304      	adds	r3, #4
 8009dee:	f104 0015 	add.w	r0, r4, #21
 8009df2:	4584      	cmp	ip, r0
 8009df4:	bf38      	it	cc
 8009df6:	2304      	movcc	r3, #4
 8009df8:	50ca      	str	r2, [r1, r3]
 8009dfa:	b10a      	cbz	r2, 8009e00 <__lshift+0xa4>
 8009dfc:	f108 0602 	add.w	r6, r8, #2
 8009e00:	3e01      	subs	r6, #1
 8009e02:	4638      	mov	r0, r7
 8009e04:	4621      	mov	r1, r4
 8009e06:	612e      	str	r6, [r5, #16]
 8009e08:	f7ff fdda 	bl	80099c0 <_Bfree>
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e12:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e16:	3301      	adds	r3, #1
 8009e18:	e7c5      	b.n	8009da6 <__lshift+0x4a>
 8009e1a:	3904      	subs	r1, #4
 8009e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e20:	459c      	cmp	ip, r3
 8009e22:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e26:	d8f9      	bhi.n	8009e1c <__lshift+0xc0>
 8009e28:	e7ea      	b.n	8009e00 <__lshift+0xa4>
 8009e2a:	bf00      	nop
 8009e2c:	0800b6af 	.word	0x0800b6af
 8009e30:	0800b6c0 	.word	0x0800b6c0

08009e34 <__mcmp>:
 8009e34:	4603      	mov	r3, r0
 8009e36:	690a      	ldr	r2, [r1, #16]
 8009e38:	6900      	ldr	r0, [r0, #16]
 8009e3a:	b530      	push	{r4, r5, lr}
 8009e3c:	1a80      	subs	r0, r0, r2
 8009e3e:	d10d      	bne.n	8009e5c <__mcmp+0x28>
 8009e40:	3314      	adds	r3, #20
 8009e42:	3114      	adds	r1, #20
 8009e44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e54:	4295      	cmp	r5, r2
 8009e56:	d002      	beq.n	8009e5e <__mcmp+0x2a>
 8009e58:	d304      	bcc.n	8009e64 <__mcmp+0x30>
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	bd30      	pop	{r4, r5, pc}
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	d3f4      	bcc.n	8009e4c <__mcmp+0x18>
 8009e62:	e7fb      	b.n	8009e5c <__mcmp+0x28>
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e68:	e7f8      	b.n	8009e5c <__mcmp+0x28>
	...

08009e6c <__mdiff>:
 8009e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	460c      	mov	r4, r1
 8009e72:	4606      	mov	r6, r0
 8009e74:	4611      	mov	r1, r2
 8009e76:	4620      	mov	r0, r4
 8009e78:	4692      	mov	sl, r2
 8009e7a:	f7ff ffdb 	bl	8009e34 <__mcmp>
 8009e7e:	1e05      	subs	r5, r0, #0
 8009e80:	d111      	bne.n	8009ea6 <__mdiff+0x3a>
 8009e82:	4629      	mov	r1, r5
 8009e84:	4630      	mov	r0, r6
 8009e86:	f7ff fd5b 	bl	8009940 <_Balloc>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	b928      	cbnz	r0, 8009e9a <__mdiff+0x2e>
 8009e8e:	f240 2132 	movw	r1, #562	; 0x232
 8009e92:	4b3c      	ldr	r3, [pc, #240]	; (8009f84 <__mdiff+0x118>)
 8009e94:	483c      	ldr	r0, [pc, #240]	; (8009f88 <__mdiff+0x11c>)
 8009e96:	f000 fa3f 	bl	800a318 <__assert_func>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea6:	bfa4      	itt	ge
 8009ea8:	4653      	movge	r3, sl
 8009eaa:	46a2      	movge	sl, r4
 8009eac:	4630      	mov	r0, r6
 8009eae:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009eb2:	bfa6      	itte	ge
 8009eb4:	461c      	movge	r4, r3
 8009eb6:	2500      	movge	r5, #0
 8009eb8:	2501      	movlt	r5, #1
 8009eba:	f7ff fd41 	bl	8009940 <_Balloc>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	b918      	cbnz	r0, 8009eca <__mdiff+0x5e>
 8009ec2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ec6:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <__mdiff+0x118>)
 8009ec8:	e7e4      	b.n	8009e94 <__mdiff+0x28>
 8009eca:	f100 0814 	add.w	r8, r0, #20
 8009ece:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009ed2:	60c5      	str	r5, [r0, #12]
 8009ed4:	f04f 0c00 	mov.w	ip, #0
 8009ed8:	f10a 0514 	add.w	r5, sl, #20
 8009edc:	f10a 0010 	add.w	r0, sl, #16
 8009ee0:	46c2      	mov	sl, r8
 8009ee2:	6926      	ldr	r6, [r4, #16]
 8009ee4:	f104 0914 	add.w	r9, r4, #20
 8009ee8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009eec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ef0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009ef4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ef8:	fa1f f18b 	uxth.w	r1, fp
 8009efc:	4461      	add	r1, ip
 8009efe:	fa1f fc83 	uxth.w	ip, r3
 8009f02:	0c1b      	lsrs	r3, r3, #16
 8009f04:	eba1 010c 	sub.w	r1, r1, ip
 8009f08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f0c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009f10:	b289      	uxth	r1, r1
 8009f12:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009f16:	454e      	cmp	r6, r9
 8009f18:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009f1c:	f84a 3b04 	str.w	r3, [sl], #4
 8009f20:	d8e6      	bhi.n	8009ef0 <__mdiff+0x84>
 8009f22:	1b33      	subs	r3, r6, r4
 8009f24:	3b15      	subs	r3, #21
 8009f26:	f023 0303 	bic.w	r3, r3, #3
 8009f2a:	3415      	adds	r4, #21
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	42a6      	cmp	r6, r4
 8009f30:	bf38      	it	cc
 8009f32:	2304      	movcc	r3, #4
 8009f34:	441d      	add	r5, r3
 8009f36:	4443      	add	r3, r8
 8009f38:	461e      	mov	r6, r3
 8009f3a:	462c      	mov	r4, r5
 8009f3c:	4574      	cmp	r4, lr
 8009f3e:	d30e      	bcc.n	8009f5e <__mdiff+0xf2>
 8009f40:	f10e 0103 	add.w	r1, lr, #3
 8009f44:	1b49      	subs	r1, r1, r5
 8009f46:	f021 0103 	bic.w	r1, r1, #3
 8009f4a:	3d03      	subs	r5, #3
 8009f4c:	45ae      	cmp	lr, r5
 8009f4e:	bf38      	it	cc
 8009f50:	2100      	movcc	r1, #0
 8009f52:	4419      	add	r1, r3
 8009f54:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009f58:	b18b      	cbz	r3, 8009f7e <__mdiff+0x112>
 8009f5a:	6117      	str	r7, [r2, #16]
 8009f5c:	e7a0      	b.n	8009ea0 <__mdiff+0x34>
 8009f5e:	f854 8b04 	ldr.w	r8, [r4], #4
 8009f62:	fa1f f188 	uxth.w	r1, r8
 8009f66:	4461      	add	r1, ip
 8009f68:	1408      	asrs	r0, r1, #16
 8009f6a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009f6e:	b289      	uxth	r1, r1
 8009f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f78:	f846 1b04 	str.w	r1, [r6], #4
 8009f7c:	e7de      	b.n	8009f3c <__mdiff+0xd0>
 8009f7e:	3f01      	subs	r7, #1
 8009f80:	e7e8      	b.n	8009f54 <__mdiff+0xe8>
 8009f82:	bf00      	nop
 8009f84:	0800b6af 	.word	0x0800b6af
 8009f88:	0800b6c0 	.word	0x0800b6c0

08009f8c <__d2b>:
 8009f8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f90:	2101      	movs	r1, #1
 8009f92:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009f96:	4690      	mov	r8, r2
 8009f98:	461d      	mov	r5, r3
 8009f9a:	f7ff fcd1 	bl	8009940 <_Balloc>
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	b930      	cbnz	r0, 8009fb0 <__d2b+0x24>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	f240 310a 	movw	r1, #778	; 0x30a
 8009fa8:	4b24      	ldr	r3, [pc, #144]	; (800a03c <__d2b+0xb0>)
 8009faa:	4825      	ldr	r0, [pc, #148]	; (800a040 <__d2b+0xb4>)
 8009fac:	f000 f9b4 	bl	800a318 <__assert_func>
 8009fb0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009fb4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009fb8:	bb2d      	cbnz	r5, 800a006 <__d2b+0x7a>
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	f1b8 0300 	subs.w	r3, r8, #0
 8009fc0:	d026      	beq.n	800a010 <__d2b+0x84>
 8009fc2:	4668      	mov	r0, sp
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	f7ff fd87 	bl	8009ad8 <__lo0bits>
 8009fca:	9900      	ldr	r1, [sp, #0]
 8009fcc:	b1f0      	cbz	r0, 800a00c <__d2b+0x80>
 8009fce:	9a01      	ldr	r2, [sp, #4]
 8009fd0:	f1c0 0320 	rsb	r3, r0, #32
 8009fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd8:	430b      	orrs	r3, r1
 8009fda:	40c2      	lsrs	r2, r0
 8009fdc:	6163      	str	r3, [r4, #20]
 8009fde:	9201      	str	r2, [sp, #4]
 8009fe0:	9b01      	ldr	r3, [sp, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bf14      	ite	ne
 8009fe6:	2102      	movne	r1, #2
 8009fe8:	2101      	moveq	r1, #1
 8009fea:	61a3      	str	r3, [r4, #24]
 8009fec:	6121      	str	r1, [r4, #16]
 8009fee:	b1c5      	cbz	r5, 800a022 <__d2b+0x96>
 8009ff0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ff4:	4405      	add	r5, r0
 8009ff6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ffa:	603d      	str	r5, [r7, #0]
 8009ffc:	6030      	str	r0, [r6, #0]
 8009ffe:	4620      	mov	r0, r4
 800a000:	b002      	add	sp, #8
 800a002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a00a:	e7d6      	b.n	8009fba <__d2b+0x2e>
 800a00c:	6161      	str	r1, [r4, #20]
 800a00e:	e7e7      	b.n	8009fe0 <__d2b+0x54>
 800a010:	a801      	add	r0, sp, #4
 800a012:	f7ff fd61 	bl	8009ad8 <__lo0bits>
 800a016:	2101      	movs	r1, #1
 800a018:	9b01      	ldr	r3, [sp, #4]
 800a01a:	6121      	str	r1, [r4, #16]
 800a01c:	6163      	str	r3, [r4, #20]
 800a01e:	3020      	adds	r0, #32
 800a020:	e7e5      	b.n	8009fee <__d2b+0x62>
 800a022:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a026:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a02a:	6038      	str	r0, [r7, #0]
 800a02c:	6918      	ldr	r0, [r3, #16]
 800a02e:	f7ff fd33 	bl	8009a98 <__hi0bits>
 800a032:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a036:	6031      	str	r1, [r6, #0]
 800a038:	e7e1      	b.n	8009ffe <__d2b+0x72>
 800a03a:	bf00      	nop
 800a03c:	0800b6af 	.word	0x0800b6af
 800a040:	0800b6c0 	.word	0x0800b6c0

0800a044 <_calloc_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	fb02 f501 	mul.w	r5, r2, r1
 800a04a:	4629      	mov	r1, r5
 800a04c:	f7fe f8f2 	bl	8008234 <_malloc_r>
 800a050:	4604      	mov	r4, r0
 800a052:	b118      	cbz	r0, 800a05c <_calloc_r+0x18>
 800a054:	462a      	mov	r2, r5
 800a056:	2100      	movs	r1, #0
 800a058:	f7fe f898 	bl	800818c <memset>
 800a05c:	4620      	mov	r0, r4
 800a05e:	bd38      	pop	{r3, r4, r5, pc}

0800a060 <__ssputs_r>:
 800a060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a064:	688e      	ldr	r6, [r1, #8]
 800a066:	4682      	mov	sl, r0
 800a068:	429e      	cmp	r6, r3
 800a06a:	460c      	mov	r4, r1
 800a06c:	4690      	mov	r8, r2
 800a06e:	461f      	mov	r7, r3
 800a070:	d838      	bhi.n	800a0e4 <__ssputs_r+0x84>
 800a072:	898a      	ldrh	r2, [r1, #12]
 800a074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a078:	d032      	beq.n	800a0e0 <__ssputs_r+0x80>
 800a07a:	6825      	ldr	r5, [r4, #0]
 800a07c:	6909      	ldr	r1, [r1, #16]
 800a07e:	3301      	adds	r3, #1
 800a080:	eba5 0901 	sub.w	r9, r5, r1
 800a084:	6965      	ldr	r5, [r4, #20]
 800a086:	444b      	add	r3, r9
 800a088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a08c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a090:	106d      	asrs	r5, r5, #1
 800a092:	429d      	cmp	r5, r3
 800a094:	bf38      	it	cc
 800a096:	461d      	movcc	r5, r3
 800a098:	0553      	lsls	r3, r2, #21
 800a09a:	d531      	bpl.n	800a100 <__ssputs_r+0xa0>
 800a09c:	4629      	mov	r1, r5
 800a09e:	f7fe f8c9 	bl	8008234 <_malloc_r>
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	b950      	cbnz	r0, 800a0bc <__ssputs_r+0x5c>
 800a0a6:	230c      	movs	r3, #12
 800a0a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0ac:	f8ca 3000 	str.w	r3, [sl]
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0bc:	464a      	mov	r2, r9
 800a0be:	6921      	ldr	r1, [r4, #16]
 800a0c0:	f7fe f856 	bl	8008170 <memcpy>
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	6126      	str	r6, [r4, #16]
 800a0d2:	444e      	add	r6, r9
 800a0d4:	6026      	str	r6, [r4, #0]
 800a0d6:	463e      	mov	r6, r7
 800a0d8:	6165      	str	r5, [r4, #20]
 800a0da:	eba5 0509 	sub.w	r5, r5, r9
 800a0de:	60a5      	str	r5, [r4, #8]
 800a0e0:	42be      	cmp	r6, r7
 800a0e2:	d900      	bls.n	800a0e6 <__ssputs_r+0x86>
 800a0e4:	463e      	mov	r6, r7
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	6820      	ldr	r0, [r4, #0]
 800a0ec:	f000 f959 	bl	800a3a2 <memmove>
 800a0f0:	68a3      	ldr	r3, [r4, #8]
 800a0f2:	6822      	ldr	r2, [r4, #0]
 800a0f4:	1b9b      	subs	r3, r3, r6
 800a0f6:	4432      	add	r2, r6
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	60a3      	str	r3, [r4, #8]
 800a0fc:	6022      	str	r2, [r4, #0]
 800a0fe:	e7db      	b.n	800a0b8 <__ssputs_r+0x58>
 800a100:	462a      	mov	r2, r5
 800a102:	f000 f968 	bl	800a3d6 <_realloc_r>
 800a106:	4606      	mov	r6, r0
 800a108:	2800      	cmp	r0, #0
 800a10a:	d1e1      	bne.n	800a0d0 <__ssputs_r+0x70>
 800a10c:	4650      	mov	r0, sl
 800a10e:	6921      	ldr	r1, [r4, #16]
 800a110:	f7fe f844 	bl	800819c <_free_r>
 800a114:	e7c7      	b.n	800a0a6 <__ssputs_r+0x46>
	...

0800a118 <_svfiprintf_r>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	4698      	mov	r8, r3
 800a11e:	898b      	ldrh	r3, [r1, #12]
 800a120:	4607      	mov	r7, r0
 800a122:	061b      	lsls	r3, r3, #24
 800a124:	460d      	mov	r5, r1
 800a126:	4614      	mov	r4, r2
 800a128:	b09d      	sub	sp, #116	; 0x74
 800a12a:	d50e      	bpl.n	800a14a <_svfiprintf_r+0x32>
 800a12c:	690b      	ldr	r3, [r1, #16]
 800a12e:	b963      	cbnz	r3, 800a14a <_svfiprintf_r+0x32>
 800a130:	2140      	movs	r1, #64	; 0x40
 800a132:	f7fe f87f 	bl	8008234 <_malloc_r>
 800a136:	6028      	str	r0, [r5, #0]
 800a138:	6128      	str	r0, [r5, #16]
 800a13a:	b920      	cbnz	r0, 800a146 <_svfiprintf_r+0x2e>
 800a13c:	230c      	movs	r3, #12
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a144:	e0d1      	b.n	800a2ea <_svfiprintf_r+0x1d2>
 800a146:	2340      	movs	r3, #64	; 0x40
 800a148:	616b      	str	r3, [r5, #20]
 800a14a:	2300      	movs	r3, #0
 800a14c:	9309      	str	r3, [sp, #36]	; 0x24
 800a14e:	2320      	movs	r3, #32
 800a150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a154:	2330      	movs	r3, #48	; 0x30
 800a156:	f04f 0901 	mov.w	r9, #1
 800a15a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a15e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a304 <_svfiprintf_r+0x1ec>
 800a162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a166:	4623      	mov	r3, r4
 800a168:	469a      	mov	sl, r3
 800a16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a16e:	b10a      	cbz	r2, 800a174 <_svfiprintf_r+0x5c>
 800a170:	2a25      	cmp	r2, #37	; 0x25
 800a172:	d1f9      	bne.n	800a168 <_svfiprintf_r+0x50>
 800a174:	ebba 0b04 	subs.w	fp, sl, r4
 800a178:	d00b      	beq.n	800a192 <_svfiprintf_r+0x7a>
 800a17a:	465b      	mov	r3, fp
 800a17c:	4622      	mov	r2, r4
 800a17e:	4629      	mov	r1, r5
 800a180:	4638      	mov	r0, r7
 800a182:	f7ff ff6d 	bl	800a060 <__ssputs_r>
 800a186:	3001      	adds	r0, #1
 800a188:	f000 80aa 	beq.w	800a2e0 <_svfiprintf_r+0x1c8>
 800a18c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a18e:	445a      	add	r2, fp
 800a190:	9209      	str	r2, [sp, #36]	; 0x24
 800a192:	f89a 3000 	ldrb.w	r3, [sl]
 800a196:	2b00      	cmp	r3, #0
 800a198:	f000 80a2 	beq.w	800a2e0 <_svfiprintf_r+0x1c8>
 800a19c:	2300      	movs	r3, #0
 800a19e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1a6:	f10a 0a01 	add.w	sl, sl, #1
 800a1aa:	9304      	str	r3, [sp, #16]
 800a1ac:	9307      	str	r3, [sp, #28]
 800a1ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1b2:	931a      	str	r3, [sp, #104]	; 0x68
 800a1b4:	4654      	mov	r4, sl
 800a1b6:	2205      	movs	r2, #5
 800a1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1bc:	4851      	ldr	r0, [pc, #324]	; (800a304 <_svfiprintf_r+0x1ec>)
 800a1be:	f7ff fba5 	bl	800990c <memchr>
 800a1c2:	9a04      	ldr	r2, [sp, #16]
 800a1c4:	b9d8      	cbnz	r0, 800a1fe <_svfiprintf_r+0xe6>
 800a1c6:	06d0      	lsls	r0, r2, #27
 800a1c8:	bf44      	itt	mi
 800a1ca:	2320      	movmi	r3, #32
 800a1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d0:	0711      	lsls	r1, r2, #28
 800a1d2:	bf44      	itt	mi
 800a1d4:	232b      	movmi	r3, #43	; 0x2b
 800a1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1da:	f89a 3000 	ldrb.w	r3, [sl]
 800a1de:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e0:	d015      	beq.n	800a20e <_svfiprintf_r+0xf6>
 800a1e2:	4654      	mov	r4, sl
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	f04f 0c0a 	mov.w	ip, #10
 800a1ea:	9a07      	ldr	r2, [sp, #28]
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1f2:	3b30      	subs	r3, #48	; 0x30
 800a1f4:	2b09      	cmp	r3, #9
 800a1f6:	d94e      	bls.n	800a296 <_svfiprintf_r+0x17e>
 800a1f8:	b1b0      	cbz	r0, 800a228 <_svfiprintf_r+0x110>
 800a1fa:	9207      	str	r2, [sp, #28]
 800a1fc:	e014      	b.n	800a228 <_svfiprintf_r+0x110>
 800a1fe:	eba0 0308 	sub.w	r3, r0, r8
 800a202:	fa09 f303 	lsl.w	r3, r9, r3
 800a206:	4313      	orrs	r3, r2
 800a208:	46a2      	mov	sl, r4
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	e7d2      	b.n	800a1b4 <_svfiprintf_r+0x9c>
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	1d19      	adds	r1, r3, #4
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	9103      	str	r1, [sp, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	bfbb      	ittet	lt
 800a21a:	425b      	neglt	r3, r3
 800a21c:	f042 0202 	orrlt.w	r2, r2, #2
 800a220:	9307      	strge	r3, [sp, #28]
 800a222:	9307      	strlt	r3, [sp, #28]
 800a224:	bfb8      	it	lt
 800a226:	9204      	strlt	r2, [sp, #16]
 800a228:	7823      	ldrb	r3, [r4, #0]
 800a22a:	2b2e      	cmp	r3, #46	; 0x2e
 800a22c:	d10c      	bne.n	800a248 <_svfiprintf_r+0x130>
 800a22e:	7863      	ldrb	r3, [r4, #1]
 800a230:	2b2a      	cmp	r3, #42	; 0x2a
 800a232:	d135      	bne.n	800a2a0 <_svfiprintf_r+0x188>
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	3402      	adds	r4, #2
 800a238:	1d1a      	adds	r2, r3, #4
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	9203      	str	r2, [sp, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	bfb8      	it	lt
 800a242:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a246:	9305      	str	r3, [sp, #20]
 800a248:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a314 <_svfiprintf_r+0x1fc>
 800a24c:	2203      	movs	r2, #3
 800a24e:	4650      	mov	r0, sl
 800a250:	7821      	ldrb	r1, [r4, #0]
 800a252:	f7ff fb5b 	bl	800990c <memchr>
 800a256:	b140      	cbz	r0, 800a26a <_svfiprintf_r+0x152>
 800a258:	2340      	movs	r3, #64	; 0x40
 800a25a:	eba0 000a 	sub.w	r0, r0, sl
 800a25e:	fa03 f000 	lsl.w	r0, r3, r0
 800a262:	9b04      	ldr	r3, [sp, #16]
 800a264:	3401      	adds	r4, #1
 800a266:	4303      	orrs	r3, r0
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a26e:	2206      	movs	r2, #6
 800a270:	4825      	ldr	r0, [pc, #148]	; (800a308 <_svfiprintf_r+0x1f0>)
 800a272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a276:	f7ff fb49 	bl	800990c <memchr>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d038      	beq.n	800a2f0 <_svfiprintf_r+0x1d8>
 800a27e:	4b23      	ldr	r3, [pc, #140]	; (800a30c <_svfiprintf_r+0x1f4>)
 800a280:	bb1b      	cbnz	r3, 800a2ca <_svfiprintf_r+0x1b2>
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	3307      	adds	r3, #7
 800a286:	f023 0307 	bic.w	r3, r3, #7
 800a28a:	3308      	adds	r3, #8
 800a28c:	9303      	str	r3, [sp, #12]
 800a28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a290:	4433      	add	r3, r6
 800a292:	9309      	str	r3, [sp, #36]	; 0x24
 800a294:	e767      	b.n	800a166 <_svfiprintf_r+0x4e>
 800a296:	460c      	mov	r4, r1
 800a298:	2001      	movs	r0, #1
 800a29a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a29e:	e7a5      	b.n	800a1ec <_svfiprintf_r+0xd4>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f04f 0c0a 	mov.w	ip, #10
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	3401      	adds	r4, #1
 800a2aa:	9305      	str	r3, [sp, #20]
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b2:	3a30      	subs	r2, #48	; 0x30
 800a2b4:	2a09      	cmp	r2, #9
 800a2b6:	d903      	bls.n	800a2c0 <_svfiprintf_r+0x1a8>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d0c5      	beq.n	800a248 <_svfiprintf_r+0x130>
 800a2bc:	9105      	str	r1, [sp, #20]
 800a2be:	e7c3      	b.n	800a248 <_svfiprintf_r+0x130>
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2c8:	e7f0      	b.n	800a2ac <_svfiprintf_r+0x194>
 800a2ca:	ab03      	add	r3, sp, #12
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	462a      	mov	r2, r5
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	4b0f      	ldr	r3, [pc, #60]	; (800a310 <_svfiprintf_r+0x1f8>)
 800a2d4:	a904      	add	r1, sp, #16
 800a2d6:	f7fe f8a5 	bl	8008424 <_printf_float>
 800a2da:	1c42      	adds	r2, r0, #1
 800a2dc:	4606      	mov	r6, r0
 800a2de:	d1d6      	bne.n	800a28e <_svfiprintf_r+0x176>
 800a2e0:	89ab      	ldrh	r3, [r5, #12]
 800a2e2:	065b      	lsls	r3, r3, #25
 800a2e4:	f53f af2c 	bmi.w	800a140 <_svfiprintf_r+0x28>
 800a2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ea:	b01d      	add	sp, #116	; 0x74
 800a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f0:	ab03      	add	r3, sp, #12
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	4b05      	ldr	r3, [pc, #20]	; (800a310 <_svfiprintf_r+0x1f8>)
 800a2fa:	a904      	add	r1, sp, #16
 800a2fc:	f7fe fb2e 	bl	800895c <_printf_i>
 800a300:	e7eb      	b.n	800a2da <_svfiprintf_r+0x1c2>
 800a302:	bf00      	nop
 800a304:	0800b81c 	.word	0x0800b81c
 800a308:	0800b826 	.word	0x0800b826
 800a30c:	08008425 	.word	0x08008425
 800a310:	0800a061 	.word	0x0800a061
 800a314:	0800b822 	.word	0x0800b822

0800a318 <__assert_func>:
 800a318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a31a:	4614      	mov	r4, r2
 800a31c:	461a      	mov	r2, r3
 800a31e:	4b09      	ldr	r3, [pc, #36]	; (800a344 <__assert_func+0x2c>)
 800a320:	4605      	mov	r5, r0
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68d8      	ldr	r0, [r3, #12]
 800a326:	b14c      	cbz	r4, 800a33c <__assert_func+0x24>
 800a328:	4b07      	ldr	r3, [pc, #28]	; (800a348 <__assert_func+0x30>)
 800a32a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a32e:	9100      	str	r1, [sp, #0]
 800a330:	462b      	mov	r3, r5
 800a332:	4906      	ldr	r1, [pc, #24]	; (800a34c <__assert_func+0x34>)
 800a334:	f000 f80e 	bl	800a354 <fiprintf>
 800a338:	f000 fa98 	bl	800a86c <abort>
 800a33c:	4b04      	ldr	r3, [pc, #16]	; (800a350 <__assert_func+0x38>)
 800a33e:	461c      	mov	r4, r3
 800a340:	e7f3      	b.n	800a32a <__assert_func+0x12>
 800a342:	bf00      	nop
 800a344:	20000014 	.word	0x20000014
 800a348:	0800b82d 	.word	0x0800b82d
 800a34c:	0800b83a 	.word	0x0800b83a
 800a350:	0800b868 	.word	0x0800b868

0800a354 <fiprintf>:
 800a354:	b40e      	push	{r1, r2, r3}
 800a356:	b503      	push	{r0, r1, lr}
 800a358:	4601      	mov	r1, r0
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	4805      	ldr	r0, [pc, #20]	; (800a374 <fiprintf+0x20>)
 800a35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a362:	6800      	ldr	r0, [r0, #0]
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	f000 f883 	bl	800a470 <_vfiprintf_r>
 800a36a:	b002      	add	sp, #8
 800a36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a370:	b003      	add	sp, #12
 800a372:	4770      	bx	lr
 800a374:	20000014 	.word	0x20000014

0800a378 <__retarget_lock_init_recursive>:
 800a378:	4770      	bx	lr

0800a37a <__retarget_lock_acquire_recursive>:
 800a37a:	4770      	bx	lr

0800a37c <__retarget_lock_release_recursive>:
 800a37c:	4770      	bx	lr

0800a37e <__ascii_mbtowc>:
 800a37e:	b082      	sub	sp, #8
 800a380:	b901      	cbnz	r1, 800a384 <__ascii_mbtowc+0x6>
 800a382:	a901      	add	r1, sp, #4
 800a384:	b142      	cbz	r2, 800a398 <__ascii_mbtowc+0x1a>
 800a386:	b14b      	cbz	r3, 800a39c <__ascii_mbtowc+0x1e>
 800a388:	7813      	ldrb	r3, [r2, #0]
 800a38a:	600b      	str	r3, [r1, #0]
 800a38c:	7812      	ldrb	r2, [r2, #0]
 800a38e:	1e10      	subs	r0, r2, #0
 800a390:	bf18      	it	ne
 800a392:	2001      	movne	r0, #1
 800a394:	b002      	add	sp, #8
 800a396:	4770      	bx	lr
 800a398:	4610      	mov	r0, r2
 800a39a:	e7fb      	b.n	800a394 <__ascii_mbtowc+0x16>
 800a39c:	f06f 0001 	mvn.w	r0, #1
 800a3a0:	e7f8      	b.n	800a394 <__ascii_mbtowc+0x16>

0800a3a2 <memmove>:
 800a3a2:	4288      	cmp	r0, r1
 800a3a4:	b510      	push	{r4, lr}
 800a3a6:	eb01 0402 	add.w	r4, r1, r2
 800a3aa:	d902      	bls.n	800a3b2 <memmove+0x10>
 800a3ac:	4284      	cmp	r4, r0
 800a3ae:	4623      	mov	r3, r4
 800a3b0:	d807      	bhi.n	800a3c2 <memmove+0x20>
 800a3b2:	1e43      	subs	r3, r0, #1
 800a3b4:	42a1      	cmp	r1, r4
 800a3b6:	d008      	beq.n	800a3ca <memmove+0x28>
 800a3b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3c0:	e7f8      	b.n	800a3b4 <memmove+0x12>
 800a3c2:	4601      	mov	r1, r0
 800a3c4:	4402      	add	r2, r0
 800a3c6:	428a      	cmp	r2, r1
 800a3c8:	d100      	bne.n	800a3cc <memmove+0x2a>
 800a3ca:	bd10      	pop	{r4, pc}
 800a3cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3d4:	e7f7      	b.n	800a3c6 <memmove+0x24>

0800a3d6 <_realloc_r>:
 800a3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d8:	4607      	mov	r7, r0
 800a3da:	4614      	mov	r4, r2
 800a3dc:	460e      	mov	r6, r1
 800a3de:	b921      	cbnz	r1, 800a3ea <_realloc_r+0x14>
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3e6:	f7fd bf25 	b.w	8008234 <_malloc_r>
 800a3ea:	b922      	cbnz	r2, 800a3f6 <_realloc_r+0x20>
 800a3ec:	f7fd fed6 	bl	800819c <_free_r>
 800a3f0:	4625      	mov	r5, r4
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f6:	f000 fc5d 	bl	800acb4 <_malloc_usable_size_r>
 800a3fa:	42a0      	cmp	r0, r4
 800a3fc:	d20f      	bcs.n	800a41e <_realloc_r+0x48>
 800a3fe:	4621      	mov	r1, r4
 800a400:	4638      	mov	r0, r7
 800a402:	f7fd ff17 	bl	8008234 <_malloc_r>
 800a406:	4605      	mov	r5, r0
 800a408:	2800      	cmp	r0, #0
 800a40a:	d0f2      	beq.n	800a3f2 <_realloc_r+0x1c>
 800a40c:	4631      	mov	r1, r6
 800a40e:	4622      	mov	r2, r4
 800a410:	f7fd feae 	bl	8008170 <memcpy>
 800a414:	4631      	mov	r1, r6
 800a416:	4638      	mov	r0, r7
 800a418:	f7fd fec0 	bl	800819c <_free_r>
 800a41c:	e7e9      	b.n	800a3f2 <_realloc_r+0x1c>
 800a41e:	4635      	mov	r5, r6
 800a420:	e7e7      	b.n	800a3f2 <_realloc_r+0x1c>

0800a422 <__sfputc_r>:
 800a422:	6893      	ldr	r3, [r2, #8]
 800a424:	b410      	push	{r4}
 800a426:	3b01      	subs	r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	6093      	str	r3, [r2, #8]
 800a42c:	da07      	bge.n	800a43e <__sfputc_r+0x1c>
 800a42e:	6994      	ldr	r4, [r2, #24]
 800a430:	42a3      	cmp	r3, r4
 800a432:	db01      	blt.n	800a438 <__sfputc_r+0x16>
 800a434:	290a      	cmp	r1, #10
 800a436:	d102      	bne.n	800a43e <__sfputc_r+0x1c>
 800a438:	bc10      	pop	{r4}
 800a43a:	f000 b949 	b.w	800a6d0 <__swbuf_r>
 800a43e:	6813      	ldr	r3, [r2, #0]
 800a440:	1c58      	adds	r0, r3, #1
 800a442:	6010      	str	r0, [r2, #0]
 800a444:	7019      	strb	r1, [r3, #0]
 800a446:	4608      	mov	r0, r1
 800a448:	bc10      	pop	{r4}
 800a44a:	4770      	bx	lr

0800a44c <__sfputs_r>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	4606      	mov	r6, r0
 800a450:	460f      	mov	r7, r1
 800a452:	4614      	mov	r4, r2
 800a454:	18d5      	adds	r5, r2, r3
 800a456:	42ac      	cmp	r4, r5
 800a458:	d101      	bne.n	800a45e <__sfputs_r+0x12>
 800a45a:	2000      	movs	r0, #0
 800a45c:	e007      	b.n	800a46e <__sfputs_r+0x22>
 800a45e:	463a      	mov	r2, r7
 800a460:	4630      	mov	r0, r6
 800a462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a466:	f7ff ffdc 	bl	800a422 <__sfputc_r>
 800a46a:	1c43      	adds	r3, r0, #1
 800a46c:	d1f3      	bne.n	800a456 <__sfputs_r+0xa>
 800a46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a470 <_vfiprintf_r>:
 800a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	460d      	mov	r5, r1
 800a476:	4614      	mov	r4, r2
 800a478:	4698      	mov	r8, r3
 800a47a:	4606      	mov	r6, r0
 800a47c:	b09d      	sub	sp, #116	; 0x74
 800a47e:	b118      	cbz	r0, 800a488 <_vfiprintf_r+0x18>
 800a480:	6983      	ldr	r3, [r0, #24]
 800a482:	b90b      	cbnz	r3, 800a488 <_vfiprintf_r+0x18>
 800a484:	f000 fb14 	bl	800aab0 <__sinit>
 800a488:	4b89      	ldr	r3, [pc, #548]	; (800a6b0 <_vfiprintf_r+0x240>)
 800a48a:	429d      	cmp	r5, r3
 800a48c:	d11b      	bne.n	800a4c6 <_vfiprintf_r+0x56>
 800a48e:	6875      	ldr	r5, [r6, #4]
 800a490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a492:	07d9      	lsls	r1, r3, #31
 800a494:	d405      	bmi.n	800a4a2 <_vfiprintf_r+0x32>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	059a      	lsls	r2, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_vfiprintf_r+0x32>
 800a49c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a49e:	f7ff ff6c 	bl	800a37a <__retarget_lock_acquire_recursive>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	071b      	lsls	r3, r3, #28
 800a4a6:	d501      	bpl.n	800a4ac <_vfiprintf_r+0x3c>
 800a4a8:	692b      	ldr	r3, [r5, #16]
 800a4aa:	b9eb      	cbnz	r3, 800a4e8 <_vfiprintf_r+0x78>
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f000 f96e 	bl	800a790 <__swsetup_r>
 800a4b4:	b1c0      	cbz	r0, 800a4e8 <_vfiprintf_r+0x78>
 800a4b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4b8:	07dc      	lsls	r4, r3, #31
 800a4ba:	d50e      	bpl.n	800a4da <_vfiprintf_r+0x6a>
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4c0:	b01d      	add	sp, #116	; 0x74
 800a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c6:	4b7b      	ldr	r3, [pc, #492]	; (800a6b4 <_vfiprintf_r+0x244>)
 800a4c8:	429d      	cmp	r5, r3
 800a4ca:	d101      	bne.n	800a4d0 <_vfiprintf_r+0x60>
 800a4cc:	68b5      	ldr	r5, [r6, #8]
 800a4ce:	e7df      	b.n	800a490 <_vfiprintf_r+0x20>
 800a4d0:	4b79      	ldr	r3, [pc, #484]	; (800a6b8 <_vfiprintf_r+0x248>)
 800a4d2:	429d      	cmp	r5, r3
 800a4d4:	bf08      	it	eq
 800a4d6:	68f5      	ldreq	r5, [r6, #12]
 800a4d8:	e7da      	b.n	800a490 <_vfiprintf_r+0x20>
 800a4da:	89ab      	ldrh	r3, [r5, #12]
 800a4dc:	0598      	lsls	r0, r3, #22
 800a4de:	d4ed      	bmi.n	800a4bc <_vfiprintf_r+0x4c>
 800a4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4e2:	f7ff ff4b 	bl	800a37c <__retarget_lock_release_recursive>
 800a4e6:	e7e9      	b.n	800a4bc <_vfiprintf_r+0x4c>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ec:	2320      	movs	r3, #32
 800a4ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4f2:	2330      	movs	r3, #48	; 0x30
 800a4f4:	f04f 0901 	mov.w	r9, #1
 800a4f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a6bc <_vfiprintf_r+0x24c>
 800a500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a504:	4623      	mov	r3, r4
 800a506:	469a      	mov	sl, r3
 800a508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a50c:	b10a      	cbz	r2, 800a512 <_vfiprintf_r+0xa2>
 800a50e:	2a25      	cmp	r2, #37	; 0x25
 800a510:	d1f9      	bne.n	800a506 <_vfiprintf_r+0x96>
 800a512:	ebba 0b04 	subs.w	fp, sl, r4
 800a516:	d00b      	beq.n	800a530 <_vfiprintf_r+0xc0>
 800a518:	465b      	mov	r3, fp
 800a51a:	4622      	mov	r2, r4
 800a51c:	4629      	mov	r1, r5
 800a51e:	4630      	mov	r0, r6
 800a520:	f7ff ff94 	bl	800a44c <__sfputs_r>
 800a524:	3001      	adds	r0, #1
 800a526:	f000 80aa 	beq.w	800a67e <_vfiprintf_r+0x20e>
 800a52a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a52c:	445a      	add	r2, fp
 800a52e:	9209      	str	r2, [sp, #36]	; 0x24
 800a530:	f89a 3000 	ldrb.w	r3, [sl]
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 80a2 	beq.w	800a67e <_vfiprintf_r+0x20e>
 800a53a:	2300      	movs	r3, #0
 800a53c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a544:	f10a 0a01 	add.w	sl, sl, #1
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	9307      	str	r3, [sp, #28]
 800a54c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a550:	931a      	str	r3, [sp, #104]	; 0x68
 800a552:	4654      	mov	r4, sl
 800a554:	2205      	movs	r2, #5
 800a556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55a:	4858      	ldr	r0, [pc, #352]	; (800a6bc <_vfiprintf_r+0x24c>)
 800a55c:	f7ff f9d6 	bl	800990c <memchr>
 800a560:	9a04      	ldr	r2, [sp, #16]
 800a562:	b9d8      	cbnz	r0, 800a59c <_vfiprintf_r+0x12c>
 800a564:	06d1      	lsls	r1, r2, #27
 800a566:	bf44      	itt	mi
 800a568:	2320      	movmi	r3, #32
 800a56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a56e:	0713      	lsls	r3, r2, #28
 800a570:	bf44      	itt	mi
 800a572:	232b      	movmi	r3, #43	; 0x2b
 800a574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a578:	f89a 3000 	ldrb.w	r3, [sl]
 800a57c:	2b2a      	cmp	r3, #42	; 0x2a
 800a57e:	d015      	beq.n	800a5ac <_vfiprintf_r+0x13c>
 800a580:	4654      	mov	r4, sl
 800a582:	2000      	movs	r0, #0
 800a584:	f04f 0c0a 	mov.w	ip, #10
 800a588:	9a07      	ldr	r2, [sp, #28]
 800a58a:	4621      	mov	r1, r4
 800a58c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a590:	3b30      	subs	r3, #48	; 0x30
 800a592:	2b09      	cmp	r3, #9
 800a594:	d94e      	bls.n	800a634 <_vfiprintf_r+0x1c4>
 800a596:	b1b0      	cbz	r0, 800a5c6 <_vfiprintf_r+0x156>
 800a598:	9207      	str	r2, [sp, #28]
 800a59a:	e014      	b.n	800a5c6 <_vfiprintf_r+0x156>
 800a59c:	eba0 0308 	sub.w	r3, r0, r8
 800a5a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	46a2      	mov	sl, r4
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	e7d2      	b.n	800a552 <_vfiprintf_r+0xe2>
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	1d19      	adds	r1, r3, #4
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	9103      	str	r1, [sp, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	bfbb      	ittet	lt
 800a5b8:	425b      	neglt	r3, r3
 800a5ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a5be:	9307      	strge	r3, [sp, #28]
 800a5c0:	9307      	strlt	r3, [sp, #28]
 800a5c2:	bfb8      	it	lt
 800a5c4:	9204      	strlt	r2, [sp, #16]
 800a5c6:	7823      	ldrb	r3, [r4, #0]
 800a5c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ca:	d10c      	bne.n	800a5e6 <_vfiprintf_r+0x176>
 800a5cc:	7863      	ldrb	r3, [r4, #1]
 800a5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d0:	d135      	bne.n	800a63e <_vfiprintf_r+0x1ce>
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	3402      	adds	r4, #2
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	9203      	str	r2, [sp, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	bfb8      	it	lt
 800a5e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5e4:	9305      	str	r3, [sp, #20]
 800a5e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6cc <_vfiprintf_r+0x25c>
 800a5ea:	2203      	movs	r2, #3
 800a5ec:	4650      	mov	r0, sl
 800a5ee:	7821      	ldrb	r1, [r4, #0]
 800a5f0:	f7ff f98c 	bl	800990c <memchr>
 800a5f4:	b140      	cbz	r0, 800a608 <_vfiprintf_r+0x198>
 800a5f6:	2340      	movs	r3, #64	; 0x40
 800a5f8:	eba0 000a 	sub.w	r0, r0, sl
 800a5fc:	fa03 f000 	lsl.w	r0, r3, r0
 800a600:	9b04      	ldr	r3, [sp, #16]
 800a602:	3401      	adds	r4, #1
 800a604:	4303      	orrs	r3, r0
 800a606:	9304      	str	r3, [sp, #16]
 800a608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a60c:	2206      	movs	r2, #6
 800a60e:	482c      	ldr	r0, [pc, #176]	; (800a6c0 <_vfiprintf_r+0x250>)
 800a610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a614:	f7ff f97a 	bl	800990c <memchr>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d03f      	beq.n	800a69c <_vfiprintf_r+0x22c>
 800a61c:	4b29      	ldr	r3, [pc, #164]	; (800a6c4 <_vfiprintf_r+0x254>)
 800a61e:	bb1b      	cbnz	r3, 800a668 <_vfiprintf_r+0x1f8>
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	3307      	adds	r3, #7
 800a624:	f023 0307 	bic.w	r3, r3, #7
 800a628:	3308      	adds	r3, #8
 800a62a:	9303      	str	r3, [sp, #12]
 800a62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62e:	443b      	add	r3, r7
 800a630:	9309      	str	r3, [sp, #36]	; 0x24
 800a632:	e767      	b.n	800a504 <_vfiprintf_r+0x94>
 800a634:	460c      	mov	r4, r1
 800a636:	2001      	movs	r0, #1
 800a638:	fb0c 3202 	mla	r2, ip, r2, r3
 800a63c:	e7a5      	b.n	800a58a <_vfiprintf_r+0x11a>
 800a63e:	2300      	movs	r3, #0
 800a640:	f04f 0c0a 	mov.w	ip, #10
 800a644:	4619      	mov	r1, r3
 800a646:	3401      	adds	r4, #1
 800a648:	9305      	str	r3, [sp, #20]
 800a64a:	4620      	mov	r0, r4
 800a64c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a650:	3a30      	subs	r2, #48	; 0x30
 800a652:	2a09      	cmp	r2, #9
 800a654:	d903      	bls.n	800a65e <_vfiprintf_r+0x1ee>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0c5      	beq.n	800a5e6 <_vfiprintf_r+0x176>
 800a65a:	9105      	str	r1, [sp, #20]
 800a65c:	e7c3      	b.n	800a5e6 <_vfiprintf_r+0x176>
 800a65e:	4604      	mov	r4, r0
 800a660:	2301      	movs	r3, #1
 800a662:	fb0c 2101 	mla	r1, ip, r1, r2
 800a666:	e7f0      	b.n	800a64a <_vfiprintf_r+0x1da>
 800a668:	ab03      	add	r3, sp, #12
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	462a      	mov	r2, r5
 800a66e:	4630      	mov	r0, r6
 800a670:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <_vfiprintf_r+0x258>)
 800a672:	a904      	add	r1, sp, #16
 800a674:	f7fd fed6 	bl	8008424 <_printf_float>
 800a678:	4607      	mov	r7, r0
 800a67a:	1c78      	adds	r0, r7, #1
 800a67c:	d1d6      	bne.n	800a62c <_vfiprintf_r+0x1bc>
 800a67e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a680:	07d9      	lsls	r1, r3, #31
 800a682:	d405      	bmi.n	800a690 <_vfiprintf_r+0x220>
 800a684:	89ab      	ldrh	r3, [r5, #12]
 800a686:	059a      	lsls	r2, r3, #22
 800a688:	d402      	bmi.n	800a690 <_vfiprintf_r+0x220>
 800a68a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a68c:	f7ff fe76 	bl	800a37c <__retarget_lock_release_recursive>
 800a690:	89ab      	ldrh	r3, [r5, #12]
 800a692:	065b      	lsls	r3, r3, #25
 800a694:	f53f af12 	bmi.w	800a4bc <_vfiprintf_r+0x4c>
 800a698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a69a:	e711      	b.n	800a4c0 <_vfiprintf_r+0x50>
 800a69c:	ab03      	add	r3, sp, #12
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	462a      	mov	r2, r5
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <_vfiprintf_r+0x258>)
 800a6a6:	a904      	add	r1, sp, #16
 800a6a8:	f7fe f958 	bl	800895c <_printf_i>
 800a6ac:	e7e4      	b.n	800a678 <_vfiprintf_r+0x208>
 800a6ae:	bf00      	nop
 800a6b0:	0800b994 	.word	0x0800b994
 800a6b4:	0800b9b4 	.word	0x0800b9b4
 800a6b8:	0800b974 	.word	0x0800b974
 800a6bc:	0800b81c 	.word	0x0800b81c
 800a6c0:	0800b826 	.word	0x0800b826
 800a6c4:	08008425 	.word	0x08008425
 800a6c8:	0800a44d 	.word	0x0800a44d
 800a6cc:	0800b822 	.word	0x0800b822

0800a6d0 <__swbuf_r>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	460e      	mov	r6, r1
 800a6d4:	4614      	mov	r4, r2
 800a6d6:	4605      	mov	r5, r0
 800a6d8:	b118      	cbz	r0, 800a6e2 <__swbuf_r+0x12>
 800a6da:	6983      	ldr	r3, [r0, #24]
 800a6dc:	b90b      	cbnz	r3, 800a6e2 <__swbuf_r+0x12>
 800a6de:	f000 f9e7 	bl	800aab0 <__sinit>
 800a6e2:	4b21      	ldr	r3, [pc, #132]	; (800a768 <__swbuf_r+0x98>)
 800a6e4:	429c      	cmp	r4, r3
 800a6e6:	d12b      	bne.n	800a740 <__swbuf_r+0x70>
 800a6e8:	686c      	ldr	r4, [r5, #4]
 800a6ea:	69a3      	ldr	r3, [r4, #24]
 800a6ec:	60a3      	str	r3, [r4, #8]
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	071a      	lsls	r2, r3, #28
 800a6f2:	d52f      	bpl.n	800a754 <__swbuf_r+0x84>
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	b36b      	cbz	r3, 800a754 <__swbuf_r+0x84>
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	6820      	ldr	r0, [r4, #0]
 800a6fc:	b2f6      	uxtb	r6, r6
 800a6fe:	1ac0      	subs	r0, r0, r3
 800a700:	6963      	ldr	r3, [r4, #20]
 800a702:	4637      	mov	r7, r6
 800a704:	4283      	cmp	r3, r0
 800a706:	dc04      	bgt.n	800a712 <__swbuf_r+0x42>
 800a708:	4621      	mov	r1, r4
 800a70a:	4628      	mov	r0, r5
 800a70c:	f000 f93c 	bl	800a988 <_fflush_r>
 800a710:	bb30      	cbnz	r0, 800a760 <__swbuf_r+0x90>
 800a712:	68a3      	ldr	r3, [r4, #8]
 800a714:	3001      	adds	r0, #1
 800a716:	3b01      	subs	r3, #1
 800a718:	60a3      	str	r3, [r4, #8]
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	6022      	str	r2, [r4, #0]
 800a720:	701e      	strb	r6, [r3, #0]
 800a722:	6963      	ldr	r3, [r4, #20]
 800a724:	4283      	cmp	r3, r0
 800a726:	d004      	beq.n	800a732 <__swbuf_r+0x62>
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	07db      	lsls	r3, r3, #31
 800a72c:	d506      	bpl.n	800a73c <__swbuf_r+0x6c>
 800a72e:	2e0a      	cmp	r6, #10
 800a730:	d104      	bne.n	800a73c <__swbuf_r+0x6c>
 800a732:	4621      	mov	r1, r4
 800a734:	4628      	mov	r0, r5
 800a736:	f000 f927 	bl	800a988 <_fflush_r>
 800a73a:	b988      	cbnz	r0, 800a760 <__swbuf_r+0x90>
 800a73c:	4638      	mov	r0, r7
 800a73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a740:	4b0a      	ldr	r3, [pc, #40]	; (800a76c <__swbuf_r+0x9c>)
 800a742:	429c      	cmp	r4, r3
 800a744:	d101      	bne.n	800a74a <__swbuf_r+0x7a>
 800a746:	68ac      	ldr	r4, [r5, #8]
 800a748:	e7cf      	b.n	800a6ea <__swbuf_r+0x1a>
 800a74a:	4b09      	ldr	r3, [pc, #36]	; (800a770 <__swbuf_r+0xa0>)
 800a74c:	429c      	cmp	r4, r3
 800a74e:	bf08      	it	eq
 800a750:	68ec      	ldreq	r4, [r5, #12]
 800a752:	e7ca      	b.n	800a6ea <__swbuf_r+0x1a>
 800a754:	4621      	mov	r1, r4
 800a756:	4628      	mov	r0, r5
 800a758:	f000 f81a 	bl	800a790 <__swsetup_r>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d0cb      	beq.n	800a6f8 <__swbuf_r+0x28>
 800a760:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a764:	e7ea      	b.n	800a73c <__swbuf_r+0x6c>
 800a766:	bf00      	nop
 800a768:	0800b994 	.word	0x0800b994
 800a76c:	0800b9b4 	.word	0x0800b9b4
 800a770:	0800b974 	.word	0x0800b974

0800a774 <__ascii_wctomb>:
 800a774:	4603      	mov	r3, r0
 800a776:	4608      	mov	r0, r1
 800a778:	b141      	cbz	r1, 800a78c <__ascii_wctomb+0x18>
 800a77a:	2aff      	cmp	r2, #255	; 0xff
 800a77c:	d904      	bls.n	800a788 <__ascii_wctomb+0x14>
 800a77e:	228a      	movs	r2, #138	; 0x8a
 800a780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	4770      	bx	lr
 800a788:	2001      	movs	r0, #1
 800a78a:	700a      	strb	r2, [r1, #0]
 800a78c:	4770      	bx	lr
	...

0800a790 <__swsetup_r>:
 800a790:	4b32      	ldr	r3, [pc, #200]	; (800a85c <__swsetup_r+0xcc>)
 800a792:	b570      	push	{r4, r5, r6, lr}
 800a794:	681d      	ldr	r5, [r3, #0]
 800a796:	4606      	mov	r6, r0
 800a798:	460c      	mov	r4, r1
 800a79a:	b125      	cbz	r5, 800a7a6 <__swsetup_r+0x16>
 800a79c:	69ab      	ldr	r3, [r5, #24]
 800a79e:	b913      	cbnz	r3, 800a7a6 <__swsetup_r+0x16>
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 f985 	bl	800aab0 <__sinit>
 800a7a6:	4b2e      	ldr	r3, [pc, #184]	; (800a860 <__swsetup_r+0xd0>)
 800a7a8:	429c      	cmp	r4, r3
 800a7aa:	d10f      	bne.n	800a7cc <__swsetup_r+0x3c>
 800a7ac:	686c      	ldr	r4, [r5, #4]
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7b4:	0719      	lsls	r1, r3, #28
 800a7b6:	d42c      	bmi.n	800a812 <__swsetup_r+0x82>
 800a7b8:	06dd      	lsls	r5, r3, #27
 800a7ba:	d411      	bmi.n	800a7e0 <__swsetup_r+0x50>
 800a7bc:	2309      	movs	r3, #9
 800a7be:	6033      	str	r3, [r6, #0]
 800a7c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7c8:	81a3      	strh	r3, [r4, #12]
 800a7ca:	e03e      	b.n	800a84a <__swsetup_r+0xba>
 800a7cc:	4b25      	ldr	r3, [pc, #148]	; (800a864 <__swsetup_r+0xd4>)
 800a7ce:	429c      	cmp	r4, r3
 800a7d0:	d101      	bne.n	800a7d6 <__swsetup_r+0x46>
 800a7d2:	68ac      	ldr	r4, [r5, #8]
 800a7d4:	e7eb      	b.n	800a7ae <__swsetup_r+0x1e>
 800a7d6:	4b24      	ldr	r3, [pc, #144]	; (800a868 <__swsetup_r+0xd8>)
 800a7d8:	429c      	cmp	r4, r3
 800a7da:	bf08      	it	eq
 800a7dc:	68ec      	ldreq	r4, [r5, #12]
 800a7de:	e7e6      	b.n	800a7ae <__swsetup_r+0x1e>
 800a7e0:	0758      	lsls	r0, r3, #29
 800a7e2:	d512      	bpl.n	800a80a <__swsetup_r+0x7a>
 800a7e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7e6:	b141      	cbz	r1, 800a7fa <__swsetup_r+0x6a>
 800a7e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7ec:	4299      	cmp	r1, r3
 800a7ee:	d002      	beq.n	800a7f6 <__swsetup_r+0x66>
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7fd fcd3 	bl	800819c <_free_r>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	6363      	str	r3, [r4, #52]	; 0x34
 800a7fa:	89a3      	ldrh	r3, [r4, #12]
 800a7fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a800:	81a3      	strh	r3, [r4, #12]
 800a802:	2300      	movs	r3, #0
 800a804:	6063      	str	r3, [r4, #4]
 800a806:	6923      	ldr	r3, [r4, #16]
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	f043 0308 	orr.w	r3, r3, #8
 800a810:	81a3      	strh	r3, [r4, #12]
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	b94b      	cbnz	r3, 800a82a <__swsetup_r+0x9a>
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a81c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a820:	d003      	beq.n	800a82a <__swsetup_r+0x9a>
 800a822:	4621      	mov	r1, r4
 800a824:	4630      	mov	r0, r6
 800a826:	f000 fa05 	bl	800ac34 <__smakebuf_r>
 800a82a:	89a0      	ldrh	r0, [r4, #12]
 800a82c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a830:	f010 0301 	ands.w	r3, r0, #1
 800a834:	d00a      	beq.n	800a84c <__swsetup_r+0xbc>
 800a836:	2300      	movs	r3, #0
 800a838:	60a3      	str	r3, [r4, #8]
 800a83a:	6963      	ldr	r3, [r4, #20]
 800a83c:	425b      	negs	r3, r3
 800a83e:	61a3      	str	r3, [r4, #24]
 800a840:	6923      	ldr	r3, [r4, #16]
 800a842:	b943      	cbnz	r3, 800a856 <__swsetup_r+0xc6>
 800a844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a848:	d1ba      	bne.n	800a7c0 <__swsetup_r+0x30>
 800a84a:	bd70      	pop	{r4, r5, r6, pc}
 800a84c:	0781      	lsls	r1, r0, #30
 800a84e:	bf58      	it	pl
 800a850:	6963      	ldrpl	r3, [r4, #20]
 800a852:	60a3      	str	r3, [r4, #8]
 800a854:	e7f4      	b.n	800a840 <__swsetup_r+0xb0>
 800a856:	2000      	movs	r0, #0
 800a858:	e7f7      	b.n	800a84a <__swsetup_r+0xba>
 800a85a:	bf00      	nop
 800a85c:	20000014 	.word	0x20000014
 800a860:	0800b994 	.word	0x0800b994
 800a864:	0800b9b4 	.word	0x0800b9b4
 800a868:	0800b974 	.word	0x0800b974

0800a86c <abort>:
 800a86c:	2006      	movs	r0, #6
 800a86e:	b508      	push	{r3, lr}
 800a870:	f000 fa50 	bl	800ad14 <raise>
 800a874:	2001      	movs	r0, #1
 800a876:	f000 fb63 	bl	800af40 <_exit>
	...

0800a87c <__sflush_r>:
 800a87c:	898a      	ldrh	r2, [r1, #12]
 800a87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a882:	4605      	mov	r5, r0
 800a884:	0710      	lsls	r0, r2, #28
 800a886:	460c      	mov	r4, r1
 800a888:	d458      	bmi.n	800a93c <__sflush_r+0xc0>
 800a88a:	684b      	ldr	r3, [r1, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dc05      	bgt.n	800a89c <__sflush_r+0x20>
 800a890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a892:	2b00      	cmp	r3, #0
 800a894:	dc02      	bgt.n	800a89c <__sflush_r+0x20>
 800a896:	2000      	movs	r0, #0
 800a898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a89c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	d0f9      	beq.n	800a896 <__sflush_r+0x1a>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8a8:	682f      	ldr	r7, [r5, #0]
 800a8aa:	602b      	str	r3, [r5, #0]
 800a8ac:	d032      	beq.n	800a914 <__sflush_r+0x98>
 800a8ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	075a      	lsls	r2, r3, #29
 800a8b4:	d505      	bpl.n	800a8c2 <__sflush_r+0x46>
 800a8b6:	6863      	ldr	r3, [r4, #4]
 800a8b8:	1ac0      	subs	r0, r0, r3
 800a8ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8bc:	b10b      	cbz	r3, 800a8c2 <__sflush_r+0x46>
 800a8be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8c0:	1ac0      	subs	r0, r0, r3
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	6a21      	ldr	r1, [r4, #32]
 800a8cc:	47b0      	blx	r6
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	d106      	bne.n	800a8e2 <__sflush_r+0x66>
 800a8d4:	6829      	ldr	r1, [r5, #0]
 800a8d6:	291d      	cmp	r1, #29
 800a8d8:	d82c      	bhi.n	800a934 <__sflush_r+0xb8>
 800a8da:	4a2a      	ldr	r2, [pc, #168]	; (800a984 <__sflush_r+0x108>)
 800a8dc:	40ca      	lsrs	r2, r1
 800a8de:	07d6      	lsls	r6, r2, #31
 800a8e0:	d528      	bpl.n	800a934 <__sflush_r+0xb8>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	6062      	str	r2, [r4, #4]
 800a8e6:	6922      	ldr	r2, [r4, #16]
 800a8e8:	04d9      	lsls	r1, r3, #19
 800a8ea:	6022      	str	r2, [r4, #0]
 800a8ec:	d504      	bpl.n	800a8f8 <__sflush_r+0x7c>
 800a8ee:	1c42      	adds	r2, r0, #1
 800a8f0:	d101      	bne.n	800a8f6 <__sflush_r+0x7a>
 800a8f2:	682b      	ldr	r3, [r5, #0]
 800a8f4:	b903      	cbnz	r3, 800a8f8 <__sflush_r+0x7c>
 800a8f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8fa:	602f      	str	r7, [r5, #0]
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	d0ca      	beq.n	800a896 <__sflush_r+0x1a>
 800a900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a904:	4299      	cmp	r1, r3
 800a906:	d002      	beq.n	800a90e <__sflush_r+0x92>
 800a908:	4628      	mov	r0, r5
 800a90a:	f7fd fc47 	bl	800819c <_free_r>
 800a90e:	2000      	movs	r0, #0
 800a910:	6360      	str	r0, [r4, #52]	; 0x34
 800a912:	e7c1      	b.n	800a898 <__sflush_r+0x1c>
 800a914:	6a21      	ldr	r1, [r4, #32]
 800a916:	2301      	movs	r3, #1
 800a918:	4628      	mov	r0, r5
 800a91a:	47b0      	blx	r6
 800a91c:	1c41      	adds	r1, r0, #1
 800a91e:	d1c7      	bne.n	800a8b0 <__sflush_r+0x34>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d0c4      	beq.n	800a8b0 <__sflush_r+0x34>
 800a926:	2b1d      	cmp	r3, #29
 800a928:	d001      	beq.n	800a92e <__sflush_r+0xb2>
 800a92a:	2b16      	cmp	r3, #22
 800a92c:	d101      	bne.n	800a932 <__sflush_r+0xb6>
 800a92e:	602f      	str	r7, [r5, #0]
 800a930:	e7b1      	b.n	800a896 <__sflush_r+0x1a>
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a938:	81a3      	strh	r3, [r4, #12]
 800a93a:	e7ad      	b.n	800a898 <__sflush_r+0x1c>
 800a93c:	690f      	ldr	r7, [r1, #16]
 800a93e:	2f00      	cmp	r7, #0
 800a940:	d0a9      	beq.n	800a896 <__sflush_r+0x1a>
 800a942:	0793      	lsls	r3, r2, #30
 800a944:	bf18      	it	ne
 800a946:	2300      	movne	r3, #0
 800a948:	680e      	ldr	r6, [r1, #0]
 800a94a:	bf08      	it	eq
 800a94c:	694b      	ldreq	r3, [r1, #20]
 800a94e:	eba6 0807 	sub.w	r8, r6, r7
 800a952:	600f      	str	r7, [r1, #0]
 800a954:	608b      	str	r3, [r1, #8]
 800a956:	f1b8 0f00 	cmp.w	r8, #0
 800a95a:	dd9c      	ble.n	800a896 <__sflush_r+0x1a>
 800a95c:	4643      	mov	r3, r8
 800a95e:	463a      	mov	r2, r7
 800a960:	4628      	mov	r0, r5
 800a962:	6a21      	ldr	r1, [r4, #32]
 800a964:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a966:	47b0      	blx	r6
 800a968:	2800      	cmp	r0, #0
 800a96a:	dc06      	bgt.n	800a97a <__sflush_r+0xfe>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a976:	81a3      	strh	r3, [r4, #12]
 800a978:	e78e      	b.n	800a898 <__sflush_r+0x1c>
 800a97a:	4407      	add	r7, r0
 800a97c:	eba8 0800 	sub.w	r8, r8, r0
 800a980:	e7e9      	b.n	800a956 <__sflush_r+0xda>
 800a982:	bf00      	nop
 800a984:	20400001 	.word	0x20400001

0800a988 <_fflush_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	690b      	ldr	r3, [r1, #16]
 800a98c:	4605      	mov	r5, r0
 800a98e:	460c      	mov	r4, r1
 800a990:	b913      	cbnz	r3, 800a998 <_fflush_r+0x10>
 800a992:	2500      	movs	r5, #0
 800a994:	4628      	mov	r0, r5
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	b118      	cbz	r0, 800a9a2 <_fflush_r+0x1a>
 800a99a:	6983      	ldr	r3, [r0, #24]
 800a99c:	b90b      	cbnz	r3, 800a9a2 <_fflush_r+0x1a>
 800a99e:	f000 f887 	bl	800aab0 <__sinit>
 800a9a2:	4b14      	ldr	r3, [pc, #80]	; (800a9f4 <_fflush_r+0x6c>)
 800a9a4:	429c      	cmp	r4, r3
 800a9a6:	d11b      	bne.n	800a9e0 <_fflush_r+0x58>
 800a9a8:	686c      	ldr	r4, [r5, #4]
 800a9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0ef      	beq.n	800a992 <_fflush_r+0xa>
 800a9b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9b4:	07d0      	lsls	r0, r2, #31
 800a9b6:	d404      	bmi.n	800a9c2 <_fflush_r+0x3a>
 800a9b8:	0599      	lsls	r1, r3, #22
 800a9ba:	d402      	bmi.n	800a9c2 <_fflush_r+0x3a>
 800a9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9be:	f7ff fcdc 	bl	800a37a <__retarget_lock_acquire_recursive>
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	f7ff ff59 	bl	800a87c <__sflush_r>
 800a9ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	07da      	lsls	r2, r3, #31
 800a9d0:	d4e0      	bmi.n	800a994 <_fflush_r+0xc>
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	059b      	lsls	r3, r3, #22
 800a9d6:	d4dd      	bmi.n	800a994 <_fflush_r+0xc>
 800a9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9da:	f7ff fccf 	bl	800a37c <__retarget_lock_release_recursive>
 800a9de:	e7d9      	b.n	800a994 <_fflush_r+0xc>
 800a9e0:	4b05      	ldr	r3, [pc, #20]	; (800a9f8 <_fflush_r+0x70>)
 800a9e2:	429c      	cmp	r4, r3
 800a9e4:	d101      	bne.n	800a9ea <_fflush_r+0x62>
 800a9e6:	68ac      	ldr	r4, [r5, #8]
 800a9e8:	e7df      	b.n	800a9aa <_fflush_r+0x22>
 800a9ea:	4b04      	ldr	r3, [pc, #16]	; (800a9fc <_fflush_r+0x74>)
 800a9ec:	429c      	cmp	r4, r3
 800a9ee:	bf08      	it	eq
 800a9f0:	68ec      	ldreq	r4, [r5, #12]
 800a9f2:	e7da      	b.n	800a9aa <_fflush_r+0x22>
 800a9f4:	0800b994 	.word	0x0800b994
 800a9f8:	0800b9b4 	.word	0x0800b9b4
 800a9fc:	0800b974 	.word	0x0800b974

0800aa00 <std>:
 800aa00:	2300      	movs	r3, #0
 800aa02:	b510      	push	{r4, lr}
 800aa04:	4604      	mov	r4, r0
 800aa06:	e9c0 3300 	strd	r3, r3, [r0]
 800aa0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa0e:	6083      	str	r3, [r0, #8]
 800aa10:	8181      	strh	r1, [r0, #12]
 800aa12:	6643      	str	r3, [r0, #100]	; 0x64
 800aa14:	81c2      	strh	r2, [r0, #14]
 800aa16:	6183      	str	r3, [r0, #24]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	2208      	movs	r2, #8
 800aa1c:	305c      	adds	r0, #92	; 0x5c
 800aa1e:	f7fd fbb5 	bl	800818c <memset>
 800aa22:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <std+0x38>)
 800aa24:	6224      	str	r4, [r4, #32]
 800aa26:	6263      	str	r3, [r4, #36]	; 0x24
 800aa28:	4b04      	ldr	r3, [pc, #16]	; (800aa3c <std+0x3c>)
 800aa2a:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa2c:	4b04      	ldr	r3, [pc, #16]	; (800aa40 <std+0x40>)
 800aa2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa30:	4b04      	ldr	r3, [pc, #16]	; (800aa44 <std+0x44>)
 800aa32:	6323      	str	r3, [r4, #48]	; 0x30
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	0800ad4d 	.word	0x0800ad4d
 800aa3c:	0800ad6f 	.word	0x0800ad6f
 800aa40:	0800ada7 	.word	0x0800ada7
 800aa44:	0800adcb 	.word	0x0800adcb

0800aa48 <_cleanup_r>:
 800aa48:	4901      	ldr	r1, [pc, #4]	; (800aa50 <_cleanup_r+0x8>)
 800aa4a:	f000 b8af 	b.w	800abac <_fwalk_reent>
 800aa4e:	bf00      	nop
 800aa50:	0800a989 	.word	0x0800a989

0800aa54 <__sfmoreglue>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	2568      	movs	r5, #104	; 0x68
 800aa58:	1e4a      	subs	r2, r1, #1
 800aa5a:	4355      	muls	r5, r2
 800aa5c:	460e      	mov	r6, r1
 800aa5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa62:	f7fd fbe7 	bl	8008234 <_malloc_r>
 800aa66:	4604      	mov	r4, r0
 800aa68:	b140      	cbz	r0, 800aa7c <__sfmoreglue+0x28>
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	e9c0 1600 	strd	r1, r6, [r0]
 800aa70:	300c      	adds	r0, #12
 800aa72:	60a0      	str	r0, [r4, #8]
 800aa74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa78:	f7fd fb88 	bl	800818c <memset>
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}

0800aa80 <__sfp_lock_acquire>:
 800aa80:	4801      	ldr	r0, [pc, #4]	; (800aa88 <__sfp_lock_acquire+0x8>)
 800aa82:	f7ff bc7a 	b.w	800a37a <__retarget_lock_acquire_recursive>
 800aa86:	bf00      	nop
 800aa88:	20000840 	.word	0x20000840

0800aa8c <__sfp_lock_release>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	; (800aa94 <__sfp_lock_release+0x8>)
 800aa8e:	f7ff bc75 	b.w	800a37c <__retarget_lock_release_recursive>
 800aa92:	bf00      	nop
 800aa94:	20000840 	.word	0x20000840

0800aa98 <__sinit_lock_acquire>:
 800aa98:	4801      	ldr	r0, [pc, #4]	; (800aaa0 <__sinit_lock_acquire+0x8>)
 800aa9a:	f7ff bc6e 	b.w	800a37a <__retarget_lock_acquire_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	2000083b 	.word	0x2000083b

0800aaa4 <__sinit_lock_release>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	; (800aaac <__sinit_lock_release+0x8>)
 800aaa6:	f7ff bc69 	b.w	800a37c <__retarget_lock_release_recursive>
 800aaaa:	bf00      	nop
 800aaac:	2000083b 	.word	0x2000083b

0800aab0 <__sinit>:
 800aab0:	b510      	push	{r4, lr}
 800aab2:	4604      	mov	r4, r0
 800aab4:	f7ff fff0 	bl	800aa98 <__sinit_lock_acquire>
 800aab8:	69a3      	ldr	r3, [r4, #24]
 800aaba:	b11b      	cbz	r3, 800aac4 <__sinit+0x14>
 800aabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac0:	f7ff bff0 	b.w	800aaa4 <__sinit_lock_release>
 800aac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aac8:	6523      	str	r3, [r4, #80]	; 0x50
 800aaca:	4b13      	ldr	r3, [pc, #76]	; (800ab18 <__sinit+0x68>)
 800aacc:	4a13      	ldr	r2, [pc, #76]	; (800ab1c <__sinit+0x6c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aad2:	42a3      	cmp	r3, r4
 800aad4:	bf08      	it	eq
 800aad6:	2301      	moveq	r3, #1
 800aad8:	4620      	mov	r0, r4
 800aada:	bf08      	it	eq
 800aadc:	61a3      	streq	r3, [r4, #24]
 800aade:	f000 f81f 	bl	800ab20 <__sfp>
 800aae2:	6060      	str	r0, [r4, #4]
 800aae4:	4620      	mov	r0, r4
 800aae6:	f000 f81b 	bl	800ab20 <__sfp>
 800aaea:	60a0      	str	r0, [r4, #8]
 800aaec:	4620      	mov	r0, r4
 800aaee:	f000 f817 	bl	800ab20 <__sfp>
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	2104      	movs	r1, #4
 800aaf6:	60e0      	str	r0, [r4, #12]
 800aaf8:	6860      	ldr	r0, [r4, #4]
 800aafa:	f7ff ff81 	bl	800aa00 <std>
 800aafe:	2201      	movs	r2, #1
 800ab00:	2109      	movs	r1, #9
 800ab02:	68a0      	ldr	r0, [r4, #8]
 800ab04:	f7ff ff7c 	bl	800aa00 <std>
 800ab08:	2202      	movs	r2, #2
 800ab0a:	2112      	movs	r1, #18
 800ab0c:	68e0      	ldr	r0, [r4, #12]
 800ab0e:	f7ff ff77 	bl	800aa00 <std>
 800ab12:	2301      	movs	r3, #1
 800ab14:	61a3      	str	r3, [r4, #24]
 800ab16:	e7d1      	b.n	800aabc <__sinit+0xc>
 800ab18:	0800b5f4 	.word	0x0800b5f4
 800ab1c:	0800aa49 	.word	0x0800aa49

0800ab20 <__sfp>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	4607      	mov	r7, r0
 800ab24:	f7ff ffac 	bl	800aa80 <__sfp_lock_acquire>
 800ab28:	4b1e      	ldr	r3, [pc, #120]	; (800aba4 <__sfp+0x84>)
 800ab2a:	681e      	ldr	r6, [r3, #0]
 800ab2c:	69b3      	ldr	r3, [r6, #24]
 800ab2e:	b913      	cbnz	r3, 800ab36 <__sfp+0x16>
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7ff ffbd 	bl	800aab0 <__sinit>
 800ab36:	3648      	adds	r6, #72	; 0x48
 800ab38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	d503      	bpl.n	800ab48 <__sfp+0x28>
 800ab40:	6833      	ldr	r3, [r6, #0]
 800ab42:	b30b      	cbz	r3, 800ab88 <__sfp+0x68>
 800ab44:	6836      	ldr	r6, [r6, #0]
 800ab46:	e7f7      	b.n	800ab38 <__sfp+0x18>
 800ab48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab4c:	b9d5      	cbnz	r5, 800ab84 <__sfp+0x64>
 800ab4e:	4b16      	ldr	r3, [pc, #88]	; (800aba8 <__sfp+0x88>)
 800ab50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab54:	60e3      	str	r3, [r4, #12]
 800ab56:	6665      	str	r5, [r4, #100]	; 0x64
 800ab58:	f7ff fc0e 	bl	800a378 <__retarget_lock_init_recursive>
 800ab5c:	f7ff ff96 	bl	800aa8c <__sfp_lock_release>
 800ab60:	2208      	movs	r2, #8
 800ab62:	4629      	mov	r1, r5
 800ab64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab6c:	6025      	str	r5, [r4, #0]
 800ab6e:	61a5      	str	r5, [r4, #24]
 800ab70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab74:	f7fd fb0a 	bl	800818c <memset>
 800ab78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab80:	4620      	mov	r0, r4
 800ab82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab84:	3468      	adds	r4, #104	; 0x68
 800ab86:	e7d9      	b.n	800ab3c <__sfp+0x1c>
 800ab88:	2104      	movs	r1, #4
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	f7ff ff62 	bl	800aa54 <__sfmoreglue>
 800ab90:	4604      	mov	r4, r0
 800ab92:	6030      	str	r0, [r6, #0]
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d1d5      	bne.n	800ab44 <__sfp+0x24>
 800ab98:	f7ff ff78 	bl	800aa8c <__sfp_lock_release>
 800ab9c:	230c      	movs	r3, #12
 800ab9e:	603b      	str	r3, [r7, #0]
 800aba0:	e7ee      	b.n	800ab80 <__sfp+0x60>
 800aba2:	bf00      	nop
 800aba4:	0800b5f4 	.word	0x0800b5f4
 800aba8:	ffff0001 	.word	0xffff0001

0800abac <_fwalk_reent>:
 800abac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb0:	4606      	mov	r6, r0
 800abb2:	4688      	mov	r8, r1
 800abb4:	2700      	movs	r7, #0
 800abb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abbe:	f1b9 0901 	subs.w	r9, r9, #1
 800abc2:	d505      	bpl.n	800abd0 <_fwalk_reent+0x24>
 800abc4:	6824      	ldr	r4, [r4, #0]
 800abc6:	2c00      	cmp	r4, #0
 800abc8:	d1f7      	bne.n	800abba <_fwalk_reent+0xe>
 800abca:	4638      	mov	r0, r7
 800abcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd0:	89ab      	ldrh	r3, [r5, #12]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d907      	bls.n	800abe6 <_fwalk_reent+0x3a>
 800abd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abda:	3301      	adds	r3, #1
 800abdc:	d003      	beq.n	800abe6 <_fwalk_reent+0x3a>
 800abde:	4629      	mov	r1, r5
 800abe0:	4630      	mov	r0, r6
 800abe2:	47c0      	blx	r8
 800abe4:	4307      	orrs	r7, r0
 800abe6:	3568      	adds	r5, #104	; 0x68
 800abe8:	e7e9      	b.n	800abbe <_fwalk_reent+0x12>

0800abea <__swhatbuf_r>:
 800abea:	b570      	push	{r4, r5, r6, lr}
 800abec:	460e      	mov	r6, r1
 800abee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf2:	4614      	mov	r4, r2
 800abf4:	2900      	cmp	r1, #0
 800abf6:	461d      	mov	r5, r3
 800abf8:	b096      	sub	sp, #88	; 0x58
 800abfa:	da07      	bge.n	800ac0c <__swhatbuf_r+0x22>
 800abfc:	2300      	movs	r3, #0
 800abfe:	602b      	str	r3, [r5, #0]
 800ac00:	89b3      	ldrh	r3, [r6, #12]
 800ac02:	061a      	lsls	r2, r3, #24
 800ac04:	d410      	bmi.n	800ac28 <__swhatbuf_r+0x3e>
 800ac06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac0a:	e00e      	b.n	800ac2a <__swhatbuf_r+0x40>
 800ac0c:	466a      	mov	r2, sp
 800ac0e:	f000 f903 	bl	800ae18 <_fstat_r>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	dbf2      	blt.n	800abfc <__swhatbuf_r+0x12>
 800ac16:	9a01      	ldr	r2, [sp, #4]
 800ac18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac20:	425a      	negs	r2, r3
 800ac22:	415a      	adcs	r2, r3
 800ac24:	602a      	str	r2, [r5, #0]
 800ac26:	e7ee      	b.n	800ac06 <__swhatbuf_r+0x1c>
 800ac28:	2340      	movs	r3, #64	; 0x40
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	b016      	add	sp, #88	; 0x58
 800ac30:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac34 <__smakebuf_r>:
 800ac34:	898b      	ldrh	r3, [r1, #12]
 800ac36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac38:	079d      	lsls	r5, r3, #30
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	d507      	bpl.n	800ac50 <__smakebuf_r+0x1c>
 800ac40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	2301      	movs	r3, #1
 800ac4a:	6163      	str	r3, [r4, #20]
 800ac4c:	b002      	add	sp, #8
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	466a      	mov	r2, sp
 800ac52:	ab01      	add	r3, sp, #4
 800ac54:	f7ff ffc9 	bl	800abea <__swhatbuf_r>
 800ac58:	9900      	ldr	r1, [sp, #0]
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f7fd fae9 	bl	8008234 <_malloc_r>
 800ac62:	b948      	cbnz	r0, 800ac78 <__smakebuf_r+0x44>
 800ac64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac68:	059a      	lsls	r2, r3, #22
 800ac6a:	d4ef      	bmi.n	800ac4c <__smakebuf_r+0x18>
 800ac6c:	f023 0303 	bic.w	r3, r3, #3
 800ac70:	f043 0302 	orr.w	r3, r3, #2
 800ac74:	81a3      	strh	r3, [r4, #12]
 800ac76:	e7e3      	b.n	800ac40 <__smakebuf_r+0xc>
 800ac78:	4b0d      	ldr	r3, [pc, #52]	; (800acb0 <__smakebuf_r+0x7c>)
 800ac7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	6020      	str	r0, [r4, #0]
 800ac80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	9b00      	ldr	r3, [sp, #0]
 800ac88:	6120      	str	r0, [r4, #16]
 800ac8a:	6163      	str	r3, [r4, #20]
 800ac8c:	9b01      	ldr	r3, [sp, #4]
 800ac8e:	b15b      	cbz	r3, 800aca8 <__smakebuf_r+0x74>
 800ac90:	4630      	mov	r0, r6
 800ac92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac96:	f000 f8d1 	bl	800ae3c <_isatty_r>
 800ac9a:	b128      	cbz	r0, 800aca8 <__smakebuf_r+0x74>
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	f023 0303 	bic.w	r3, r3, #3
 800aca2:	f043 0301 	orr.w	r3, r3, #1
 800aca6:	81a3      	strh	r3, [r4, #12]
 800aca8:	89a0      	ldrh	r0, [r4, #12]
 800acaa:	4305      	orrs	r5, r0
 800acac:	81a5      	strh	r5, [r4, #12]
 800acae:	e7cd      	b.n	800ac4c <__smakebuf_r+0x18>
 800acb0:	0800aa49 	.word	0x0800aa49

0800acb4 <_malloc_usable_size_r>:
 800acb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb8:	1f18      	subs	r0, r3, #4
 800acba:	2b00      	cmp	r3, #0
 800acbc:	bfbc      	itt	lt
 800acbe:	580b      	ldrlt	r3, [r1, r0]
 800acc0:	18c0      	addlt	r0, r0, r3
 800acc2:	4770      	bx	lr

0800acc4 <_raise_r>:
 800acc4:	291f      	cmp	r1, #31
 800acc6:	b538      	push	{r3, r4, r5, lr}
 800acc8:	4604      	mov	r4, r0
 800acca:	460d      	mov	r5, r1
 800accc:	d904      	bls.n	800acd8 <_raise_r+0x14>
 800acce:	2316      	movs	r3, #22
 800acd0:	6003      	str	r3, [r0, #0]
 800acd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acda:	b112      	cbz	r2, 800ace2 <_raise_r+0x1e>
 800acdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ace0:	b94b      	cbnz	r3, 800acf6 <_raise_r+0x32>
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 f830 	bl	800ad48 <_getpid_r>
 800ace8:	462a      	mov	r2, r5
 800acea:	4601      	mov	r1, r0
 800acec:	4620      	mov	r0, r4
 800acee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf2:	f000 b817 	b.w	800ad24 <_kill_r>
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d00a      	beq.n	800ad10 <_raise_r+0x4c>
 800acfa:	1c59      	adds	r1, r3, #1
 800acfc:	d103      	bne.n	800ad06 <_raise_r+0x42>
 800acfe:	2316      	movs	r3, #22
 800ad00:	6003      	str	r3, [r0, #0]
 800ad02:	2001      	movs	r0, #1
 800ad04:	e7e7      	b.n	800acd6 <_raise_r+0x12>
 800ad06:	2400      	movs	r4, #0
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad0e:	4798      	blx	r3
 800ad10:	2000      	movs	r0, #0
 800ad12:	e7e0      	b.n	800acd6 <_raise_r+0x12>

0800ad14 <raise>:
 800ad14:	4b02      	ldr	r3, [pc, #8]	; (800ad20 <raise+0xc>)
 800ad16:	4601      	mov	r1, r0
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	f7ff bfd3 	b.w	800acc4 <_raise_r>
 800ad1e:	bf00      	nop
 800ad20:	20000014 	.word	0x20000014

0800ad24 <_kill_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	2300      	movs	r3, #0
 800ad28:	4d06      	ldr	r5, [pc, #24]	; (800ad44 <_kill_r+0x20>)
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	4611      	mov	r1, r2
 800ad30:	602b      	str	r3, [r5, #0]
 800ad32:	f000 f8d7 	bl	800aee4 <_kill>
 800ad36:	1c43      	adds	r3, r0, #1
 800ad38:	d102      	bne.n	800ad40 <_kill_r+0x1c>
 800ad3a:	682b      	ldr	r3, [r5, #0]
 800ad3c:	b103      	cbz	r3, 800ad40 <_kill_r+0x1c>
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	bd38      	pop	{r3, r4, r5, pc}
 800ad42:	bf00      	nop
 800ad44:	20000834 	.word	0x20000834

0800ad48 <_getpid_r>:
 800ad48:	f000 b8bc 	b.w	800aec4 <_getpid>

0800ad4c <__sread>:
 800ad4c:	b510      	push	{r4, lr}
 800ad4e:	460c      	mov	r4, r1
 800ad50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad54:	f000 f894 	bl	800ae80 <_read_r>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	bfab      	itete	ge
 800ad5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad60:	181b      	addge	r3, r3, r0
 800ad62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad66:	bfac      	ite	ge
 800ad68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad6a:	81a3      	strhlt	r3, [r4, #12]
 800ad6c:	bd10      	pop	{r4, pc}

0800ad6e <__swrite>:
 800ad6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad72:	461f      	mov	r7, r3
 800ad74:	898b      	ldrh	r3, [r1, #12]
 800ad76:	4605      	mov	r5, r0
 800ad78:	05db      	lsls	r3, r3, #23
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	4616      	mov	r6, r2
 800ad7e:	d505      	bpl.n	800ad8c <__swrite+0x1e>
 800ad80:	2302      	movs	r3, #2
 800ad82:	2200      	movs	r2, #0
 800ad84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad88:	f000 f868 	bl	800ae5c <_lseek_r>
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	4632      	mov	r2, r6
 800ad90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad94:	81a3      	strh	r3, [r4, #12]
 800ad96:	4628      	mov	r0, r5
 800ad98:	463b      	mov	r3, r7
 800ad9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ada2:	f000 b817 	b.w	800add4 <_write_r>

0800ada6 <__sseek>:
 800ada6:	b510      	push	{r4, lr}
 800ada8:	460c      	mov	r4, r1
 800adaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adae:	f000 f855 	bl	800ae5c <_lseek_r>
 800adb2:	1c43      	adds	r3, r0, #1
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	bf15      	itete	ne
 800adb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800adba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adc2:	81a3      	strheq	r3, [r4, #12]
 800adc4:	bf18      	it	ne
 800adc6:	81a3      	strhne	r3, [r4, #12]
 800adc8:	bd10      	pop	{r4, pc}

0800adca <__sclose>:
 800adca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adce:	f000 b813 	b.w	800adf8 <_close_r>
	...

0800add4 <_write_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4604      	mov	r4, r0
 800add8:	4608      	mov	r0, r1
 800adda:	4611      	mov	r1, r2
 800addc:	2200      	movs	r2, #0
 800adde:	4d05      	ldr	r5, [pc, #20]	; (800adf4 <_write_r+0x20>)
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f000 f8a4 	bl	800af30 <_write>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_write_r+0x1e>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_write_r+0x1e>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20000834 	.word	0x20000834

0800adf8 <_close_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	2300      	movs	r3, #0
 800adfc:	4d05      	ldr	r5, [pc, #20]	; (800ae14 <_close_r+0x1c>)
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	f000 f84e 	bl	800aea4 <_close>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	d102      	bne.n	800ae12 <_close_r+0x1a>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b103      	cbz	r3, 800ae12 <_close_r+0x1a>
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	20000834 	.word	0x20000834

0800ae18 <_fstat_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	4d06      	ldr	r5, [pc, #24]	; (800ae38 <_fstat_r+0x20>)
 800ae1e:	4604      	mov	r4, r0
 800ae20:	4608      	mov	r0, r1
 800ae22:	4611      	mov	r1, r2
 800ae24:	602b      	str	r3, [r5, #0]
 800ae26:	f000 f845 	bl	800aeb4 <_fstat>
 800ae2a:	1c43      	adds	r3, r0, #1
 800ae2c:	d102      	bne.n	800ae34 <_fstat_r+0x1c>
 800ae2e:	682b      	ldr	r3, [r5, #0]
 800ae30:	b103      	cbz	r3, 800ae34 <_fstat_r+0x1c>
 800ae32:	6023      	str	r3, [r4, #0]
 800ae34:	bd38      	pop	{r3, r4, r5, pc}
 800ae36:	bf00      	nop
 800ae38:	20000834 	.word	0x20000834

0800ae3c <_isatty_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	2300      	movs	r3, #0
 800ae40:	4d05      	ldr	r5, [pc, #20]	; (800ae58 <_isatty_r+0x1c>)
 800ae42:	4604      	mov	r4, r0
 800ae44:	4608      	mov	r0, r1
 800ae46:	602b      	str	r3, [r5, #0]
 800ae48:	f000 f844 	bl	800aed4 <_isatty>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d102      	bne.n	800ae56 <_isatty_r+0x1a>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	b103      	cbz	r3, 800ae56 <_isatty_r+0x1a>
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
 800ae58:	20000834 	.word	0x20000834

0800ae5c <_lseek_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	4611      	mov	r1, r2
 800ae64:	2200      	movs	r2, #0
 800ae66:	4d05      	ldr	r5, [pc, #20]	; (800ae7c <_lseek_r+0x20>)
 800ae68:	602a      	str	r2, [r5, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f000 f842 	bl	800aef4 <_lseek>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_lseek_r+0x1e>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_lseek_r+0x1e>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20000834 	.word	0x20000834

0800ae80 <_read_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	4608      	mov	r0, r1
 800ae86:	4611      	mov	r1, r2
 800ae88:	2200      	movs	r2, #0
 800ae8a:	4d05      	ldr	r5, [pc, #20]	; (800aea0 <_read_r+0x20>)
 800ae8c:	602a      	str	r2, [r5, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	f000 f838 	bl	800af04 <_read>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d102      	bne.n	800ae9e <_read_r+0x1e>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	b103      	cbz	r3, 800ae9e <_read_r+0x1e>
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	20000834 	.word	0x20000834

0800aea4 <_close>:
 800aea4:	2258      	movs	r2, #88	; 0x58
 800aea6:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <_close+0xc>)
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	4770      	bx	lr
 800aeb0:	20000834 	.word	0x20000834

0800aeb4 <_fstat>:
 800aeb4:	2258      	movs	r2, #88	; 0x58
 800aeb6:	4b02      	ldr	r3, [pc, #8]	; (800aec0 <_fstat+0xc>)
 800aeb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	4770      	bx	lr
 800aec0:	20000834 	.word	0x20000834

0800aec4 <_getpid>:
 800aec4:	2258      	movs	r2, #88	; 0x58
 800aec6:	4b02      	ldr	r3, [pc, #8]	; (800aed0 <_getpid+0xc>)
 800aec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	4770      	bx	lr
 800aed0:	20000834 	.word	0x20000834

0800aed4 <_isatty>:
 800aed4:	2258      	movs	r2, #88	; 0x58
 800aed6:	4b02      	ldr	r3, [pc, #8]	; (800aee0 <_isatty+0xc>)
 800aed8:	2000      	movs	r0, #0
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	20000834 	.word	0x20000834

0800aee4 <_kill>:
 800aee4:	2258      	movs	r2, #88	; 0x58
 800aee6:	4b02      	ldr	r3, [pc, #8]	; (800aef0 <_kill+0xc>)
 800aee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	4770      	bx	lr
 800aef0:	20000834 	.word	0x20000834

0800aef4 <_lseek>:
 800aef4:	2258      	movs	r2, #88	; 0x58
 800aef6:	4b02      	ldr	r3, [pc, #8]	; (800af00 <_lseek+0xc>)
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	4770      	bx	lr
 800af00:	20000834 	.word	0x20000834

0800af04 <_read>:
 800af04:	2258      	movs	r2, #88	; 0x58
 800af06:	4b02      	ldr	r3, [pc, #8]	; (800af10 <_read+0xc>)
 800af08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	4770      	bx	lr
 800af10:	20000834 	.word	0x20000834

0800af14 <_sbrk>:
 800af14:	4b04      	ldr	r3, [pc, #16]	; (800af28 <_sbrk+0x14>)
 800af16:	4602      	mov	r2, r0
 800af18:	6819      	ldr	r1, [r3, #0]
 800af1a:	b909      	cbnz	r1, 800af20 <_sbrk+0xc>
 800af1c:	4903      	ldr	r1, [pc, #12]	; (800af2c <_sbrk+0x18>)
 800af1e:	6019      	str	r1, [r3, #0]
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	4402      	add	r2, r0
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	4770      	bx	lr
 800af28:	20000420 	.word	0x20000420
 800af2c:	20000848 	.word	0x20000848

0800af30 <_write>:
 800af30:	2258      	movs	r2, #88	; 0x58
 800af32:	4b02      	ldr	r3, [pc, #8]	; (800af3c <_write+0xc>)
 800af34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	4770      	bx	lr
 800af3c:	20000834 	.word	0x20000834

0800af40 <_exit>:
 800af40:	e7fe      	b.n	800af40 <_exit>
	...

0800af44 <_init>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	bf00      	nop
 800af48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4a:	bc08      	pop	{r3}
 800af4c:	469e      	mov	lr, r3
 800af4e:	4770      	bx	lr

0800af50 <_fini>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr
